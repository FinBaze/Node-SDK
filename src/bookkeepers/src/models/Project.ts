/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze bookkeepers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectEmbedded } from './ProjectEmbedded';
import {
    ProjectEmbeddedFromJSON,
    ProjectEmbeddedFromJSONTyped,
    ProjectEmbeddedToJSON,
    ProjectEmbeddedToJSONTyped,
} from './ProjectEmbedded';

/**
 * Employee
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    start?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    end?: Date;
    /**
     * 
     * @type {ProjectEmbedded}
     * @memberof Project
     */
    embedded?: ProjectEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): value is Project {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'start': json['start'] == null ? undefined : (new Date(json['start'])),
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
        'embedded': json['_embedded'] == null ? undefined : ProjectEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function ProjectToJSON(json: any): Project {
    return ProjectToJSONTyped(json, false);
}

export function ProjectToJSONTyped(value?: Omit<Project, 'id'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'start': value['start'] == null ? undefined : ((value['start']).toISOString().substring(0,10)),
        'end': value['end'] == null ? undefined : ((value['end']).toISOString().substring(0,10)),
        '_embedded': ProjectEmbeddedToJSON(value['embedded']),
    };
}

