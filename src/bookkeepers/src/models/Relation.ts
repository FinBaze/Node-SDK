/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze bookkeepers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelationBank } from './RelationBank';
import {
    RelationBankFromJSON,
    RelationBankFromJSONTyped,
    RelationBankToJSON,
    RelationBankToJSONTyped,
} from './RelationBank';
import type { RelationEu } from './RelationEu';
import {
    RelationEuFromJSON,
    RelationEuFromJSONTyped,
    RelationEuToJSON,
    RelationEuToJSONTyped,
} from './RelationEu';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';

/**
 * 
 * @export
 * @interface Relation
 */
export interface Relation {
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    readonly id: string;
    /**
     * Display name based on the legal name, first, middle, and last name
     * @type {string}
     * @memberof Relation
     */
    readonly name?: string;
    /**
     * Registered number of the company
     * @type {string}
     * @memberof Relation
     */
    registeredNumber?: string;
    /**
     * Email address for communication with the client
     * @type {string}
     * @memberof Relation
     */
    email?: string;
    /**
     * ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof Relation
     */
    registrationCountry?: string;
    /**
     * 
     * @type {RelationBank}
     * @memberof Relation
     */
    bank?: RelationBank;
    /**
     * 
     * @type {RelationEu}
     * @memberof Relation
     */
    eu?: RelationEu;
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    legalName: string;
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    middleName: string;
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    lastName: string;
    /**
     * 
     * @type {Address}
     * @memberof Relation
     */
    address: Address;
    /**
     * Free form key/ value pair
     * @type {object}
     * @memberof Relation
     */
    metadata?: object;
    /**
     * 
     * @type {Date}
     * @memberof Relation
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Relation
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the Relation interface.
 */
export function instanceOfRelation(value: object): value is Relation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('legalName' in value) || value['legalName'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('middleName' in value) || value['middleName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function RelationFromJSON(json: any): Relation {
    return RelationFromJSONTyped(json, false);
}

export function RelationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Relation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'registeredNumber': json['registered_number'] == null ? undefined : json['registered_number'],
        'email': json['email'] == null ? undefined : json['email'],
        'registrationCountry': json['registration_country'] == null ? undefined : json['registration_country'],
        'bank': json['bank'] == null ? undefined : RelationBankFromJSON(json['bank']),
        'eu': json['eu'] == null ? undefined : RelationEuFromJSON(json['eu']),
        'legalName': json['legal_name'],
        'firstName': json['first_name'],
        'middleName': json['middle_name'],
        'lastName': json['last_name'],
        'address': AddressFromJSON(json['address']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function RelationToJSON(json: any): Relation {
    return RelationToJSONTyped(json, false);
}

export function RelationToJSONTyped(value?: Omit<Relation, 'id'|'name'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'registered_number': value['registeredNumber'],
        'email': value['email'],
        'registration_country': value['registrationCountry'],
        'bank': RelationBankToJSON(value['bank']),
        'eu': RelationEuToJSON(value['eu']),
        'legal_name': value['legalName'],
        'first_name': value['firstName'],
        'middle_name': value['middleName'],
        'last_name': value['lastName'],
        'address': AddressToJSON(value['address']),
        'metadata': value['metadata'],
    };
}

