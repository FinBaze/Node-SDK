/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze bookkeepers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    readonly id: string;
    /**
     * The name of the product
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * The code of the product, assigned by the company
     * @type {string}
     * @memberof Product
     */
    code?: string;
    /**
     * The code sku of the product
     * @type {string}
     * @memberof Product
     */
    sku?: string;
    /**
     * The price of the product, exlcuding taxes
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    type?: ProductTypeEnum;
    /**
     * The amount of stock available for this product
     * @type {number}
     * @memberof Product
     */
    stock?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    taxCodes: Array<ProductTaxCodesEnum>;
    /**
     * Product category ID
     * @type {string}
     * @memberof Product
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    expenseCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    balanceCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    revenueCategory?: string;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof Product
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof Product
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Product
     */
    readonly created: Date;
}


/**
 * @export
 */
export const ProductTypeEnum = {
    Goods: 'goods',
    Services: 'services'
} as const;
export type ProductTypeEnum = typeof ProductTypeEnum[keyof typeof ProductTypeEnum];

/**
 * @export
 */
export const ProductTaxCodesEnum = {
    Nl2012High: 'NL_2012_HIGH',
    Nl2019Low: 'NL_2019_LOW',
    Nl2001High: 'NL_2001_HIGH',
    Nl2001Low: 'NL_2001_LOW',
    Nl2024Exempt: 'NL_2024_EXEMPT',
    Nl2024Null: 'NL_2024_NULL',
    Nl2024Transfer: 'NL_2024_TRANSFER',
    EuDirective2006112EcArticle40: 'EU_Directive_2006/112/EC_Article_40',
    Gb2024Standard: 'GB_2024_STANDARD',
    Gb2024Reduced: 'GB_2024_REDUCED',
    Gb2024Zero: 'GB_2024_ZERO',
    Gb2024Exempt: 'GB_2024_EXEMPT'
} as const;
export type ProductTaxCodesEnum = typeof ProductTaxCodesEnum[keyof typeof ProductTaxCodesEnum];


/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('taxCodes' in value) || value['taxCodes'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'code': json['code'] == null ? undefined : json['code'],
        'sku': json['sku'] == null ? undefined : json['sku'],
        'price': json['price'],
        'type': json['type'] == null ? undefined : json['type'],
        'stock': json['stock'] == null ? undefined : json['stock'],
        'taxCodes': json['tax-codes'],
        'category': json['category'] == null ? undefined : json['category'],
        'expenseCategory': json['expense-category'] == null ? undefined : json['expense-category'],
        'balanceCategory': json['balance-category'] == null ? undefined : json['balance-category'],
        'revenueCategory': json['revenue-category'] == null ? undefined : json['revenue-category'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Omit<Product, 'id'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'code': value['code'],
        'sku': value['sku'],
        'price': value['price'],
        'type': value['type'],
        'stock': value['stock'],
        'tax-codes': value['taxCodes'],
        'category': value['category'],
        'expense-category': value['expenseCategory'],
        'balance-category': value['balanceCategory'],
        'revenue-category': value['revenueCategory'],
        'metadata': value['metadata'],
    };
}

