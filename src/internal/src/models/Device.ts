/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    os: DeviceOsEnum;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    model?: string;
    /**
     * 
     * @type {Date}
     * @memberof Device
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Device
     */
    readonly created: Date;
}


/**
 * @export
 */
export const DeviceOsEnum = {
    Ios: 'ios',
    Android: 'android',
    Web: 'web',
    Visionos: 'visionos'
} as const;
export type DeviceOsEnum = typeof DeviceOsEnum[keyof typeof DeviceOsEnum];


/**
 * Check if a given object implements the Device interface.
 */
export function instanceOfDevice(value: object): value is Device {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('os' in value) || value['os'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function DeviceFromJSON(json: any): Device {
    return DeviceFromJSONTyped(json, false);
}

export function DeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Device {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'name': json['name'],
        'os': json['os'],
        'model': json['model'] == null ? undefined : json['model'],
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function DeviceToJSON(json: any): Device {
    return DeviceToJSONTyped(json, false);
}

export function DeviceToJSONTyped(value?: Omit<Device, 'id'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'uuid': value['uuid'],
        'name': value['name'],
        'os': value['os'],
        'model': value['model'],
    };
}

