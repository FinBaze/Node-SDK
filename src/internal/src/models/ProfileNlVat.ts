/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProfileNlVat
 */
export interface ProfileNlVat {
    /**
     * 
     * @type {string}
     * @memberof ProfileNlVat
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileNlVat
     */
    number: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileNlVat
     */
    timeframe: ProfileNlVatTimeframeEnum;
}


/**
 * @export
 */
export const ProfileNlVatTimeframeEnum = {
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type ProfileNlVatTimeframeEnum = typeof ProfileNlVatTimeframeEnum[keyof typeof ProfileNlVatTimeframeEnum];


/**
 * Check if a given object implements the ProfileNlVat interface.
 */
export function instanceOfProfileNlVat(value: object): value is ProfileNlVat {
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('timeframe' in value) || value['timeframe'] === undefined) return false;
    return true;
}

export function ProfileNlVatFromJSON(json: any): ProfileNlVat {
    return ProfileNlVatFromJSONTyped(json, false);
}

export function ProfileNlVatFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileNlVat {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'number': json['number'],
        'timeframe': json['timeframe'],
    };
}

export function ProfileNlVatToJSON(json: any): ProfileNlVat {
    return ProfileNlVatToJSONTyped(json, false);
}

export function ProfileNlVatToJSONTyped(value?: ProfileNlVat | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'number': value['number'],
        'timeframe': value['timeframe'],
    };
}

