/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
    LinksToJSONTyped,
} from './Links';
import type { PackingSlibEmbedded } from './PackingSlibEmbedded';
import {
    PackingSlibEmbeddedFromJSON,
    PackingSlibEmbeddedFromJSONTyped,
    PackingSlibEmbeddedToJSON,
    PackingSlibEmbeddedToJSONTyped,
} from './PackingSlibEmbedded';
import type { SalesInvoicePeriod } from './SalesInvoicePeriod';
import {
    SalesInvoicePeriodFromJSON,
    SalesInvoicePeriodFromJSONTyped,
    SalesInvoicePeriodToJSON,
    SalesInvoicePeriodToJSONTyped,
} from './SalesInvoicePeriod';

/**
 * 
 * @export
 * @interface PackingSlib
 */
export interface PackingSlib {
    /**
     * 
     * @type {string}
     * @memberof PackingSlib
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof PackingSlib
     */
    readonly uuid: string;
    /**
     * Purchase Order number, this is a unique identifier for the purchase order.
     * @type {string}
     * @memberof PackingSlib
     */
    number: string;
    /**
     * 
     * @type {SalesInvoicePeriod}
     * @memberof PackingSlib
     */
    period?: SalesInvoicePeriod;
    /**
     * Date of issuance of the invoice
     * @type {Date}
     * @memberof PackingSlib
     */
    date: Date;
    /**
     * Wheter or not an file has been uploaded, true for yes, and false for no.
     * @type {boolean}
     * @memberof PackingSlib
     */
    file: boolean;
    /**
     * ID of the purchase invoice payment batch where this purchase invoice is included
     * @type {string}
     * @memberof PackingSlib
     */
    batch?: string;
    /**
     * 
     * @type {Date}
     * @memberof PackingSlib
     */
    readonly closed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PackingSlib
     */
    readonly disputed?: Date;
    /**
     * Date of payment of the invoice
     * @type {Date}
     * @memberof PackingSlib
     */
    readonly paid?: Date;
    /**
     * Indicates wheter the invoice is overdue or not
     * @type {boolean}
     * @memberof PackingSlib
     */
    overdue: boolean;
    /**
     * Indicates wheter the invoice is in concept or not
     * @type {boolean}
     * @memberof PackingSlib
     */
    concept: boolean;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof PackingSlib
     */
    currency: string;
    /**
     * ID of the relation to use
     * @type {string}
     * @memberof PackingSlib
     */
    relation: string;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof PackingSlib
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {PackingSlibEmbedded}
     * @memberof PackingSlib
     */
    embedded: PackingSlibEmbedded;
    /**
     * 
     * @type {Links}
     * @memberof PackingSlib
     */
    links: Links;
    /**
     * 
     * @type {Date}
     * @memberof PackingSlib
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof PackingSlib
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the PackingSlib interface.
 */
export function instanceOfPackingSlib(value: object): value is PackingSlib {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('file' in value) || value['file'] === undefined) return false;
    if (!('overdue' in value) || value['overdue'] === undefined) return false;
    if (!('concept' in value) || value['concept'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('relation' in value) || value['relation'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function PackingSlibFromJSON(json: any): PackingSlib {
    return PackingSlibFromJSONTyped(json, false);
}

export function PackingSlibFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackingSlib {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'number': json['number'],
        'period': json['period'] == null ? undefined : SalesInvoicePeriodFromJSON(json['period']),
        'date': (new Date(json['date'])),
        'file': json['file'],
        'batch': json['batch'] == null ? undefined : json['batch'],
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'disputed': json['disputed'] == null ? undefined : (new Date(json['disputed'])),
        'paid': json['paid'] == null ? undefined : (new Date(json['paid'])),
        'overdue': json['overdue'],
        'concept': json['concept'],
        'currency': json['currency'],
        'relation': json['relation'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': PackingSlibEmbeddedFromJSON(json['_embedded']),
        'links': LinksFromJSON(json['_links']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function PackingSlibToJSON(json: any): PackingSlib {
    return PackingSlibToJSONTyped(json, false);
}

export function PackingSlibToJSONTyped(value?: Omit<PackingSlib, 'id'|'uuid'|'closed'|'disputed'|'paid'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'number': value['number'],
        'period': SalesInvoicePeriodToJSON(value['period']),
        'date': ((value['date']).toISOString().substring(0,10)),
        'file': value['file'],
        'batch': value['batch'],
        'overdue': value['overdue'],
        'concept': value['concept'],
        'currency': value['currency'],
        'relation': value['relation'],
        'metadata': value['metadata'],
        '_embedded': PackingSlibEmbeddedToJSON(value['embedded']),
        '_links': LinksToJSON(value['links']),
    };
}

