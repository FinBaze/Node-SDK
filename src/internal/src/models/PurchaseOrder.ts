/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
    LinksToJSONTyped,
} from './Links';
import type { PurchaseOrderEmbedded } from './PurchaseOrderEmbedded';
import {
    PurchaseOrderEmbeddedFromJSON,
    PurchaseOrderEmbeddedFromJSONTyped,
    PurchaseOrderEmbeddedToJSON,
    PurchaseOrderEmbeddedToJSONTyped,
} from './PurchaseOrderEmbedded';

/**
 * 
 * @export
 * @interface PurchaseOrder
 */
export interface PurchaseOrder {
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    readonly uuid: string;
    /**
     * Purchase Order number, this is a unique identifier for the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    number: string;
    /**
     * Date of issuance of the invoice
     * @type {Date}
     * @memberof PurchaseOrder
     */
    date: Date;
    /**
     * Wheter or not an file has been uploaded, true for yes, and false for no.
     * @type {boolean}
     * @memberof PurchaseOrder
     */
    file: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    readonly closed?: Date;
    /**
     * Indicates wheter the invoice is in concept or not
     * @type {boolean}
     * @memberof PurchaseOrder
     */
    concept: boolean;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof PurchaseOrder
     */
    currency: string;
    /**
     * ID of the relation to use
     * @type {string}
     * @memberof PurchaseOrder
     */
    relation: string;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof PurchaseOrder
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {PurchaseOrderEmbedded}
     * @memberof PurchaseOrder
     */
    embedded: PurchaseOrderEmbedded;
    /**
     * 
     * @type {Links}
     * @memberof PurchaseOrder
     */
    links: Links;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the PurchaseOrder interface.
 */
export function instanceOfPurchaseOrder(value: object): value is PurchaseOrder {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('file' in value) || value['file'] === undefined) return false;
    if (!('concept' in value) || value['concept'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('relation' in value) || value['relation'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function PurchaseOrderFromJSON(json: any): PurchaseOrder {
    return PurchaseOrderFromJSONTyped(json, false);
}

export function PurchaseOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchaseOrder {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'number': json['number'],
        'date': (new Date(json['date'])),
        'file': json['file'],
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'concept': json['concept'],
        'currency': json['currency'],
        'relation': json['relation'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': PurchaseOrderEmbeddedFromJSON(json['_embedded']),
        'links': LinksFromJSON(json['_links']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function PurchaseOrderToJSON(json: any): PurchaseOrder {
    return PurchaseOrderToJSONTyped(json, false);
}

export function PurchaseOrderToJSONTyped(value?: Omit<PurchaseOrder, 'id'|'uuid'|'closed'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'number': value['number'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'file': value['file'],
        'concept': value['concept'],
        'currency': value['currency'],
        'relation': value['relation'],
        'metadata': value['metadata'],
        '_embedded': PurchaseOrderEmbeddedToJSON(value['embedded']),
        '_links': LinksToJSON(value['links']),
    };
}

