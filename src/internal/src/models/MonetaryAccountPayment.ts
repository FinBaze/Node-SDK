/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MonetaryAccountPaymentOriginal } from './MonetaryAccountPaymentOriginal';
import {
    MonetaryAccountPaymentOriginalFromJSON,
    MonetaryAccountPaymentOriginalFromJSONTyped,
    MonetaryAccountPaymentOriginalToJSON,
    MonetaryAccountPaymentOriginalToJSONTyped,
} from './MonetaryAccountPaymentOriginal';
import type { MonetaryAccountPaymentSepa } from './MonetaryAccountPaymentSepa';
import {
    MonetaryAccountPaymentSepaFromJSON,
    MonetaryAccountPaymentSepaFromJSONTyped,
    MonetaryAccountPaymentSepaToJSON,
    MonetaryAccountPaymentSepaToJSONTyped,
} from './MonetaryAccountPaymentSepa';
import type { MonetaryAccountPaymentEmbedded } from './MonetaryAccountPaymentEmbedded';
import {
    MonetaryAccountPaymentEmbeddedFromJSON,
    MonetaryAccountPaymentEmbeddedFromJSONTyped,
    MonetaryAccountPaymentEmbeddedToJSON,
    MonetaryAccountPaymentEmbeddedToJSONTyped,
} from './MonetaryAccountPaymentEmbedded';

/**
 * 
 * @export
 * @interface MonetaryAccountPayment
 */
export interface MonetaryAccountPayment {
    /**
     * 
     * @type {string}
     * @memberof MonetaryAccountPayment
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof MonetaryAccountPayment
     */
    name: string;
    /**
     * Transaction reference or remittance information.
     * @type {string}
     * @memberof MonetaryAccountPayment
     */
    reference?: string;
    /**
     * 
     * @type {number}
     * @memberof MonetaryAccountPayment
     */
    amount: number;
    /**
     * 
     * @type {MonetaryAccountPaymentOriginal}
     * @memberof MonetaryAccountPayment
     */
    original?: MonetaryAccountPaymentOriginal;
    /**
     * 
     * @type {Date}
     * @memberof MonetaryAccountPayment
     */
    date?: Date;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof MonetaryAccountPayment
     */
    currency: string;
    /**
     * 
     * @type {MonetaryAccountPaymentSepa}
     * @memberof MonetaryAccountPayment
     */
    sepa?: MonetaryAccountPaymentSepa;
    /**
     * This is set to true if the payment has been processed towards a resource, i.e. a sales invoice, purchase invoice, relation, ledger, credit or debit loan.
     * @type {boolean}
     * @memberof MonetaryAccountPayment
     */
    processed: boolean;
    /**
     * Free form key/ value pair
     * @type {object}
     * @memberof MonetaryAccountPayment
     */
    metadata?: object;
    /**
     * 
     * @type {MonetaryAccountPaymentEmbedded}
     * @memberof MonetaryAccountPayment
     */
    embedded: MonetaryAccountPaymentEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof MonetaryAccountPayment
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof MonetaryAccountPayment
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the MonetaryAccountPayment interface.
 */
export function instanceOfMonetaryAccountPayment(value: object): value is MonetaryAccountPayment {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('processed' in value) || value['processed'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function MonetaryAccountPaymentFromJSON(json: any): MonetaryAccountPayment {
    return MonetaryAccountPaymentFromJSONTyped(json, false);
}

export function MonetaryAccountPaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonetaryAccountPayment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'amount': json['amount'],
        'original': json['original'] == null ? undefined : MonetaryAccountPaymentOriginalFromJSON(json['original']),
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'currency': json['currency'],
        'sepa': json['sepa'] == null ? undefined : MonetaryAccountPaymentSepaFromJSON(json['sepa']),
        'processed': json['processed'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': MonetaryAccountPaymentEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function MonetaryAccountPaymentToJSON(json: any): MonetaryAccountPayment {
    return MonetaryAccountPaymentToJSONTyped(json, false);
}

export function MonetaryAccountPaymentToJSONTyped(value?: Omit<MonetaryAccountPayment, 'id'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'reference': value['reference'],
        'amount': value['amount'],
        'original': MonetaryAccountPaymentOriginalToJSON(value['original']),
        'date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'currency': value['currency'],
        'sepa': MonetaryAccountPaymentSepaToJSON(value['sepa']),
        'processed': value['processed'],
        'metadata': value['metadata'],
        '_embedded': MonetaryAccountPaymentEmbeddedToJSON(value['embedded']),
    };
}

