/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  CreateAccount200Response,
  CreateAccountMeZendeskToken200Response,
  CreateAccountRequest,
  CreateBankingServiceOnboarding200Response,
  CreateDeviceRequest,
  CreateSubscriptionPublicPaymentMethod200Response,
  CreateSubscriptionPublicPaymentMethodRequest,
  Device,
  GetCompaniesAutocomplete200Response,
  GetJurisdictions200ResponseValue,
  GetSubscriptionPublic200Response,
  ResetAccountPasswordRequest,
  SalesInvoicePublic,
  SendResetPasswordRequestRequest,
  UpdateAccountMeRequest,
  UpdateDeviceRequest,
  VerifyVATNumber200Response,
} from '../models/index';
import {
    AccountFromJSON,
    AccountToJSON,
    CreateAccount200ResponseFromJSON,
    CreateAccount200ResponseToJSON,
    CreateAccountMeZendeskToken200ResponseFromJSON,
    CreateAccountMeZendeskToken200ResponseToJSON,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    CreateBankingServiceOnboarding200ResponseFromJSON,
    CreateBankingServiceOnboarding200ResponseToJSON,
    CreateDeviceRequestFromJSON,
    CreateDeviceRequestToJSON,
    CreateSubscriptionPublicPaymentMethod200ResponseFromJSON,
    CreateSubscriptionPublicPaymentMethod200ResponseToJSON,
    CreateSubscriptionPublicPaymentMethodRequestFromJSON,
    CreateSubscriptionPublicPaymentMethodRequestToJSON,
    DeviceFromJSON,
    DeviceToJSON,
    GetCompaniesAutocomplete200ResponseFromJSON,
    GetCompaniesAutocomplete200ResponseToJSON,
    GetJurisdictions200ResponseValueFromJSON,
    GetJurisdictions200ResponseValueToJSON,
    GetSubscriptionPublic200ResponseFromJSON,
    GetSubscriptionPublic200ResponseToJSON,
    ResetAccountPasswordRequestFromJSON,
    ResetAccountPasswordRequestToJSON,
    SalesInvoicePublicFromJSON,
    SalesInvoicePublicToJSON,
    SendResetPasswordRequestRequestFromJSON,
    SendResetPasswordRequestRequestToJSON,
    UpdateAccountMeRequestFromJSON,
    UpdateAccountMeRequestToJSON,
    UpdateDeviceRequestFromJSON,
    UpdateDeviceRequestToJSON,
    VerifyVATNumber200ResponseFromJSON,
    VerifyVATNumber200ResponseToJSON,
} from '../models/index';

export interface CreateAccountOperationRequest {
    createAccountRequest?: CreateAccountRequest;
}

export interface CreateBankingServiceOnboardingRequest {
    profileId: string;
}

export interface CreateDeviceOperationRequest {
    createDeviceRequest?: CreateDeviceRequest;
}

export interface CreateSalesInvoicePublicPaymentRequest {
    profileId: string;
    salesInvoiceUUID: string;
    createSubscriptionPublicPaymentMethodRequest?: CreateSubscriptionPublicPaymentMethodRequest;
}

export interface CreateSubscriptionPublicPaymentMethodOperationRequest {
    profileId: string;
    subscriptionUUID: string;
    createSubscriptionPublicPaymentMethodRequest?: CreateSubscriptionPublicPaymentMethodRequest;
}

export interface DeleteDeviceRequest {
    deviceId: string;
}

export interface GetAccountRequest {
    id?: string;
    email?: string;
}

export interface GetCompaniesAutocompleteRequest {
    name: string;
    registrationCountry: string;
    page?: number;
    size?: number;
    registrationNumber?: string;
}

export interface GetPurchaseInvoicePublicRequest {
    profileId: string;
    purchaseInvoiceUUID: string;
}

export interface GetSalesInvoicePublicRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface GetSalesInvoicePublicHTMLRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface GetSalesInvoicePublicPDFRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface GetSubscriptionPublicRequest {
    profileId: string;
    subscriptionUUID: string;
}

export interface GetSubscriptionPublicInvoicesRequest {
    profileId: string;
    subscriptionUUID: string;
    page?: number;
    size?: number;
}

export interface ResetAccountPasswordOperationRequest {
    resetAccountPasswordRequest?: ResetAccountPasswordRequest;
}

export interface SendResetPasswordRequestOperationRequest {
    sendResetPasswordRequestRequest?: SendResetPasswordRequestRequest;
}

export interface UpdateAccountMeOperationRequest {
    updateAccountMeRequest?: UpdateAccountMeRequest;
}

export interface UpdateDeviceOperationRequest {
    deviceId: string;
    updateDeviceRequest?: UpdateDeviceRequest;
}

export interface VerifyVATNumberRequest {
    vatNumber: string;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Registers an account
     * @param {CreateAccountRequest} [createAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccount200Response>>;

    /**
     * Registers an account
     */
    createAccount(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccount200Response>;

    /**
     * Creates an Zendesk app token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAccountMeZendeskAppTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>>;

    /**
     * Creates an Zendesk app token
     */
    createAccountMeZendeskAppToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response>;

    /**
     * Creates an Zendesk token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAccountMeZendeskTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>>;

    /**
     * Creates an Zendesk token
     */
    createAccountMeZendeskToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response>;

    /**
     * Creates an banking service onboarding link
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createBankingServiceOnboardingRaw(requestParameters: CreateBankingServiceOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBankingServiceOnboarding200Response>>;

    /**
     * Creates an banking service onboarding link
     */
    createBankingServiceOnboarding(requestParameters: CreateBankingServiceOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBankingServiceOnboarding200Response>;

    /**
     * Creates an device
     * @param {CreateDeviceRequest} [createDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createDeviceRaw(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>>;

    /**
     * Creates an device
     */
    createDevice(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device>;

    /**
     * Creates an payment attempt for an sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {CreateSubscriptionPublicPaymentMethodRequest} [createSubscriptionPublicPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSalesInvoicePublicPaymentRaw(requestParameters: CreateSalesInvoicePublicPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionPublicPaymentMethod200Response>>;

    /**
     * Creates an payment attempt for an sales invoice
     */
    createSalesInvoicePublicPayment(requestParameters: CreateSalesInvoicePublicPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionPublicPaymentMethod200Response>;

    /**
     * Creates an payment method attempt for an subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionUUID The uuid of the subscription
     * @param {CreateSubscriptionPublicPaymentMethodRequest} [createSubscriptionPublicPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSubscriptionPublicPaymentMethodRaw(requestParameters: CreateSubscriptionPublicPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionPublicPaymentMethod200Response>>;

    /**
     * Creates an payment method attempt for an subscription
     */
    createSubscriptionPublicPaymentMethod(requestParameters: CreateSubscriptionPublicPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionPublicPaymentMethod200Response>;

    /**
     * Creates an device
     * @param {string} deviceId The ID of the device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteDeviceRaw(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Creates an device
     */
    deleteDevice(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns an account
     * @param {string} [id] The ID of the account
     * @param {string} [email] The email of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Returns an account
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Returns an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAccountMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Returns an account
     */
    getAccountMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Returns all autocompleted companies
     * @param {string} name Broad search on all the name fields to filter to
     * @param {string} registrationCountry Registration country to look in which database
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [registrationNumber] Registration number to look in which database, only one or none results are returned if this parameter is specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCompaniesAutocompleteRaw(requestParameters: GetCompaniesAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompaniesAutocomplete200Response>>;

    /**
     * Returns all autocompleted companies
     */
    getCompaniesAutocomplete(requestParameters: GetCompaniesAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompaniesAutocomplete200Response>;

    /**
     * Get all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Device>>>;

    /**
     * Get all devices
     */
    getDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Device>>;

    /**
     * Returns all jurisdictions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getJurisdictionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetJurisdictions200ResponseValue; }>>;

    /**
     * Returns all jurisdictions
     */
    getJurisdictions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetJurisdictions200ResponseValue; }>;

    /**
     * Returns all languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLanguagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns all languages
     */
    getLanguages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Returns a purchase invoice public data
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceUUID The uuid of the purchase invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoicePublicRaw(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Returns a purchase invoice public data
     */
    getPurchaseInvoicePublic(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicRaw(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoicePublic>>;

    /**
     * Returns a sales invoice
     */
    getSalesInvoicePublic(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoicePublic>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicHTMLRaw(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    getSalesInvoicePublicHTML(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicPDFRaw(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    getSalesInvoicePublicPDF(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns a subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionUUID The uuid of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionPublicRaw(requestParameters: GetSubscriptionPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionPublic200Response>>;

    /**
     * Returns a subscription
     */
    getSubscriptionPublic(requestParameters: GetSubscriptionPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionPublic200Response>;

    /**
     * Returns a subscription invoices
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionUUID The uuid of the subscription
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionPublicInvoicesRaw(requestParameters: GetSubscriptionPublicInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoicePublic>>>;

    /**
     * Returns a subscription invoices
     */
    getSubscriptionPublicInvoices(requestParameters: GetSubscriptionPublicInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoicePublic>>;

    /**
     * Returns an account
     * @param {ResetAccountPasswordRequest} [resetAccountPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns an account
     */
    resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns an account
     * @param {SendResetPasswordRequestRequest} [sendResetPasswordRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sendResetPasswordRequestRaw(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns an account
     */
    sendResetPasswordRequest(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates the data of an account
     * @param {UpdateAccountMeRequest} [updateAccountMeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateAccountMeRaw(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Updates the data of an account
     */
    updateAccountMe(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Creates an device
     * @param {string} deviceId The ID of the device
     * @param {UpdateDeviceRequest} [updateDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateDeviceRaw(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>>;

    /**
     * Creates an device
     */
    updateDevice(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device>;

    /**
     * Verify an VAT number
     * @param {string} vatNumber VAT Number to verifuy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    verifyVATNumberRaw(requestParameters: VerifyVATNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyVATNumber200Response>>;

    /**
     * Verify an VAT number
     */
    verifyVATNumber(requestParameters: VerifyVATNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyVATNumber200Response>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Registers an account
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccount200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountRequestToJSON(requestParameters['createAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccount200ResponseFromJSON(jsonValue));
    }

    /**
     * Registers an account
     */
    async createAccount(requestParameters: CreateAccountOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccount200Response> {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an Zendesk app token
     */
    async createAccountMeZendeskAppTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/zendesk-app-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccountMeZendeskToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an Zendesk app token
     */
    async createAccountMeZendeskAppToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response> {
        const response = await this.createAccountMeZendeskAppTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an Zendesk token
     */
    async createAccountMeZendeskTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/zendesk-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccountMeZendeskToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an Zendesk token
     */
    async createAccountMeZendeskToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response> {
        const response = await this.createAccountMeZendeskTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an banking service onboarding link
     */
    async createBankingServiceOnboardingRaw(requestParameters: CreateBankingServiceOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBankingServiceOnboarding200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createBankingServiceOnboarding().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/bankingservice/onboarding`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBankingServiceOnboarding200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an banking service onboarding link
     */
    async createBankingServiceOnboarding(requestParameters: CreateBankingServiceOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBankingServiceOnboarding200Response> {
        const response = await this.createBankingServiceOnboardingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an device
     */
    async createDeviceRaw(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceRequestToJSON(requestParameters['createDeviceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Creates an device
     */
    async createDevice(requestParameters: CreateDeviceOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.createDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an payment attempt for an sales invoice
     */
    async createSalesInvoicePublicPaymentRaw(requestParameters: CreateSalesInvoicePublicPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionPublicPaymentMethod200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSalesInvoicePublicPayment().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling createSalesInvoicePublicPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/payments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionPublicPaymentMethodRequestToJSON(requestParameters['createSubscriptionPublicPaymentMethodRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriptionPublicPaymentMethod200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an payment attempt for an sales invoice
     */
    async createSalesInvoicePublicPayment(requestParameters: CreateSalesInvoicePublicPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionPublicPaymentMethod200Response> {
        const response = await this.createSalesInvoicePublicPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an payment method attempt for an subscription
     */
    async createSubscriptionPublicPaymentMethodRaw(requestParameters: CreateSubscriptionPublicPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionPublicPaymentMethod200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSubscriptionPublicPaymentMethod().'
            );
        }

        if (requestParameters['subscriptionUUID'] == null) {
            throw new runtime.RequiredError(
                'subscriptionUUID',
                'Required parameter "subscriptionUUID" was null or undefined when calling createSubscriptionPublicPaymentMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/subscriptions/{profileId}/{salesInvoiceUUID}/payment-methods`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionUUID"}}`, encodeURIComponent(String(requestParameters['subscriptionUUID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionPublicPaymentMethodRequestToJSON(requestParameters['createSubscriptionPublicPaymentMethodRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriptionPublicPaymentMethod200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an payment method attempt for an subscription
     */
    async createSubscriptionPublicPaymentMethod(requestParameters: CreateSubscriptionPublicPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionPublicPaymentMethod200Response> {
        const response = await this.createSubscriptionPublicPaymentMethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an device
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling deleteDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates an device
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeviceRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an account
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Returns an account
     */
    async getAccount(requestParameters: GetAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an account
     */
    async getAccountMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Returns an account
     */
    async getAccountMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all autocompleted companies
     */
    async getCompaniesAutocompleteRaw(requestParameters: GetCompaniesAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompaniesAutocomplete200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCompaniesAutocomplete().'
            );
        }

        if (requestParameters['registrationCountry'] == null) {
            throw new runtime.RequiredError(
                'registrationCountry',
                'Required parameter "registrationCountry" was null or undefined when calling getCompaniesAutocomplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['registrationNumber'] != null) {
            queryParameters['registration_number'] = requestParameters['registrationNumber'];
        }

        if (requestParameters['registrationCountry'] != null) {
            queryParameters['registration_country'] = requestParameters['registrationCountry'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/metadata/companies/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompaniesAutocomplete200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all autocompleted companies
     */
    async getCompaniesAutocomplete(requestParameters: GetCompaniesAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompaniesAutocomplete200Response> {
        const response = await this.getCompaniesAutocompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all devices
     */
    async getDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Device>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceFromJSON));
    }

    /**
     * Get all devices
     */
    async getDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Device>> {
        const response = await this.getDevicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all jurisdictions
     */
    async getJurisdictionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetJurisdictions200ResponseValue; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/metadata/jurisdictions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GetJurisdictions200ResponseValueFromJSON));
    }

    /**
     * Returns all jurisdictions
     */
    async getJurisdictions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetJurisdictions200ResponseValue; }> {
        const response = await this.getJurisdictionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all languages
     */
    async getLanguagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/metadata/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all languages
     */
    async getLanguages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getLanguagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a purchase invoice public data
     */
    async getPurchaseInvoicePublicRaw(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoicePublic().'
            );
        }

        if (requestParameters['purchaseInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceUUID',
                'Required parameter "purchaseInvoiceUUID" was null or undefined when calling getPurchaseInvoicePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/purchase-invoices/{profileId}/{purchaseInvoiceUUID}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a purchase invoice public data
     */
    async getPurchaseInvoicePublic(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getPurchaseInvoicePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoicePublicRaw(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoicePublic>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublic().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoicePublicFromJSON(jsonValue));
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoicePublic(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoicePublic> {
        const response = await this.getSalesInvoicePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePublicHTMLRaw(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublicHTML().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublicHTML().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/html`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePublicHTML(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getSalesInvoicePublicHTMLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePublicPDFRaw(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublicPDF().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublicPDF().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/pdf`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePublicPDF(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSalesInvoicePublicPDFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a subscription
     */
    async getSubscriptionPublicRaw(requestParameters: GetSubscriptionPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionPublic200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscriptionPublic().'
            );
        }

        if (requestParameters['subscriptionUUID'] == null) {
            throw new runtime.RequiredError(
                'subscriptionUUID',
                'Required parameter "subscriptionUUID" was null or undefined when calling getSubscriptionPublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/subscriptions/{profileId}/{subscriptionUUID}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionUUID"}}`, encodeURIComponent(String(requestParameters['subscriptionUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptionPublic200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a subscription
     */
    async getSubscriptionPublic(requestParameters: GetSubscriptionPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionPublic200Response> {
        const response = await this.getSubscriptionPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a subscription invoices
     */
    async getSubscriptionPublicInvoicesRaw(requestParameters: GetSubscriptionPublicInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoicePublic>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscriptionPublicInvoices().'
            );
        }

        if (requestParameters['subscriptionUUID'] == null) {
            throw new runtime.RequiredError(
                'subscriptionUUID',
                'Required parameter "subscriptionUUID" was null or undefined when calling getSubscriptionPublicInvoices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/subscriptions/{profileId}/{salesInvoiceUUID}/invoices`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionUUID"}}`, encodeURIComponent(String(requestParameters['subscriptionUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SalesInvoicePublicFromJSON));
    }

    /**
     * Returns a subscription invoices
     */
    async getSubscriptionPublicInvoices(requestParameters: GetSubscriptionPublicInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoicePublic>> {
        const response = await this.getSubscriptionPublicInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an account
     */
    async resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetAccountPasswordRequestToJSON(requestParameters['resetAccountPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an account
     */
    async resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetAccountPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an account
     */
    async sendResetPasswordRequestRaw(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/reset-password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendResetPasswordRequestRequestToJSON(requestParameters['sendResetPasswordRequestRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an account
     */
    async sendResetPasswordRequest(requestParameters: SendResetPasswordRequestOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendResetPasswordRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the data of an account
     */
    async updateAccountMeRaw(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountMeRequestToJSON(requestParameters['updateAccountMeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Updates the data of an account
     */
    async updateAccountMe(requestParameters: UpdateAccountMeOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.updateAccountMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an device
     */
    async updateDeviceRaw(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling updateDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDeviceRequestToJSON(requestParameters['updateDeviceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Creates an device
     */
    async updateDevice(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.updateDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify an VAT number
     */
    async verifyVATNumberRaw(requestParameters: VerifyVATNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyVATNumber200Response>> {
        if (requestParameters['vatNumber'] == null) {
            throw new runtime.RequiredError(
                'vatNumber',
                'Required parameter "vatNumber" was null or undefined when calling verifyVATNumber().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vatNumber'] != null) {
            queryParameters['vat-number'] = requestParameters['vatNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/metadata/vat-number/verify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyVATNumber200ResponseFromJSON(jsonValue));
    }

    /**
     * Verify an VAT number
     */
    async verifyVATNumber(requestParameters: VerifyVATNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyVATNumber200Response> {
        const response = await this.verifyVATNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
