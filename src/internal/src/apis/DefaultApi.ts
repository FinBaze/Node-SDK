/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  CreateAccountMeZendeskToken200Response,
  CreateSalesInvoicePublicPayment200Response,
  CreateSalesInvoicePublicPaymentRequest,
  ResetAccountPasswordRequest,
  SalesInvoicePublic,
  SendResetPasswordRequestRequest,
  UpdateAccountMeRequest,
} from '../models/index';
import {
    AccountFromJSON,
    AccountToJSON,
    CreateAccountMeZendeskToken200ResponseFromJSON,
    CreateAccountMeZendeskToken200ResponseToJSON,
    CreateSalesInvoicePublicPayment200ResponseFromJSON,
    CreateSalesInvoicePublicPayment200ResponseToJSON,
    CreateSalesInvoicePublicPaymentRequestFromJSON,
    CreateSalesInvoicePublicPaymentRequestToJSON,
    ResetAccountPasswordRequestFromJSON,
    ResetAccountPasswordRequestToJSON,
    SalesInvoicePublicFromJSON,
    SalesInvoicePublicToJSON,
    SendResetPasswordRequestRequestFromJSON,
    SendResetPasswordRequestRequestToJSON,
    UpdateAccountMeRequestFromJSON,
    UpdateAccountMeRequestToJSON,
} from '../models/index';

export interface CreateSalesInvoicePublicPaymentOperationRequest {
    profileId: string;
    salesInvoiceUUID: string;
    createSalesInvoicePublicPaymentRequest?: CreateSalesInvoicePublicPaymentRequest;
}

export interface GetAccountRequest {
    id?: string;
    email?: string;
}

export interface GetPurchaseInvoicePublicRequest {
    profileId: string;
    purchaseInvoiceUUID: string;
}

export interface GetSalesInvoicePublicRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface GetSalesInvoicePublicHTMLRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface GetSalesInvoicePublicPDFRequest {
    profileId: string;
    salesInvoiceUUID: string;
}

export interface ResetAccountPasswordOperationRequest {
    resetAccountPasswordRequest?: ResetAccountPasswordRequest;
}

export interface SendResetPasswordRequestOperationRequest {
    sendResetPasswordRequestRequest?: SendResetPasswordRequestRequest;
}

export interface UpdateAccountMeOperationRequest {
    updateAccountMeRequest?: UpdateAccountMeRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Creates an Zendesk app token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAccountMeZendeskAppTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>>;

    /**
     * Creates an Zendesk app token
     */
    createAccountMeZendeskAppToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response>;

    /**
     * Creates an Zendesk token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAccountMeZendeskTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>>;

    /**
     * Creates an Zendesk token
     */
    createAccountMeZendeskToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response>;

    /**
     * Creates an payment attempt for an sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {CreateSalesInvoicePublicPaymentRequest} [createSalesInvoicePublicPaymentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSalesInvoicePublicPaymentRaw(requestParameters: CreateSalesInvoicePublicPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSalesInvoicePublicPayment200Response>>;

    /**
     * Creates an payment attempt for an sales invoice
     */
    createSalesInvoicePublicPayment(requestParameters: CreateSalesInvoicePublicPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSalesInvoicePublicPayment200Response>;

    /**
     * Returns an account
     * @param {string} [id] The ID of the account
     * @param {string} [email] The email of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Returns an account
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Returns an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAccountMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Returns an account
     */
    getAccountMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Returns a purchase invoice public data
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceUUID The uuid of the purchase invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoicePublicRaw(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Returns a purchase invoice public data
     */
    getPurchaseInvoicePublic(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicRaw(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoicePublic>>;

    /**
     * Returns a sales invoice
     */
    getSalesInvoicePublic(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoicePublic>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicHTMLRaw(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    getSalesInvoicePublicHTML(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceUUID The uuid of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePublicPDFRaw(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    getSalesInvoicePublicPDF(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns an account
     * @param {ResetAccountPasswordRequest} [resetAccountPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns an account
     */
    resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns an account
     * @param {SendResetPasswordRequestRequest} [sendResetPasswordRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sendResetPasswordRequestRaw(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns an account
     */
    sendResetPasswordRequest(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates the data of an account
     * @param {UpdateAccountMeRequest} [updateAccountMeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateAccountMeRaw(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Updates the data of an account
     */
    updateAccountMe(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Creates an Zendesk app token
     */
    async createAccountMeZendeskAppTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/zendesk-app-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccountMeZendeskToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an Zendesk app token
     */
    async createAccountMeZendeskAppToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response> {
        const response = await this.createAccountMeZendeskAppTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an Zendesk token
     */
    async createAccountMeZendeskTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccountMeZendeskToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me/zendesk-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccountMeZendeskToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an Zendesk token
     */
    async createAccountMeZendeskToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccountMeZendeskToken200Response> {
        const response = await this.createAccountMeZendeskTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an payment attempt for an sales invoice
     */
    async createSalesInvoicePublicPaymentRaw(requestParameters: CreateSalesInvoicePublicPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSalesInvoicePublicPayment200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSalesInvoicePublicPayment().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling createSalesInvoicePublicPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/payments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoicePublicPaymentRequestToJSON(requestParameters['createSalesInvoicePublicPaymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSalesInvoicePublicPayment200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an payment attempt for an sales invoice
     */
    async createSalesInvoicePublicPayment(requestParameters: CreateSalesInvoicePublicPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSalesInvoicePublicPayment200Response> {
        const response = await this.createSalesInvoicePublicPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an account
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Returns an account
     */
    async getAccount(requestParameters: GetAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an account
     */
    async getAccountMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Returns an account
     */
    async getAccountMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a purchase invoice public data
     */
    async getPurchaseInvoicePublicRaw(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoicePublic().'
            );
        }

        if (requestParameters['purchaseInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceUUID',
                'Required parameter "purchaseInvoiceUUID" was null or undefined when calling getPurchaseInvoicePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/purchase-invoices/{profileId}/{purchaseInvoiceUUID}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a purchase invoice public data
     */
    async getPurchaseInvoicePublic(requestParameters: GetPurchaseInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getPurchaseInvoicePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoicePublicRaw(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoicePublic>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublic().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoicePublicFromJSON(jsonValue));
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoicePublic(requestParameters: GetSalesInvoicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoicePublic> {
        const response = await this.getSalesInvoicePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePublicHTMLRaw(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublicHTML().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublicHTML().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/html`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePublicHTML(requestParameters: GetSalesInvoicePublicHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getSalesInvoicePublicHTMLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePublicPDFRaw(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePublicPDF().'
            );
        }

        if (requestParameters['salesInvoiceUUID'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceUUID',
                'Required parameter "salesInvoiceUUID" was null or undefined when calling getSalesInvoicePublicPDF().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/sales-invoices/{profileId}/{salesInvoiceUUID}/pdf`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceUUID"}}`, encodeURIComponent(String(requestParameters['salesInvoiceUUID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePublicPDF(requestParameters: GetSalesInvoicePublicPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSalesInvoicePublicPDFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an account
     */
    async resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetAccountPasswordRequestToJSON(requestParameters['resetAccountPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an account
     */
    async resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetAccountPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an account
     */
    async sendResetPasswordRequestRaw(requestParameters: SendResetPasswordRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/reset-password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendResetPasswordRequestRequestToJSON(requestParameters['sendResetPasswordRequestRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an account
     */
    async sendResetPasswordRequest(requestParameters: SendResetPasswordRequestOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendResetPasswordRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the data of an account
     */
    async updateAccountMeRaw(requestParameters: UpdateAccountMeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/accounts/@me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountMeRequestToJSON(requestParameters['updateAccountMeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Updates the data of an account
     */
    async updateAccountMe(requestParameters: UpdateAccountMeOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.updateAccountMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
