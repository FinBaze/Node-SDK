/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  App,
  GetApps200Response,
  GetOAuth2AccessToken200Response,
} from '../models/index';
import {
    AppFromJSON,
    AppToJSON,
    GetApps200ResponseFromJSON,
    GetApps200ResponseToJSON,
    GetOAuth2AccessToken200ResponseFromJSON,
    GetOAuth2AccessToken200ResponseToJSON,
} from '../models/index';

export interface AuthorizeOAuth2Request {
    clientId: string;
    redirectUri: string;
    state: string;
    scope?: string;
    responseType?: AuthorizeOAuth2ResponseTypeEnum;
}

export interface GetAppRequest {
    appId: string;
}

export interface GetAppsRequest {
    page?: number;
    size?: number;
}

export interface GetOAuth2AccessTokenRequest {
    grantType: GetOAuth2AccessTokenGrantTypeEnum;
    code?: string;
    redirectUri?: string;
    clientId?: string;
    clientSecret?: string;
    refreshToken?: string;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Authorises an OAuth2 connection
     * @param {string} clientId The Client ID assigned by us
     * @param {string} redirectUri The Client ID assigned by you with us
     * @param {string} state Unique identifier of the request
     * @param {string} [scope] Space seperated list of all the scopes
     * @param {'code'} [responseType] Response type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    authorizeOAuth2Raw(requestParameters: AuthorizeOAuth2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Authorises an OAuth2 connection
     */
    authorizeOAuth2(requestParameters: AuthorizeOAuth2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns a app
     * @param {string} appId The id of the app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAppRaw(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>>;

    /**
     * Returns a app
     */
    getApp(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App>;

    /**
     * Returns all apps
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAppsRaw(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApps200Response>>;

    /**
     * Returns all apps
     */
    getApps(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApps200Response>;

    /**
     * Creates an OAuth2 token
     * @param {string} grantType Type of OAuth2 grant being used.
     * @param {string} [code] Authorization code (required for authorization_code grant type).
     * @param {string} [redirectUri] Redirect URI used in authorization request.
     * @param {string} [clientId] Client ID issued during client registration.
     * @param {string} [clientSecret] Client secret for authentication.
     * @param {string} [refreshToken] Refresh token to obtain a new access token (required for refresh_token grant type).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getOAuth2AccessTokenRaw(requestParameters: GetOAuth2AccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOAuth2AccessToken200Response>>;

    /**
     * Creates an OAuth2 token
     */
    getOAuth2AccessToken(requestParameters: GetOAuth2AccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOAuth2AccessToken200Response>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Authorises an OAuth2 connection
     */
    async authorizeOAuth2Raw(requestParameters: AuthorizeOAuth2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling authorizeOAuth2().'
            );
        }

        if (requestParameters['redirectUri'] == null) {
            throw new runtime.RequiredError(
                'redirectUri',
                'Required parameter "redirectUri" was null or undefined when calling authorizeOAuth2().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling authorizeOAuth2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/oauth2/authorize`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))).replace(`{${"redirect_uri"}}`, encodeURIComponent(String(requestParameters['redirectUri']))).replace(`{${"state"}}`, encodeURIComponent(String(requestParameters['state']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"response_type"}}`, encodeURIComponent(String(requestParameters['responseType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Authorises an OAuth2 connection
     */
    async authorizeOAuth2(requestParameters: AuthorizeOAuth2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.authorizeOAuth2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a app
     */
    async getAppRaw(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppFromJSON(jsonValue));
    }

    /**
     * Returns a app
     */
    async getApp(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App> {
        const response = await this.getAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all apps
     */
    async getAppsRaw(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApps200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApps200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all apps
     */
    async getApps(requestParameters: GetAppsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApps200Response> {
        const response = await this.getAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an OAuth2 token
     */
    async getOAuth2AccessTokenRaw(requestParameters: GetOAuth2AccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOAuth2AccessToken200Response>> {
        if (requestParameters['grantType'] == null) {
            throw new runtime.RequiredError(
                'grantType',
                'Required parameter "grantType" was null or undefined when calling getOAuth2AccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['code'] != null) {
            formParams.append('code', requestParameters['code'] as any);
        }

        if (requestParameters['redirectUri'] != null) {
            formParams.append('redirect_uri', requestParameters['redirectUri'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        if (requestParameters['refreshToken'] != null) {
            formParams.append('refresh_token', requestParameters['refreshToken'] as any);
        }

        const response = await this.request({
            path: `/v1/oauth2/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOAuth2AccessToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an OAuth2 token
     */
    async getOAuth2AccessToken(requestParameters: GetOAuth2AccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOAuth2AccessToken200Response> {
        const response = await this.getOAuth2AccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AuthorizeOAuth2ResponseTypeEnum = {
    Code: 'code'
} as const;
export type AuthorizeOAuth2ResponseTypeEnum = typeof AuthorizeOAuth2ResponseTypeEnum[keyof typeof AuthorizeOAuth2ResponseTypeEnum];
/**
 * @export
 */
export const GetOAuth2AccessTokenGrantTypeEnum = {
    AuthorizationCode: 'authorization_code',
    ClientCredentials: 'client_credentials',
    Password: 'password',
    RefreshToken: 'refresh_token'
} as const;
export type GetOAuth2AccessTokenGrantTypeEnum = typeof GetOAuth2AccessTokenGrantTypeEnum[keyof typeof GetOAuth2AccessTokenGrantTypeEnum];
