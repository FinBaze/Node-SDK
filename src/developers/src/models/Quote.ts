/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuoteEmbedded } from './QuoteEmbedded';
import {
    QuoteEmbeddedFromJSON,
    QuoteEmbeddedFromJSONTyped,
    QuoteEmbeddedToJSON,
    QuoteEmbeddedToJSONTyped,
} from './QuoteEmbedded';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { SalesInvoiceAmountsBooked } from './SalesInvoiceAmountsBooked';
import {
    SalesInvoiceAmountsBookedFromJSON,
    SalesInvoiceAmountsBookedFromJSONTyped,
    SalesInvoiceAmountsBookedToJSON,
    SalesInvoiceAmountsBookedToJSONTyped,
} from './SalesInvoiceAmountsBooked';

/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    readonly uuid: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    readonly quoteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    reference?: string;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly expiration?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly closed?: Date;
    /**
     * Indicates wheter the invoice is overdue or not
     * @type {boolean}
     * @memberof Quote
     */
    overdue: boolean;
    /**
     * Indicates wheter the invoice is in concept or not
     * @type {boolean}
     * @memberof Quote
     */
    concept: boolean;
    /**
     * 
     * @type {SalesInvoiceAmountsBooked}
     * @memberof Quote
     */
    amounts: SalesInvoiceAmountsBooked;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof Quote
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    legalName?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    lastName?: string;
    /**
     * 
     * @type {Address}
     * @memberof Quote
     */
    address?: Address;
    /**
     * ID of the relation attached
     * @type {string}
     * @memberof Quote
     */
    relation?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    memo?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    footer?: string;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof Quote
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {QuoteEmbedded}
     * @memberof Quote
     */
    embedded: QuoteEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the Quote interface.
 */
export function instanceOfQuote(value: object): value is Quote {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('overdue' in value) || value['overdue'] === undefined) return false;
    if (!('concept' in value) || value['concept'] === undefined) return false;
    if (!('amounts' in value) || value['amounts'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function QuoteFromJSON(json: any): Quote {
    return QuoteFromJSONTyped(json, false);
}

export function QuoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Quote {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'quoteId': json['quote_id'] == null ? undefined : json['quote_id'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'expiration': json['expiration'] == null ? undefined : (new Date(json['expiration'])),
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'overdue': json['overdue'],
        'concept': json['concept'],
        'amounts': SalesInvoiceAmountsBookedFromJSON(json['amounts']),
        'currency': json['currency'],
        'legalName': json['legal-name'] == null ? undefined : json['legal-name'],
        'firstName': json['first-name'] == null ? undefined : json['first-name'],
        'middleName': json['middle-name'] == null ? undefined : json['middle-name'],
        'lastName': json['last-name'] == null ? undefined : json['last-name'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'relation': json['relation'] == null ? undefined : json['relation'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'footer': json['footer'] == null ? undefined : json['footer'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': QuoteEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function QuoteToJSON(json: any): Quote {
    return QuoteToJSONTyped(json, false);
}

export function QuoteToJSONTyped(value?: Omit<Quote, 'id'|'uuid'|'quote_id'|'date'|'expiration'|'closed'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reference': value['reference'],
        'overdue': value['overdue'],
        'concept': value['concept'],
        'amounts': SalesInvoiceAmountsBookedToJSON(value['amounts']),
        'currency': value['currency'],
        'legal-name': value['legalName'],
        'first-name': value['firstName'],
        'middle-name': value['middleName'],
        'last-name': value['lastName'],
        'address': AddressToJSON(value['address']),
        'relation': value['relation'],
        'memo': value['memo'],
        'footer': value['footer'],
        'metadata': value['metadata'],
        '_embedded': QuoteEmbeddedToJSON(value['embedded']),
    };
}

