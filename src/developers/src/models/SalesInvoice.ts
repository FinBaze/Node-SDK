/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { SalesInvoiceEmbedded } from './SalesInvoiceEmbedded';
import {
    SalesInvoiceEmbeddedFromJSON,
    SalesInvoiceEmbeddedFromJSONTyped,
    SalesInvoiceEmbeddedToJSON,
    SalesInvoiceEmbeddedToJSONTyped,
} from './SalesInvoiceEmbedded';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
    LinksToJSONTyped,
} from './Links';
import type { SalesInvoiceAmounts } from './SalesInvoiceAmounts';
import {
    SalesInvoiceAmountsFromJSON,
    SalesInvoiceAmountsFromJSONTyped,
    SalesInvoiceAmountsToJSON,
    SalesInvoiceAmountsToJSONTyped,
} from './SalesInvoiceAmounts';
import type { SalesInvoicePeriod } from './SalesInvoicePeriod';
import {
    SalesInvoicePeriodFromJSON,
    SalesInvoicePeriodFromJSONTyped,
    SalesInvoicePeriodToJSON,
    SalesInvoicePeriodToJSONTyped,
} from './SalesInvoicePeriod';

/**
 * 
 * @export
 * @interface SalesInvoice
 */
export interface SalesInvoice {
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    readonly uuid: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    readonly invoiceId?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    reference?: string;
    /**
     * Email of the recipient
     * @type {string}
     * @memberof SalesInvoice
     */
    email?: string;
    /**
     * 
     * @type {SalesInvoicePeriod}
     * @memberof SalesInvoice
     */
    period?: SalesInvoicePeriod;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    readonly due?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    readonly date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    readonly closed?: Date;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    paid?: string;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    paidOn?: Date;
    /**
     * Indicates wheter the invoice is overdue or not
     * @type {boolean}
     * @memberof SalesInvoice
     */
    overdue: boolean;
    /**
     * Indicates wheter the invoice is in concept or not
     * @type {boolean}
     * @memberof SalesInvoice
     */
    concept: boolean;
    /**
     * 
     * @type {SalesInvoiceAmounts}
     * @memberof SalesInvoice
     */
    amounts: SalesInvoiceAmounts;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof SalesInvoice
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    legalName?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    lastName?: string;
    /**
     * 
     * @type {Address}
     * @memberof SalesInvoice
     */
    address?: Address;
    /**
     * ID of the relation attached
     * @type {string}
     * @memberof SalesInvoice
     */
    relation?: string;
    /**
     * ID of the subscription attached
     * @type {string}
     * @memberof SalesInvoice
     */
    subscription?: string;
    /**
     * ID of the initial invoice
     * @type {string}
     * @memberof SalesInvoice
     */
    initialInvoice?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    memo?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesInvoice
     */
    footer?: string;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof SalesInvoice
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Links}
     * @memberof SalesInvoice
     */
    links: Links;
    /**
     * 
     * @type {SalesInvoiceEmbedded}
     * @memberof SalesInvoice
     */
    embedded: SalesInvoiceEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof SalesInvoice
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the SalesInvoice interface.
 */
export function instanceOfSalesInvoice(value: object): value is SalesInvoice {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('overdue' in value) || value['overdue'] === undefined) return false;
    if (!('concept' in value) || value['concept'] === undefined) return false;
    if (!('amounts' in value) || value['amounts'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function SalesInvoiceFromJSON(json: any): SalesInvoice {
    return SalesInvoiceFromJSONTyped(json, false);
}

export function SalesInvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesInvoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'invoiceId': json['invoice_id'] == null ? undefined : json['invoice_id'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'email': json['email'] == null ? undefined : json['email'],
        'period': json['period'] == null ? undefined : SalesInvoicePeriodFromJSON(json['period']),
        'due': json['due'] == null ? undefined : (new Date(json['due'])),
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'paid': json['paid'] == null ? undefined : json['paid'],
        'paidOn': json['paid-on'] == null ? undefined : (new Date(json['paid-on'])),
        'overdue': json['overdue'],
        'concept': json['concept'],
        'amounts': SalesInvoiceAmountsFromJSON(json['amounts']),
        'currency': json['currency'],
        'legalName': json['legal-name'] == null ? undefined : json['legal-name'],
        'firstName': json['first-name'] == null ? undefined : json['first-name'],
        'middleName': json['middle-name'] == null ? undefined : json['middle-name'],
        'lastName': json['last-name'] == null ? undefined : json['last-name'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'relation': json['relation'] == null ? undefined : json['relation'],
        'subscription': json['subscription'] == null ? undefined : json['subscription'],
        'initialInvoice': json['initial-invoice'] == null ? undefined : json['initial-invoice'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'footer': json['footer'] == null ? undefined : json['footer'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'links': LinksFromJSON(json['_links']),
        'embedded': SalesInvoiceEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function SalesInvoiceToJSON(json: any): SalesInvoice {
    return SalesInvoiceToJSONTyped(json, false);
}

export function SalesInvoiceToJSONTyped(value?: Omit<SalesInvoice, 'id'|'uuid'|'invoice_id'|'due'|'date'|'closed'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reference': value['reference'],
        'email': value['email'],
        'period': SalesInvoicePeriodToJSON(value['period']),
        'paid': value['paid'],
        'paid-on': value['paidOn'] == null ? undefined : ((value['paidOn']).toISOString().substring(0,10)),
        'overdue': value['overdue'],
        'concept': value['concept'],
        'amounts': SalesInvoiceAmountsToJSON(value['amounts']),
        'currency': value['currency'],
        'legal-name': value['legalName'],
        'first-name': value['firstName'],
        'middle-name': value['middleName'],
        'last-name': value['lastName'],
        'address': AddressToJSON(value['address']),
        'relation': value['relation'],
        'subscription': value['subscription'],
        'initial-invoice': value['initialInvoice'],
        'memo': value['memo'],
        'footer': value['footer'],
        'metadata': value['metadata'],
        '_links': LinksToJSON(value['links']),
        '_embedded': SalesInvoiceEmbeddedToJSON(value['embedded']),
    };
}

