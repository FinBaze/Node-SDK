/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { VehicleTripOdometer } from './VehicleTripOdometer';
import {
    VehicleTripOdometerFromJSON,
    VehicleTripOdometerFromJSONTyped,
    VehicleTripOdometerToJSON,
    VehicleTripOdometerToJSONTyped,
} from './VehicleTripOdometer';

/**
 * 
 * @export
 * @interface VehicleTrip
 */
export interface VehicleTrip {
    /**
     * 
     * @type {string}
     * @memberof VehicleTrip
     */
    readonly id: string;
    /**
     * The length of the trip in local unit so miles of kilometers
     * @type {number}
     * @memberof VehicleTrip
     */
    trip: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrip
     */
    type: VehicleTripTypeEnum;
    /**
     * Whether the trip is a return trip or not
     * @type {boolean}
     * @memberof VehicleTrip
     */
    _return: boolean;
    /**
     * 
     * @type {Address}
     * @memberof VehicleTrip
     */
    from: Address;
    /**
     * 
     * @type {Address}
     * @memberof VehicleTrip
     */
    to: Address;
    /**
     * The date and time of the trip
     * @type {Date}
     * @memberof VehicleTrip
     */
    date: Date;
    /**
     * 
     * @type {VehicleTripOdometer}
     * @memberof VehicleTrip
     */
    odometer?: VehicleTripOdometer;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof VehicleTrip
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof VehicleTrip
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleTrip
     */
    readonly created: Date;
}


/**
 * @export
 */
export const VehicleTripTypeEnum = {
    Business: 'business',
    Personal: 'personal'
} as const;
export type VehicleTripTypeEnum = typeof VehicleTripTypeEnum[keyof typeof VehicleTripTypeEnum];


/**
 * Check if a given object implements the VehicleTrip interface.
 */
export function instanceOfVehicleTrip(value: object): value is VehicleTrip {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('trip' in value) || value['trip'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('_return' in value) || value['_return'] === undefined) return false;
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function VehicleTripFromJSON(json: any): VehicleTrip {
    return VehicleTripFromJSONTyped(json, false);
}

export function VehicleTripFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehicleTrip {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'trip': json['trip'],
        'type': json['type'],
        '_return': json['return'],
        'from': AddressFromJSON(json['from']),
        'to': AddressFromJSON(json['to']),
        'date': (new Date(json['date'])),
        'odometer': json['odometer'] == null ? undefined : VehicleTripOdometerFromJSON(json['odometer']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function VehicleTripToJSON(json: any): VehicleTrip {
    return VehicleTripToJSONTyped(json, false);
}

export function VehicleTripToJSONTyped(value?: Omit<VehicleTrip, 'id'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'trip': value['trip'],
        'type': value['type'],
        'return': value['_return'],
        'from': AddressToJSON(value['from']),
        'to': AddressToJSON(value['to']),
        'date': ((value['date']).toISOString()),
        'odometer': VehicleTripOdometerToJSON(value['odometer']),
        'metadata': value['metadata'],
    };
}

