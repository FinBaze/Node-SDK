/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An address object that represents a physical address in the real world using a broad range of properties that can be usedf for most addreses across the world.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The house number, or premise number
     * @type {string}
     * @memberof Address
     */
    premise: string;
    /**
     * The house number extension or premise number extension
     * @type {string}
     * @memberof Address
     */
    subPremise?: string;
    /**
     * Adress line 2
     * @type {string}
     * @memberof Address
     */
    address2?: string;
    /**
     * The building name
     * @type {string}
     * @memberof Address
     */
    building?: string;
    /**
     * The postal code
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The street name, or thoroughfare
     * @type {string}
     * @memberof Address
     */
    thoroughfare: string;
    /**
     * The city name or locality
     * @type {string}
     * @memberof Address
     */
    locality?: string;
    /**
     * The state or province
     * @type {string}
     * @memberof Address
     */
    state?: string;
    /**
     * ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof Address
     */
    country: string;
}

/**
 * Check if a given object implements the Address interface.
 */
export function instanceOfAddress(value: object): value is Address {
    if (!('premise' in value) || value['premise'] === undefined) return false;
    if (!('postalCode' in value) || value['postalCode'] === undefined) return false;
    if (!('thoroughfare' in value) || value['thoroughfare'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    return true;
}

export function AddressFromJSON(json: any): Address {
    return AddressFromJSONTyped(json, false);
}

export function AddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): Address {
    if (json == null) {
        return json;
    }
    return {
        
        'premise': json['premise'],
        'subPremise': json['sub_premise'] == null ? undefined : json['sub_premise'],
        'address2': json['address2'] == null ? undefined : json['address2'],
        'building': json['building'] == null ? undefined : json['building'],
        'postalCode': json['postal_code'],
        'thoroughfare': json['thoroughfare'],
        'locality': json['locality'] == null ? undefined : json['locality'],
        'state': json['state'] == null ? undefined : json['state'],
        'country': json['country'],
    };
}

export function AddressToJSON(json: any): Address {
    return AddressToJSONTyped(json, false);
}

export function AddressToJSONTyped(value?: Address | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'premise': value['premise'],
        'sub_premise': value['subPremise'],
        'address2': value['address2'],
        'building': value['building'],
        'postal_code': value['postalCode'],
        'thoroughfare': value['thoroughfare'],
        'locality': value['locality'],
        'state': value['state'],
        'country': value['country'],
    };
}

