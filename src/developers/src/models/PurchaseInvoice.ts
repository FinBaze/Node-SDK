/* tslint:disable */
/* eslint-disable */
/**
 * FinBaze developers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PurchaseInvoiceEmbedded } from './PurchaseInvoiceEmbedded';
import {
    PurchaseInvoiceEmbeddedFromJSON,
    PurchaseInvoiceEmbeddedFromJSONTyped,
    PurchaseInvoiceEmbeddedToJSON,
    PurchaseInvoiceEmbeddedToJSONTyped,
} from './PurchaseInvoiceEmbedded';
import type { SalesInvoiceAmounts } from './SalesInvoiceAmounts';
import {
    SalesInvoiceAmountsFromJSON,
    SalesInvoiceAmountsFromJSONTyped,
    SalesInvoiceAmountsToJSON,
    SalesInvoiceAmountsToJSONTyped,
} from './SalesInvoiceAmounts';
import type { SalesInvoicePeriod } from './SalesInvoicePeriod';
import {
    SalesInvoicePeriodFromJSON,
    SalesInvoicePeriodFromJSONTyped,
    SalesInvoicePeriodToJSON,
    SalesInvoicePeriodToJSONTyped,
} from './SalesInvoicePeriod';

/**
 * 
 * @export
 * @interface PurchaseInvoice
 */
export interface PurchaseInvoice {
    /**
     * 
     * @type {string}
     * @memberof PurchaseInvoice
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseInvoice
     */
    readonly uuid: string;
    /**
     * Invoice number of the purchase invoice
     * @type {string}
     * @memberof PurchaseInvoice
     */
    invoiceId: string;
    /**
     * 
     * @type {SalesInvoicePeriod}
     * @memberof PurchaseInvoice
     */
    period?: SalesInvoicePeriod;
    /**
     * Date that the invoice is scheduled to be paid
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    scheduled?: Date;
    /**
     * Due date of the invoice
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    due?: Date;
    /**
     * Date of issuance of the invoice
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    date: Date;
    /**
     * ID of the purchase invoice payment batch where this purchase invoice is included
     * @type {string}
     * @memberof PurchaseInvoice
     */
    batch?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    readonly closed?: Date;
    /**
     * Date of payment of the invoice
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    readonly paid?: Date;
    /**
     * Indicates wheter the invoice is overdue or not
     * @type {boolean}
     * @memberof PurchaseInvoice
     */
    overdue: boolean;
    /**
     * Indicates wheter the invoice is in concept or not
     * @type {boolean}
     * @memberof PurchaseInvoice
     */
    concept: boolean;
    /**
     * 
     * @type {SalesInvoiceAmounts}
     * @memberof PurchaseInvoice
     */
    amounts: SalesInvoiceAmounts;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof PurchaseInvoice
     */
    currency: string;
    /**
     * ID of the relation to use
     * @type {string}
     * @memberof PurchaseInvoice
     */
    relation: string;
    /**
     * Free form key/ value pair
     * @type {object}
     * @memberof PurchaseInvoice
     */
    metadata?: object;
    /**
     * 
     * @type {PurchaseInvoiceEmbedded}
     * @memberof PurchaseInvoice
     */
    embedded: PurchaseInvoiceEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseInvoice
     */
    readonly created: Date;
}

/**
 * Check if a given object implements the PurchaseInvoice interface.
 */
export function instanceOfPurchaseInvoice(value: object): value is PurchaseInvoice {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('invoiceId' in value) || value['invoiceId'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('overdue' in value) || value['overdue'] === undefined) return false;
    if (!('concept' in value) || value['concept'] === undefined) return false;
    if (!('amounts' in value) || value['amounts'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('relation' in value) || value['relation'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function PurchaseInvoiceFromJSON(json: any): PurchaseInvoice {
    return PurchaseInvoiceFromJSONTyped(json, false);
}

export function PurchaseInvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchaseInvoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'invoiceId': json['invoice_id'],
        'period': json['period'] == null ? undefined : SalesInvoicePeriodFromJSON(json['period']),
        'scheduled': json['scheduled'] == null ? undefined : (new Date(json['scheduled'])),
        'due': json['due'] == null ? undefined : (new Date(json['due'])),
        'date': (new Date(json['date'])),
        'batch': json['batch'] == null ? undefined : json['batch'],
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'paid': json['paid'] == null ? undefined : (new Date(json['paid'])),
        'overdue': json['overdue'],
        'concept': json['concept'],
        'amounts': SalesInvoiceAmountsFromJSON(json['amounts']),
        'currency': json['currency'],
        'relation': json['relation'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': PurchaseInvoiceEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function PurchaseInvoiceToJSON(json: any): PurchaseInvoice {
    return PurchaseInvoiceToJSONTyped(json, false);
}

export function PurchaseInvoiceToJSONTyped(value?: Omit<PurchaseInvoice, 'id'|'uuid'|'closed'|'paid'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'invoice_id': value['invoiceId'],
        'period': SalesInvoicePeriodToJSON(value['period']),
        'scheduled': value['scheduled'] == null ? undefined : ((value['scheduled']).toISOString().substring(0,10)),
        'due': value['due'] == null ? undefined : ((value['due']).toISOString().substring(0,10)),
        'date': ((value['date']).toISOString().substring(0,10)),
        'batch': value['batch'],
        'overdue': value['overdue'],
        'concept': value['concept'],
        'amounts': SalesInvoiceAmountsToJSON(value['amounts']),
        'currency': value['currency'],
        'relation': value['relation'],
        'metadata': value['metadata'],
        '_embedded': PurchaseInvoiceEmbeddedToJSON(value['embedded']),
    };
}

