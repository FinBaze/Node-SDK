/* tslint:disable */
/* eslint-disable */
/**
 * Finbaze profiles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SubscriptionEmbedded } from './SubscriptionEmbedded';
import {
    SubscriptionEmbeddedFromJSON,
    SubscriptionEmbeddedFromJSONTyped,
    SubscriptionEmbeddedToJSON,
    SubscriptionEmbeddedToJSONTyped,
} from './SubscriptionEmbedded';
import type { SubscriptionFrequency } from './SubscriptionFrequency';
import {
    SubscriptionFrequencyFromJSON,
    SubscriptionFrequencyFromJSONTyped,
    SubscriptionFrequencyToJSON,
    SubscriptionFrequencyToJSONTyped,
} from './SubscriptionFrequency';
import type { SubscriptionAmounts } from './SubscriptionAmounts';
import {
    SubscriptionAmountsFromJSON,
    SubscriptionAmountsFromJSONTyped,
    SubscriptionAmountsToJSON,
    SubscriptionAmountsToJSONTyped,
} from './SubscriptionAmounts';

/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    readonly uuid: string;
    /**
     * ISO 3166-1 alpha-2 currency code
     * @type {string}
     * @memberof Subscription
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    relation: string;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    endDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    canceled?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    closed?: Date;
    /**
     * 
     * @type {SubscriptionAmounts}
     * @memberof Subscription
     */
    amounts: SubscriptionAmounts;
    /**
     * 
     * @type {SubscriptionFrequency}
     * @memberof Subscription
     */
    frequency: SubscriptionFrequency;
    /**
     * Free form key/ value pair
     * @type {{ [key: string]: any; }}
     * @memberof Subscription
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {SubscriptionEmbedded}
     * @memberof Subscription
     */
    embedded: SubscriptionEmbedded;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    readonly updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    readonly created: Date;
}



/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): value is Subscription {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('relation' in value) || value['relation'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('amounts' in value) || value['amounts'] === undefined) return false;
    if (!('frequency' in value) || value['frequency'] === undefined) return false;
    if (!('embedded' in value) || value['embedded'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'currency': json['currency'],
        'name': json['name'],
        'relation': json['relation'],
        'startDate': (new Date(json['start-date'])),
        'endDate': json['end-date'] == null ? undefined : (new Date(json['end-date'])),
        'canceled': json['canceled'] == null ? undefined : (new Date(json['canceled'])),
        'closed': json['closed'] == null ? undefined : (new Date(json['closed'])),
        'amounts': SubscriptionAmountsFromJSON(json['amounts']),
        'frequency': SubscriptionFrequencyFromJSON(json['frequency']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'embedded': SubscriptionEmbeddedFromJSON(json['_embedded']),
        'updated': (new Date(json['updated'])),
        'created': (new Date(json['created'])),
    };
}

export function SubscriptionToJSON(json: any): Subscription {
    return SubscriptionToJSONTyped(json, false);
}

export function SubscriptionToJSONTyped(value?: Omit<Subscription, 'id'|'uuid'|'updated'|'created'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'currency': value['currency'],
        'name': value['name'],
        'relation': value['relation'],
        'start-date': ((value['startDate']).toISOString().substring(0,10)),
        'end-date': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
        'canceled': value['canceled'] == null ? undefined : ((value['canceled']).toISOString().substring(0,10)),
        'closed': value['closed'] == null ? undefined : ((value['closed']).toISOString().substring(0,10)),
        'amounts': SubscriptionAmountsToJSON(value['amounts']),
        'frequency': SubscriptionFrequencyToJSON(value['frequency']),
        'metadata': value['metadata'],
        '_embedded': SubscriptionEmbeddedToJSON(value['embedded']),
    };
}

