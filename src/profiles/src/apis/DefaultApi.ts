/* tslint:disable */
/* eslint-disable */
/**
 * Finbaze profiles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  Asset,
  CloseSalesInvoiceRequest,
  CreateAssetRequest,
  CreateChat200Response,
  CreateChatRequest,
  CreateCreditLoanRequest,
  CreateCurrentAccountRequest,
  CreateDebitLoanRequest,
  CreateEmployeeRequest,
  CreateMemorialEntryRequest,
  CreateMonetaryAccountBankPayment200Response,
  CreateMonetaryAccountBankPaymentRequest,
  CreateMonetaryAccountOpenbankingAuthorisation201Response,
  CreateMonetaryAccountOpenbankingAuthorisationRequest,
  CreateMonetaryAccountPaymentRequestInner,
  CreateMonetaryAccountRequest,
  CreateProcessDocumentRequest,
  CreateProductCategoryRequest,
  CreateProductRequest,
  CreateProfileAccountRequest,
  CreateProfileRequest,
  CreatePurchaseInvoiceFinalRequest,
  CreatePurchaseInvoiceLineRequest,
  CreatePurchaseInvoicePaymentRequest,
  CreatePurchaseInvoiceRequest,
  CreateQuoteRequest,
  CreateRelationRequest,
  CreateRelationsImportRequest,
  CreateSalesInvoiceLineRequest,
  CreateSalesInvoiceRequest,
  CreateStockCategoryRequest,
  CreateSubscriptionBasedOnSalesInvoiceRequest,
  CreateSubscriptionLineRequest,
  CreateSubscriptionRequest,
  CreateVehicleRequest,
  CreateVehicleTripRequest,
  CreditLoan,
  CreditSalesInvoiceRequest,
  CurrentAccount,
  DebitLoan,
  DeleteSubscriptionRequest,
  Employee,
  ExpenseCategory,
  GetAllMonetaryAccountPayments200Response,
  GetAssets200Response,
  GetCreditLoans200Response,
  GetCurrentAccounts200Response,
  GetDebitLoans200Response,
  GetEmployees200Response,
  GetMemorialEntries200Response,
  GetMonetaryAccountOpenbankingAuthorisation200Response,
  GetNLVatData200Response,
  GetProcessDocuments200Response,
  GetProducts200Response,
  GetProfileAccounts200Response,
  GetProfileAnalyticsRevenue200ResponseValue,
  GetProfileFinancialColumnBalance200Response,
  GetProfileFinancialLedger200ResponseInner,
  GetProfileLedgerChart200Response,
  GetProfileMetadata200Response,
  GetPurchaseInvoices200Response,
  GetQuotes200Response,
  GetRelations200Response,
  GetSalesInvoices200Response,
  GetSubscriptions200Response,
  GetVehicleTrips200Response,
  GetVehicles200Response,
  ImportMonetaryAccountCAMT053Request,
  ImportMonetaryAccountMT940Request,
  MemorialEntry,
  MonetaryAccount,
  MonetaryAccountAutoProcess,
  MonetaryAccountPayment,
  NLVATFiling,
  ProcessDocument,
  ProcessMonetaryAccountPaymentCreditLoanRequest,
  ProcessMonetaryAccountPaymentCurrentAccountRequest,
  ProcessMonetaryAccountPaymentDebitLoanRequest,
  ProcessMonetaryAccountPaymentLedgerRequest,
  ProcessMonetaryAccountPaymentPurchaseInvoiceRequest,
  ProcessMonetaryAccountPaymentRelationRequest,
  ProcessMonetaryAccountPaymentSalesInvoiceRequest,
  Product,
  ProductCategory,
  Profile,
  PurchaseInvoice,
  PurchaseInvoiceLine,
  Quote,
  QuoteLine,
  Relation,
  RevenueCategory,
  SalesInvoice,
  SalesInvoiceLine,
  SendSalesInvoiceRequest,
  StockCategory,
  SubmitProcessDocumentRequest,
  Subscription,
  SubscriptionLine,
  UpateMonetaryAccountAutoProcessRequest,
  UpdateCreditLoanRequest,
  UpdateCurrentAccountRequest,
  UpdateProfileRequest,
  Vehicle,
  VehicleTrip,
} from '../models/index';
import {
    AccountFromJSON,
    AccountToJSON,
    AssetFromJSON,
    AssetToJSON,
    CloseSalesInvoiceRequestFromJSON,
    CloseSalesInvoiceRequestToJSON,
    CreateAssetRequestFromJSON,
    CreateAssetRequestToJSON,
    CreateChat200ResponseFromJSON,
    CreateChat200ResponseToJSON,
    CreateChatRequestFromJSON,
    CreateChatRequestToJSON,
    CreateCreditLoanRequestFromJSON,
    CreateCreditLoanRequestToJSON,
    CreateCurrentAccountRequestFromJSON,
    CreateCurrentAccountRequestToJSON,
    CreateDebitLoanRequestFromJSON,
    CreateDebitLoanRequestToJSON,
    CreateEmployeeRequestFromJSON,
    CreateEmployeeRequestToJSON,
    CreateMemorialEntryRequestFromJSON,
    CreateMemorialEntryRequestToJSON,
    CreateMonetaryAccountBankPayment200ResponseFromJSON,
    CreateMonetaryAccountBankPayment200ResponseToJSON,
    CreateMonetaryAccountBankPaymentRequestFromJSON,
    CreateMonetaryAccountBankPaymentRequestToJSON,
    CreateMonetaryAccountOpenbankingAuthorisation201ResponseFromJSON,
    CreateMonetaryAccountOpenbankingAuthorisation201ResponseToJSON,
    CreateMonetaryAccountOpenbankingAuthorisationRequestFromJSON,
    CreateMonetaryAccountOpenbankingAuthorisationRequestToJSON,
    CreateMonetaryAccountPaymentRequestInnerFromJSON,
    CreateMonetaryAccountPaymentRequestInnerToJSON,
    CreateMonetaryAccountRequestFromJSON,
    CreateMonetaryAccountRequestToJSON,
    CreateProcessDocumentRequestFromJSON,
    CreateProcessDocumentRequestToJSON,
    CreateProductCategoryRequestFromJSON,
    CreateProductCategoryRequestToJSON,
    CreateProductRequestFromJSON,
    CreateProductRequestToJSON,
    CreateProfileAccountRequestFromJSON,
    CreateProfileAccountRequestToJSON,
    CreateProfileRequestFromJSON,
    CreateProfileRequestToJSON,
    CreatePurchaseInvoiceFinalRequestFromJSON,
    CreatePurchaseInvoiceFinalRequestToJSON,
    CreatePurchaseInvoiceLineRequestFromJSON,
    CreatePurchaseInvoiceLineRequestToJSON,
    CreatePurchaseInvoicePaymentRequestFromJSON,
    CreatePurchaseInvoicePaymentRequestToJSON,
    CreatePurchaseInvoiceRequestFromJSON,
    CreatePurchaseInvoiceRequestToJSON,
    CreateQuoteRequestFromJSON,
    CreateQuoteRequestToJSON,
    CreateRelationRequestFromJSON,
    CreateRelationRequestToJSON,
    CreateRelationsImportRequestFromJSON,
    CreateRelationsImportRequestToJSON,
    CreateSalesInvoiceLineRequestFromJSON,
    CreateSalesInvoiceLineRequestToJSON,
    CreateSalesInvoiceRequestFromJSON,
    CreateSalesInvoiceRequestToJSON,
    CreateStockCategoryRequestFromJSON,
    CreateStockCategoryRequestToJSON,
    CreateSubscriptionBasedOnSalesInvoiceRequestFromJSON,
    CreateSubscriptionBasedOnSalesInvoiceRequestToJSON,
    CreateSubscriptionLineRequestFromJSON,
    CreateSubscriptionLineRequestToJSON,
    CreateSubscriptionRequestFromJSON,
    CreateSubscriptionRequestToJSON,
    CreateVehicleRequestFromJSON,
    CreateVehicleRequestToJSON,
    CreateVehicleTripRequestFromJSON,
    CreateVehicleTripRequestToJSON,
    CreditLoanFromJSON,
    CreditLoanToJSON,
    CreditSalesInvoiceRequestFromJSON,
    CreditSalesInvoiceRequestToJSON,
    CurrentAccountFromJSON,
    CurrentAccountToJSON,
    DebitLoanFromJSON,
    DebitLoanToJSON,
    DeleteSubscriptionRequestFromJSON,
    DeleteSubscriptionRequestToJSON,
    EmployeeFromJSON,
    EmployeeToJSON,
    ExpenseCategoryFromJSON,
    ExpenseCategoryToJSON,
    GetAllMonetaryAccountPayments200ResponseFromJSON,
    GetAllMonetaryAccountPayments200ResponseToJSON,
    GetAssets200ResponseFromJSON,
    GetAssets200ResponseToJSON,
    GetCreditLoans200ResponseFromJSON,
    GetCreditLoans200ResponseToJSON,
    GetCurrentAccounts200ResponseFromJSON,
    GetCurrentAccounts200ResponseToJSON,
    GetDebitLoans200ResponseFromJSON,
    GetDebitLoans200ResponseToJSON,
    GetEmployees200ResponseFromJSON,
    GetEmployees200ResponseToJSON,
    GetMemorialEntries200ResponseFromJSON,
    GetMemorialEntries200ResponseToJSON,
    GetMonetaryAccountOpenbankingAuthorisation200ResponseFromJSON,
    GetMonetaryAccountOpenbankingAuthorisation200ResponseToJSON,
    GetNLVatData200ResponseFromJSON,
    GetNLVatData200ResponseToJSON,
    GetProcessDocuments200ResponseFromJSON,
    GetProcessDocuments200ResponseToJSON,
    GetProducts200ResponseFromJSON,
    GetProducts200ResponseToJSON,
    GetProfileAccounts200ResponseFromJSON,
    GetProfileAccounts200ResponseToJSON,
    GetProfileAnalyticsRevenue200ResponseValueFromJSON,
    GetProfileAnalyticsRevenue200ResponseValueToJSON,
    GetProfileFinancialColumnBalance200ResponseFromJSON,
    GetProfileFinancialColumnBalance200ResponseToJSON,
    GetProfileFinancialLedger200ResponseInnerFromJSON,
    GetProfileFinancialLedger200ResponseInnerToJSON,
    GetProfileLedgerChart200ResponseFromJSON,
    GetProfileLedgerChart200ResponseToJSON,
    GetProfileMetadata200ResponseFromJSON,
    GetProfileMetadata200ResponseToJSON,
    GetPurchaseInvoices200ResponseFromJSON,
    GetPurchaseInvoices200ResponseToJSON,
    GetQuotes200ResponseFromJSON,
    GetQuotes200ResponseToJSON,
    GetRelations200ResponseFromJSON,
    GetRelations200ResponseToJSON,
    GetSalesInvoices200ResponseFromJSON,
    GetSalesInvoices200ResponseToJSON,
    GetSubscriptions200ResponseFromJSON,
    GetSubscriptions200ResponseToJSON,
    GetVehicleTrips200ResponseFromJSON,
    GetVehicleTrips200ResponseToJSON,
    GetVehicles200ResponseFromJSON,
    GetVehicles200ResponseToJSON,
    ImportMonetaryAccountCAMT053RequestFromJSON,
    ImportMonetaryAccountCAMT053RequestToJSON,
    ImportMonetaryAccountMT940RequestFromJSON,
    ImportMonetaryAccountMT940RequestToJSON,
    MemorialEntryFromJSON,
    MemorialEntryToJSON,
    MonetaryAccountFromJSON,
    MonetaryAccountToJSON,
    MonetaryAccountAutoProcessFromJSON,
    MonetaryAccountAutoProcessToJSON,
    MonetaryAccountPaymentFromJSON,
    MonetaryAccountPaymentToJSON,
    NLVATFilingFromJSON,
    NLVATFilingToJSON,
    ProcessDocumentFromJSON,
    ProcessDocumentToJSON,
    ProcessMonetaryAccountPaymentCreditLoanRequestFromJSON,
    ProcessMonetaryAccountPaymentCreditLoanRequestToJSON,
    ProcessMonetaryAccountPaymentCurrentAccountRequestFromJSON,
    ProcessMonetaryAccountPaymentCurrentAccountRequestToJSON,
    ProcessMonetaryAccountPaymentDebitLoanRequestFromJSON,
    ProcessMonetaryAccountPaymentDebitLoanRequestToJSON,
    ProcessMonetaryAccountPaymentLedgerRequestFromJSON,
    ProcessMonetaryAccountPaymentLedgerRequestToJSON,
    ProcessMonetaryAccountPaymentPurchaseInvoiceRequestFromJSON,
    ProcessMonetaryAccountPaymentPurchaseInvoiceRequestToJSON,
    ProcessMonetaryAccountPaymentRelationRequestFromJSON,
    ProcessMonetaryAccountPaymentRelationRequestToJSON,
    ProcessMonetaryAccountPaymentSalesInvoiceRequestFromJSON,
    ProcessMonetaryAccountPaymentSalesInvoiceRequestToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductCategoryFromJSON,
    ProductCategoryToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    PurchaseInvoiceFromJSON,
    PurchaseInvoiceToJSON,
    PurchaseInvoiceLineFromJSON,
    PurchaseInvoiceLineToJSON,
    QuoteFromJSON,
    QuoteToJSON,
    QuoteLineFromJSON,
    QuoteLineToJSON,
    RelationFromJSON,
    RelationToJSON,
    RevenueCategoryFromJSON,
    RevenueCategoryToJSON,
    SalesInvoiceFromJSON,
    SalesInvoiceToJSON,
    SalesInvoiceLineFromJSON,
    SalesInvoiceLineToJSON,
    SendSalesInvoiceRequestFromJSON,
    SendSalesInvoiceRequestToJSON,
    StockCategoryFromJSON,
    StockCategoryToJSON,
    SubmitProcessDocumentRequestFromJSON,
    SubmitProcessDocumentRequestToJSON,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionLineFromJSON,
    SubscriptionLineToJSON,
    UpateMonetaryAccountAutoProcessRequestFromJSON,
    UpateMonetaryAccountAutoProcessRequestToJSON,
    UpdateCreditLoanRequestFromJSON,
    UpdateCreditLoanRequestToJSON,
    UpdateCurrentAccountRequestFromJSON,
    UpdateCurrentAccountRequestToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
    VehicleFromJSON,
    VehicleToJSON,
    VehicleTripFromJSON,
    VehicleTripToJSON,
} from '../models/index';

export interface ClosePurchaseInvoiceRequest {
    profileId: string;
    purchaseInvoiceId: string;
    body?: object;
}

export interface CloseQuoteRequest {
    profileId: string;
    quoteId: string;
    closeSalesInvoiceRequest?: CloseSalesInvoiceRequest;
}

export interface CloseSalesInvoiceOperationRequest {
    profileId: string;
    salesInvoiceId: string;
    closeSalesInvoiceRequest?: CloseSalesInvoiceRequest;
}

export interface CloseSubscriptionRequest {
    profileId: string;
    subscriptionId: string;
}

export interface CreateAssetOperationRequest {
    profileId: string;
    createAssetRequest?: CreateAssetRequest;
}

export interface CreateChatOperationRequest {
    profileId: string;
    createChatRequest?: CreateChatRequest;
}

export interface CreateCreditLoanOperationRequest {
    profileId: string;
    createCreditLoanRequest?: CreateCreditLoanRequest;
}

export interface CreateCurrentAccountOperationRequest {
    profileId: string;
    createCurrentAccountRequest?: CreateCurrentAccountRequest;
}

export interface CreateDebitLoanOperationRequest {
    profileId: string;
    createDebitLoanRequest?: CreateDebitLoanRequest;
}

export interface CreateEmployeeOperationRequest {
    profileId: string;
    createEmployeeRequest?: Omit<CreateEmployeeRequest, 'id'>;
}

export interface CreateExpenseCategoryRequest {
    profileId: string;
    createStockCategoryRequest?: CreateStockCategoryRequest;
}

export interface CreateMemorialEntryOperationRequest {
    profileId: string;
    createMemorialEntryRequest?: CreateMemorialEntryRequest;
}

export interface CreateMonetaryAccountOperationRequest {
    profileId: string;
    createMonetaryAccountRequest?: CreateMonetaryAccountRequest;
}

export interface CreateMonetaryAccountAutoProcessRequest {
    profileId: string;
    monetaryAccountId: string;
    upateMonetaryAccountAutoProcessRequest?: Omit<UpateMonetaryAccountAutoProcessRequest, 'id'|'updated'|'created'>;
}

export interface CreateMonetaryAccountBankPaymentOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    createMonetaryAccountBankPaymentRequest?: CreateMonetaryAccountBankPaymentRequest;
}

export interface CreateMonetaryAccountOpenbankingAuthorisationOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    createMonetaryAccountOpenbankingAuthorisationRequest?: CreateMonetaryAccountOpenbankingAuthorisationRequest;
}

export interface CreateMonetaryAccountPaymentRequest {
    profileId: string;
    monetaryAccountId: string;
    createMonetaryAccountPaymentRequestInner?: Array<CreateMonetaryAccountPaymentRequestInner>;
}

export interface CreateNLVATFilingRequest {
    profileId: string;
    from: Date;
    to: Date;
}

export interface CreateProcessDocumentOperationRequest {
    profileId: string;
    createProcessDocumentRequest?: CreateProcessDocumentRequest;
}

export interface CreateProductOperationRequest {
    profileId: string;
    createProductRequest?: CreateProductRequest;
}

export interface CreateProductCategoryOperationRequest {
    profileId: string;
    createProductCategoryRequest?: CreateProductCategoryRequest;
}

export interface CreateProfileOperationRequest {
    createProfileRequest: CreateProfileRequest;
}

export interface CreateProfileAccountOperationRequest {
    profileId: string;
    createProfileAccountRequest?: CreateProfileAccountRequest;
}

export interface CreatePurchaseInvoiceOperationRequest {
    profileId: string;
    createPurchaseInvoiceRequest?: CreatePurchaseInvoiceRequest;
}

export interface CreatePurchaseInvoiceFinalOperationRequest {
    profileId: string;
    createPurchaseInvoiceFinalRequest?: CreatePurchaseInvoiceFinalRequest;
}

export interface CreatePurchaseInvoiceLineOperationRequest {
    profileId: string;
    purchaseInvoiceId: string;
    createPurchaseInvoiceLineRequest?: CreatePurchaseInvoiceLineRequest;
}

export interface CreatePurchaseInvoicePaymentOperationRequest {
    profileId: string;
    purchaseInvoiceId: string;
    createPurchaseInvoicePaymentRequest?: CreatePurchaseInvoicePaymentRequest;
}

export interface CreateQuoteOperationRequest {
    profileId: string;
    createQuoteRequest?: CreateQuoteRequest;
}

export interface CreateQuoteLineRequest {
    profileId: string;
    quoteId: string;
    createSalesInvoiceLineRequest?: CreateSalesInvoiceLineRequest;
}

export interface CreateRelationOperationRequest {
    profileId: string;
    createRelationRequest?: CreateRelationRequest;
}

export interface CreateRelationsExportRequest {
    profileId: string;
    createRelationsImportRequest?: CreateRelationsImportRequest;
}

export interface CreateRelationsImportOperationRequest {
    profileId: string;
    createRelationsImportRequest?: CreateRelationsImportRequest;
}

export interface CreateRevenueCategoryRequest {
    profileId: string;
    createStockCategoryRequest?: CreateStockCategoryRequest;
}

export interface CreateSalesInvoiceOperationRequest {
    profileId: string;
    createSalesInvoiceRequest?: CreateSalesInvoiceRequest;
}

export interface CreateSalesInvoiceLineOperationRequest {
    profileId: string;
    salesInvoiceId: string;
    createSalesInvoiceLineRequest?: CreateSalesInvoiceLineRequest;
}

export interface CreateSalesInvoicesImportRequest {
    profileId: string;
    createRelationsImportRequest?: CreateRelationsImportRequest;
}

export interface CreateStockCategoryOperationRequest {
    profileId: string;
    createStockCategoryRequest?: CreateStockCategoryRequest;
}

export interface CreateSubscriptionOperationRequest {
    profileId: string;
    createSubscriptionRequest?: CreateSubscriptionRequest;
}

export interface CreateSubscriptionBasedOnSalesInvoiceOperationRequest {
    profileId: string;
    salesInvoiceId: string;
    createSubscriptionBasedOnSalesInvoiceRequest?: CreateSubscriptionBasedOnSalesInvoiceRequest;
}

export interface CreateSubscriptionLineOperationRequest {
    profileId: string;
    subscriptionId: string;
    createSubscriptionLineRequest?: Omit<CreateSubscriptionLineRequest, 'updated'|'created'>;
}

export interface CreateVehicleOperationRequest {
    profileId: string;
    createVehicleRequest?: CreateVehicleRequest;
}

export interface CreateVehicleTripOperationRequest {
    profileId: string;
    vehicleId: string;
    createVehicleTripRequest?: CreateVehicleTripRequest;
}

export interface CreditSalesInvoiceOperationRequest {
    profileId: string;
    salesInvoiceId: string;
    creditSalesInvoiceRequest?: CreditSalesInvoiceRequest;
}

export interface DeleteAssetRequest {
    profileId: string;
    assetId: string;
}

export interface DeleteCreditLoanRequest {
    profileId: string;
    creditLoanId: string;
}

export interface DeleteCurrentAccountRequest {
    profileId: string;
    currentAccountId: string;
}

export interface DeleteDebitLoanRequest {
    profileId: string;
    debitLoanId: string;
}

export interface DeleteEmployeeRequest {
    profileId: string;
    employeeId: string;
}

export interface DeleteExpenseCategoryRequest {
    profileId: string;
    expenseCategoryId: string;
}

export interface DeleteMemorialEntryRequest {
    profileId: string;
    memorialEntryId: string;
}

export interface DeleteMonetaryAccountRequest {
    profileId: string;
    monetaryAccountId: string;
}

export interface DeleteMonetaryAccountAutoProcessRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountAutoProcessId: string;
}

export interface DeleteMonetaryAccountPaymentRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
}

export interface DeleteProcessDocumentRequest {
    profileId: string;
    processDocumentId: string;
}

export interface DeleteProductRequest {
    profileId: string;
    productId: string;
}

export interface DeleteProductCategoryRequest {
    profileId: string;
    productCategoryId: string;
}

export interface DeleteProfileAccountRequest {
    profileId: string;
    accountId: string;
}

export interface DeletePurchaseInvoiceRequest {
    profileId: string;
    purchaseInvoiceId: string;
}

export interface DeletePurchaseInvoiceLineRequest {
    profileId: string;
    purchaseInvoiceId: string;
    purchaseInvoiceLineId: string;
}

export interface DeleteQuoteRequest {
    profileId: string;
    quoteId: string;
}

export interface DeleteQuoteLineRequest {
    profileId: string;
    quoteId: string;
    quoteLineId: string;
}

export interface DeleteRelationRequest {
    profileId: string;
    relationId: string;
}

export interface DeleteRevenueCategoryRequest {
    profileId: string;
    revenueCategoryId: string;
}

export interface DeleteSalesInvoiceRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface DeleteSalesInvoiceLineRequest {
    profileId: string;
    salesInvoiceId: string;
    salesInvoiceLineId: string;
}

export interface DeleteStockCategoryRequest {
    profileId: string;
    stockCategoryId: string;
}

export interface DeleteSubscriptionOperationRequest {
    profileId: string;
    subscriptionId: string;
    deleteSubscriptionRequest?: DeleteSubscriptionRequest;
}

export interface DeleteVehicleRequest {
    profileId: string;
    vehicleId: string;
}

export interface DeleteVehicleTripRequest {
    profileId: string;
    vehicleId: string;
    vehicleTripId: string;
}

export interface GetAllMonetaryAccountPaymentsRequest {
    profileId: string;
    page?: number;
    size?: number;
    search?: boolean;
    unprocessed?: boolean;
    amount?: number;
    relation?: string;
    creditLoan?: string;
    debitLoan?: string;
    currentAccount?: string;
}

export interface GetAssetRequest {
    profileId: string;
    assetId: string;
}

export interface GetAssetsRequest {
    profileId: string;
    page?: number;
    size?: number;
}

export interface GetChatRequest {
    profileId: string;
    chatId: string;
}

export interface GetCreditLoanRequest {
    profileId: string;
    creditLoanId: string;
}

export interface GetCreditLoansRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
}

export interface GetCurrentAccountRequest {
    profileId: string;
    currentAccountId: string;
}

export interface GetCurrentAccountsRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
}

export interface GetDebitLoanRequest {
    profileId: string;
    debitLoanId: string;
}

export interface GetDebitLoansRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
}

export interface GetEmployeeRequest {
    profileId: string;
    employeeId: string;
}

export interface GetEmployeesRequest {
    profileId: string;
    page?: number;
    size?: number;
    name?: string;
}

export interface GetExpenseCategoriesRequest {
    profileId: string;
}

export interface GetExpenseCategoryRequest {
    profileId: string;
    expenseCategoryId: string;
}

export interface GetMemorialEntriesRequest {
    profileId: string;
    page?: number;
    size?: number;
    ledger?: string;
    date?: Date;
}

export interface GetMemorialEntryRequest {
    profileId: string;
    memorialEntryId: string;
}

export interface GetMonetaryAccountRequest {
    profileId: string;
    monetaryAccountId: string;
}

export interface GetMonetaryAccountAutoProcessRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountAutoProcessId: string;
}

export interface GetMonetaryAccountAutoProcessesRequest {
    profileId: string;
    monetaryAccountId: string;
}

export interface GetMonetaryAccountOpenbankingAuthorisationRequest {
    profileId: string;
    monetaryAccountId: string;
}

export interface GetMonetaryAccountPaymentRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
}

export interface GetMonetaryAccountPaymentsRequest {
    profileId: string;
    monetaryAccountId: string;
    page?: number;
    size?: number;
    search?: boolean;
    unprocessed?: boolean;
    amount?: number;
    relation?: string;
    creditLoan?: string;
    debitLoan?: string;
    currentAccount?: string;
}

export interface GetMonetaryAccountsRequest {
    profileId: string;
}

export interface GetNLVATRequest {
    profileId: string;
    from: Date;
    to: Date;
}

export interface GetNLVATFilingRequest {
    profileId: string;
    nlVATFilingId: string;
}

export interface GetNLVATFilingPDFRequest {
    profileId: string;
    nlVATFilingId: string;
}

export interface GetNLVatDataRequest {
    profileId: string;
    from: Date;
    to: Date;
    page?: number;
    size?: number;
}

export interface GetProcessDocumentRequest {
    profileId: string;
    processDocumentId: string;
}

export interface GetProcessDocumentAttachmentRequest {
    profileId: string;
    processDocumentId: string;
    id: string;
}

export interface GetProcessDocumentsRequest {
    profileId: string;
    page?: number;
    size?: number;
    processed?: boolean;
    processing?: boolean;
}

export interface GetProductRequest {
    profileId: string;
    productId: string;
}

export interface GetProductCategoriesRequest {
    profileId: string;
}

export interface GetProductCategoryRequest {
    profileId: string;
    productCategoryId: string;
}

export interface GetProductsRequest {
    profileId: string;
    page?: number;
    size?: number;
    name?: string;
}

export interface GetProfileRequest {
    profileId: string;
}

export interface GetProfileAccountRequest {
    profileId: string;
    accountId: string;
}

export interface GetProfileAccountsRequest {
    profileId: string;
    page?: number;
    size?: number;
    name?: string;
}

export interface GetProfileAnalyticsCashOnHandRequest {
    profileId: string;
    start?: Date;
    end?: Date;
}

export interface GetProfileAnalyticsExpensesRequest {
    profileId: string;
    start?: Date;
    end?: Date;
    group?: GetProfileAnalyticsExpensesGroupEnum;
}

export interface GetProfileAnalyticsRevenueRequest {
    profileId: string;
    start?: Date;
    end?: Date;
    group?: GetProfileAnalyticsRevenueGroupEnum;
}

export interface GetProfileFinancialColumnBalanceRequest {
    profileId: string;
    start?: Date;
    end?: Date;
}

export interface GetProfileFinancialLedgerRequest {
    profileId: string;
}

export interface GetProfileFinancialStatementRequest {
    profileId: string;
    start?: Date;
    end?: Date;
}

export interface GetProfileLedgerChartRequest {
    profileId: string;
}

export interface GetProfileMetadataRequest {
    profileId: string;
}

export interface GetPurchaseInvoiceRequest {
    profileId: string;
    purchaseInvoiceId: string;
}

export interface GetPurchaseInvoiceLineRequest {
    profileId: string;
    purchaseInvoiceId: string;
    purchaseInvoiceLineId: string;
}

export interface GetPurchaseInvoiceLinesRequest {
    profileId: string;
    purchaseInvoiceId: string;
}

export interface GetPurchaseInvoicesRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
    invoiceId?: string;
    date?: Date;
    overdue?: boolean;
    paid?: boolean;
    concept?: boolean;
}

export interface GetQuoteRequest {
    profileId: string;
    quoteId: string;
}

export interface GetQuoteLineRequest {
    profileId: string;
    quoteId: string;
    quoteLineId: string;
}

export interface GetQuoteLinesRequest {
    profileId: string;
    quoteId: string;
}

export interface GetQuotePreviewEmailRequest {
    profileId: string;
    quoteId: string;
}

export interface GetQuotePreviewHTMLRequest {
    profileId: string;
    quoteId: string;
}

export interface GetQuotePreviewPDFRequest {
    profileId: string;
    quoteId: string;
}

export interface GetQuotesRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
    product?: string;
    quoteId?: string;
    date?: Date;
    concept?: boolean;
}

export interface GetRelationRequest {
    profileId: string;
    relationId: string;
}

export interface GetRelationsRequest {
    profileId: string;
    page?: number;
    size?: number;
    name?: string;
    tags?: Array<GetRelationsTagsEnum>;
    vatNumber?: string;
}

export interface GetRevenueCategoriesRequest {
    profileId: string;
}

export interface GetRevenueCategoryRequest {
    profileId: string;
    revenueCategoryId: string;
}

export interface GetSalesInvoiceRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface GetSalesInvoiceLineRequest {
    profileId: string;
    salesInvoiceId: string;
    salesInvoiceLineId: string;
}

export interface GetSalesInvoiceLinesRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface GetSalesInvoicePreviewEmailRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface GetSalesInvoicePreviewHTMLRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface GetSalesInvoicePreviewPDFRequest {
    profileId: string;
    salesInvoiceId: string;
}

export interface GetSalesInvoicesRequest {
    profileId: string;
    page?: number;
    size?: number;
    subscription?: string;
    relation?: string;
    product?: string;
    invoiceId?: string;
    date?: Date;
    overdue?: boolean;
    paid?: boolean;
    credit?: boolean;
    credited?: boolean;
    concept?: boolean;
    currency?: string;
    amount?: number;
    amountLte?: number;
    amountGte?: number;
}

export interface GetStockCategoriesRequest {
    profileId: string;
}

export interface GetStockcategoryRequest {
    profileId: string;
    stockCategoryId: string;
}

export interface GetSubscriptionRequest {
    profileId: string;
    subscriptionId: string;
}

export interface GetSubscriptionLineRequest {
    profileId: string;
    subscriptionId: string;
    subscriptionLineId: string;
}

export interface GetSubscriptionLinesRequest {
    profileId: string;
    subscriptionId: string;
}

export interface GetSubscriptionsRequest {
    profileId: string;
    page?: number;
    size?: number;
    relation?: string;
}

export interface GetVehicleRequest {
    profileId: string;
    vehicleId: string;
}

export interface GetVehicleTripRequest {
    profileId: string;
    vehicleId: string;
    vehicleTripId: string;
}

export interface GetVehicleTripsRequest {
    profileId: string;
    vehicleId: string;
    page?: number;
    size?: number;
}

export interface GetVehiclesRequest {
    profileId: string;
    page?: number;
    size?: number;
    asset?: string;
}

export interface ImportMonetaryAccountCAMT053OperationRequest {
    profileId: string;
    monetaryAccountId: string;
    importMonetaryAccountCAMT053Request?: ImportMonetaryAccountCAMT053Request;
}

export interface ImportMonetaryAccountMT940OperationRequest {
    profileId: string;
    monetaryAccountId: string;
    importMonetaryAccountMT940Request?: ImportMonetaryAccountMT940Request;
}

export interface ProcessMonetaryAccountPaymentCreditLoanOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentCreditLoanRequest?: ProcessMonetaryAccountPaymentCreditLoanRequest;
}

export interface ProcessMonetaryAccountPaymentCurrentAccountOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentCurrentAccountRequest?: ProcessMonetaryAccountPaymentCurrentAccountRequest;
}

export interface ProcessMonetaryAccountPaymentDebitLoanOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentDebitLoanRequest?: ProcessMonetaryAccountPaymentDebitLoanRequest;
}

export interface ProcessMonetaryAccountPaymentLedgerOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentLedgerRequest?: ProcessMonetaryAccountPaymentLedgerRequest;
}

export interface ProcessMonetaryAccountPaymentPurchaseInvoiceOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentPurchaseInvoiceRequest?: ProcessMonetaryAccountPaymentPurchaseInvoiceRequest;
}

export interface ProcessMonetaryAccountPaymentRelationOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentRelationRequest?: ProcessMonetaryAccountPaymentRelationRequest;
}

export interface ProcessMonetaryAccountPaymentSalesInvoiceOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    unprocess?: boolean;
    processMonetaryAccountPaymentSalesInvoiceRequest?: ProcessMonetaryAccountPaymentSalesInvoiceRequest;
}

export interface SendQuoteRequest {
    profileId: string;
    quoteId: string;
    sendSalesInvoiceRequest?: SendSalesInvoiceRequest;
}

export interface SendSalesInvoiceOperationRequest {
    profileId: string;
    salesInvoiceId: string;
    sendSalesInvoiceRequest?: SendSalesInvoiceRequest;
}

export interface SubmitProcessDocumentOperationRequest {
    profileId: string;
    processDocumentId: string;
    submitProcessDocumentRequest?: SubmitProcessDocumentRequest;
}

export interface UpateMonetaryAccountAutoProcessOperationRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountAutoProcessId: string;
    upateMonetaryAccountAutoProcessRequest?: Omit<UpateMonetaryAccountAutoProcessRequest, 'id'|'updated'|'created'>;
}

export interface UpdateAssetRequest {
    profileId: string;
    assetId: string;
    createAssetRequest?: CreateAssetRequest;
}

export interface UpdateChatRequest {
    profileId: string;
    chatId: string;
    createChatRequest?: CreateChatRequest;
}

export interface UpdateCreditLoanOperationRequest {
    profileId: string;
    creditLoanId: string;
    updateCreditLoanRequest?: UpdateCreditLoanRequest;
}

export interface UpdateCurrentAccountOperationRequest {
    profileId: string;
    currentAccountId: string;
    updateCurrentAccountRequest?: UpdateCurrentAccountRequest;
}

export interface UpdateDebitLoanRequest {
    profileId: string;
    debitLoanId: string;
    createDebitLoanRequest?: CreateDebitLoanRequest;
}

export interface UpdateEmployeeRequest {
    profileId: string;
    employeeId: string;
    createEmployeeRequest?: Omit<CreateEmployeeRequest, 'id'>;
}

export interface UpdateExpenseCategoryRequest {
    profileId: string;
    expenseCategoryId: string;
}

export interface UpdateMemorialEntryRequest {
    profileId: string;
    memorialEntryId: string;
    createMemorialEntryRequest?: CreateMemorialEntryRequest;
}

export interface UpdateMonetaryAccountRequest {
    profileId: string;
    monetaryAccountId: string;
    createMonetaryAccountRequest?: CreateMonetaryAccountRequest;
}

export interface UpdateMonetaryAccountPaymentRequest {
    profileId: string;
    monetaryAccountId: string;
    monetaryAccountPaymentId: string;
    createMonetaryAccountPaymentRequestInner?: CreateMonetaryAccountPaymentRequestInner;
}

export interface UpdateProcessDocumentRequest {
    profileId: string;
    processDocumentId: string;
    createProcessDocumentRequest?: CreateProcessDocumentRequest;
}

export interface UpdateProductRequest {
    profileId: string;
    productId: string;
    createProductRequest?: CreateProductRequest;
}

export interface UpdateProductCategoryRequest {
    profileId: string;
    productCategoryId: string;
    createProductCategoryRequest?: CreateProductCategoryRequest;
}

export interface UpdateProfileOperationRequest {
    profileId: string;
    updateProfileRequest: UpdateProfileRequest;
}

export interface UpdatePurchaseInvoiceRequest {
    profileId: string;
    purchaseInvoiceId: string;
    createPurchaseInvoiceRequest?: CreatePurchaseInvoiceRequest;
}

export interface UpdatePurchaseInvoiceLineRequest {
    profileId: string;
    purchaseInvoiceId: string;
    purchaseInvoiceLineId: string;
    createPurchaseInvoiceLineRequest?: CreatePurchaseInvoiceLineRequest;
}

export interface UpdateQuoteRequest {
    profileId: string;
    quoteId: string;
    createQuoteRequest?: CreateQuoteRequest;
}

export interface UpdateQuoteLineRequest {
    profileId: string;
    quoteId: string;
    quoteLineId: string;
    createSalesInvoiceLineRequest?: CreateSalesInvoiceLineRequest;
}

export interface UpdateRelationRequest {
    profileId: string;
    relationId: string;
    createRelationRequest?: CreateRelationRequest;
}

export interface UpdateRevenueCategoryRequest {
    profileId: string;
    revenueCategoryId: string;
}

export interface UpdateSalesInvoiceRequest {
    profileId: string;
    salesInvoiceId: string;
    createSalesInvoiceRequest?: CreateSalesInvoiceRequest;
}

export interface UpdateSalesInvoiceLineRequest {
    profileId: string;
    salesInvoiceId: string;
    salesInvoiceLineId: string;
    createSalesInvoiceLineRequest?: CreateSalesInvoiceLineRequest;
}

export interface UpdateStockCategoryRequest {
    profileId: string;
    stockCategoryId: string;
}

export interface UpdateSubscriptionRequest {
    profileId: string;
    subscriptionId: string;
    createSubscriptionRequest?: CreateSubscriptionRequest;
}

export interface UpdateSubscriptionLineRequest {
    profileId: string;
    subscriptionId: string;
    subscriptionLineId: string;
    createSubscriptionLineRequest?: Omit<CreateSubscriptionLineRequest, 'updated'|'created'>;
}

export interface UpdateVehicleRequest {
    profileId: string;
    vehicleId: string;
    createVehicleRequest?: CreateVehicleRequest;
}

export interface UpdateVehicleTripRequest {
    profileId: string;
    vehicleId: string;
    vehicleTripId: string;
    createVehicleTripRequest?: CreateVehicleTripRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Closes a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    closePurchaseInvoiceRaw(requestParameters: ClosePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>>;

    /**
     * Closes a purchase invoice
     */
    closePurchaseInvoice(requestParameters: ClosePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice>;

    /**
     * Closes a quote
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {CloseSalesInvoiceRequest} [closeSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    closeQuoteRaw(requestParameters: CloseQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>>;

    /**
     * Closes a quote
     */
    closeQuote(requestParameters: CloseQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote>;

    /**
     * Closes a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {CloseSalesInvoiceRequest} [closeSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    closeSalesInvoiceRaw(requestParameters: CloseSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>>;

    /**
     * Closes a sales invoice
     */
    closeSalesInvoice(requestParameters: CloseSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice>;

    /**
     * Closes a subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    closeSubscriptionRaw(requestParameters: CloseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>>;

    /**
     * Closes a subscription
     */
    closeSubscription(requestParameters: CloseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription>;

    /**
     * Creates a asset
     * @param {string} profileId The id of the profile
     * @param {CreateAssetRequest} [createAssetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createAssetRaw(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>>;

    /**
     * Creates a asset
     */
    createAsset(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset>;

    /**
     * Creates a chat
     * @param {string} profileId The id of the profile
     * @param {CreateChatRequest} [createChatRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createChatRaw(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>>;

    /**
     * Creates a chat
     */
    createChat(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response>;

    /**
     * Creates a credit loan
     * @param {string} profileId The id of the profile
     * @param {CreateCreditLoanRequest} [createCreditLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createCreditLoanRaw(requestParameters: CreateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>>;

    /**
     * Creates a credit loan
     */
    createCreditLoan(requestParameters: CreateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan>;

    /**
     * Creates a current account
     * @param {string} profileId The id of the profile
     * @param {CreateCurrentAccountRequest} [createCurrentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createCurrentAccountRaw(requestParameters: CreateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentAccount>>;

    /**
     * Creates a current account
     */
    createCurrentAccount(requestParameters: CreateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentAccount>;

    /**
     * Creates a debit loan
     * @param {string} profileId The id of the profile
     * @param {CreateDebitLoanRequest} [createDebitLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createDebitLoanRaw(requestParameters: CreateDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>>;

    /**
     * Creates a debit loan
     */
    createDebitLoan(requestParameters: CreateDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan>;

    /**
     * Creates an employee
     * @param {string} profileId The id of the profile
     * @param {CreateEmployeeRequest} [createEmployeeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createEmployeeRaw(requestParameters: CreateEmployeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>>;

    /**
     * Creates an employee
     */
    createEmployee(requestParameters: CreateEmployeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee>;

    /**
     * Creates an expense category
     * @param {string} profileId The id of the profile
     * @param {CreateStockCategoryRequest} [createStockCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createExpenseCategoryRaw(requestParameters: CreateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>>;

    /**
     * Creates an expense category
     */
    createExpenseCategory(requestParameters: CreateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>>;

    /**
     * Creates a memorial entry
     * @param {string} profileId The id of the profile
     * @param {CreateMemorialEntryRequest} [createMemorialEntryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMemorialEntryRaw(requestParameters: CreateMemorialEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemorialEntry>>;

    /**
     * Creates a memorial entry
     */
    createMemorialEntry(requestParameters: CreateMemorialEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemorialEntry>;

    /**
     * Creates a monetary account
     * @param {string} profileId The id of the profile
     * @param {CreateMonetaryAccountRequest} [createMonetaryAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMonetaryAccountRaw(requestParameters: CreateMonetaryAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>>;

    /**
     * Creates a monetary account
     */
    createMonetaryAccount(requestParameters: CreateMonetaryAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount>;

    /**
     * Creates a monetary account auto process
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {UpateMonetaryAccountAutoProcessRequest} [upateMonetaryAccountAutoProcessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMonetaryAccountAutoProcessRaw(requestParameters: CreateMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>>;

    /**
     * Creates a monetary account auto process
     */
    createMonetaryAccountAutoProcess(requestParameters: CreateMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess>;

    /**
     * Create purchaseinvoice payment
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {CreateMonetaryAccountBankPaymentRequest} [createMonetaryAccountBankPaymentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMonetaryAccountBankPaymentRaw(requestParameters: CreateMonetaryAccountBankPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountBankPayment200Response>>;

    /**
     * Create purchaseinvoice payment
     */
    createMonetaryAccountBankPayment(requestParameters: CreateMonetaryAccountBankPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountBankPayment200Response>;

    /**
     * Create an openbanking request
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {CreateMonetaryAccountOpenbankingAuthorisationRequest} [createMonetaryAccountOpenbankingAuthorisationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMonetaryAccountOpenbankingAuthorisationRaw(requestParameters: CreateMonetaryAccountOpenbankingAuthorisationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountOpenbankingAuthorisation201Response>>;

    /**
     * Create an openbanking request
     */
    createMonetaryAccountOpenbankingAuthorisation(requestParameters: CreateMonetaryAccountOpenbankingAuthorisationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountOpenbankingAuthorisation201Response>;

    /**
     * Creates a monetary account payment, pass an array if you are booking the payments on a suspense account.
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {Array<CreateMonetaryAccountPaymentRequestInner>} [createMonetaryAccountPaymentRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createMonetaryAccountPaymentRaw(requestParameters: CreateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccountPayment>>>;

    /**
     * Creates a monetary account payment, pass an array if you are booking the payments on a suspense account.
     */
    createMonetaryAccountPayment(requestParameters: CreateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccountPayment>>;

    /**
     * Returns the VAT filing data
     * @param {string} profileId The id of the profile
     * @param {Date} from From date of the VAT filing
     * @param {Date} to To date of the VAT filing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createNLVATFilingRaw(requestParameters: CreateNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NLVATFiling>>;

    /**
     * Returns the VAT filing data
     */
    createNLVATFiling(requestParameters: CreateNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NLVATFiling>;

    /**
     * Creates a process document
     * @param {string} profileId The id of the profile
     * @param {CreateProcessDocumentRequest} [createProcessDocumentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProcessDocumentRaw(requestParameters: CreateProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>>;

    /**
     * Creates a process document
     */
    createProcessDocument(requestParameters: CreateProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument>;

    /**
     * Creates a product
     * @param {string} profileId The id of the profile
     * @param {CreateProductRequest} [createProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Creates a product
     */
    createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

    /**
     * Creates an product category
     * @param {string} profileId The id of the profile
     * @param {CreateProductCategoryRequest} [createProductCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProductCategoryRaw(requestParameters: CreateProductCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>>;

    /**
     * Creates an product category
     */
    createProductCategory(requestParameters: CreateProductCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>>;

    /**
     * Creates a new profile
     * @param {CreateProfileRequest} createProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProfileRaw(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;

    /**
     * Creates a new profile
     */
    createProfile(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;

    /**
     * Creates an relations
     * @param {string} profileId The id of the profile
     * @param {CreateProfileAccountRequest} [createProfileAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createProfileAccountRaw(requestParameters: CreateProfileAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Creates an relations
     */
    createProfileAccount(requestParameters: CreateProfileAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     * @param {string} profileId The id of the profile
     * @param {CreatePurchaseInvoiceRequest} [createPurchaseInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createPurchaseInvoiceRaw(requestParameters: CreatePurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>>;

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    createPurchaseInvoice(requestParameters: CreatePurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice>;

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     * @param {string} profileId The id of the profile
     * @param {CreatePurchaseInvoiceFinalRequest} [createPurchaseInvoiceFinalRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createPurchaseInvoiceFinalRaw(requestParameters: CreatePurchaseInvoiceFinalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>>;

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    createPurchaseInvoiceFinal(requestParameters: CreatePurchaseInvoiceFinalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice>;

    /**
     * creates a purchase invoice line
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {CreatePurchaseInvoiceLineRequest} [createPurchaseInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createPurchaseInvoiceLineRaw(requestParameters: CreatePurchaseInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>>;

    /**
     * creates a purchase invoice line
     */
    createPurchaseInvoiceLine(requestParameters: CreatePurchaseInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine>;

    /**
     * Create purchaseinvoice payment
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {CreatePurchaseInvoicePaymentRequest} [createPurchaseInvoicePaymentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createPurchaseInvoicePaymentRaw(requestParameters: CreatePurchaseInvoicePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountBankPayment200Response>>;

    /**
     * Create purchaseinvoice payment
     */
    createPurchaseInvoicePayment(requestParameters: CreatePurchaseInvoicePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountBankPayment200Response>;

    /**
     * Creates an concept Quote
     * @param {string} profileId The id of the profile
     * @param {CreateQuoteRequest} [createQuoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createQuoteRaw(requestParameters: CreateQuoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>>;

    /**
     * Creates an concept Quote
     */
    createQuote(requestParameters: CreateQuoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote>;

    /**
     * Creates an quote line
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {CreateSalesInvoiceLineRequest} [createSalesInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createQuoteLineRaw(requestParameters: CreateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>>;

    /**
     * Creates an quote line
     */
    createQuoteLine(requestParameters: CreateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine>;

    /**
     * Creates an relations
     * @param {string} profileId The id of the profile
     * @param {CreateRelationRequest} [createRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRelationRaw(requestParameters: CreateRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>>;

    /**
     * Creates an relations
     */
    createRelation(requestParameters: CreateRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation>;

    /**
     * Creates an relation export
     * @param {string} profileId The id of the profile
     * @param {CreateRelationsImportRequest} [createRelationsImportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRelationsExportRaw(requestParameters: CreateRelationsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Creates an relation export
     */
    createRelationsExport(requestParameters: CreateRelationsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Creates an relation import
     * @param {string} profileId The id of the profile
     * @param {CreateRelationsImportRequest} [createRelationsImportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRelationsImportRaw(requestParameters: CreateRelationsImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Relation>>>;

    /**
     * Creates an relation import
     */
    createRelationsImport(requestParameters: CreateRelationsImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Relation>>;

    /**
     * Creates an revenue category
     * @param {string} profileId The id of the profile
     * @param {CreateStockCategoryRequest} [createStockCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRevenueCategoryRaw(requestParameters: CreateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>>;

    /**
     * Creates an revenue category
     */
    createRevenueCategory(requestParameters: CreateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>>;

    /**
     * creates a sales invoice
     * @param {string} profileId The id of the profile
     * @param {CreateSalesInvoiceRequest} [createSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSalesInvoiceRaw(requestParameters: CreateSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>>;

    /**
     * creates a sales invoice
     */
    createSalesInvoice(requestParameters: CreateSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice>;

    /**
     * creates a sales invoice line
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {CreateSalesInvoiceLineRequest} [createSalesInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSalesInvoiceLineRaw(requestParameters: CreateSalesInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>>;

    /**
     * creates a sales invoice line
     */
    createSalesInvoiceLine(requestParameters: CreateSalesInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine>;

    /**
     * Creates an sales invoice import
     * @param {string} profileId The id of the profile
     * @param {CreateRelationsImportRequest} [createRelationsImportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSalesInvoicesImportRaw(requestParameters: CreateSalesInvoicesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoice>>>;

    /**
     * Creates an sales invoice import
     */
    createSalesInvoicesImport(requestParameters: CreateSalesInvoicesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoice>>;

    /**
     * Creates an stock category
     * @param {string} profileId The id of the profile
     * @param {CreateStockCategoryRequest} [createStockCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createStockCategoryRaw(requestParameters: CreateStockCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>>;

    /**
     * Creates an stock category
     */
    createStockCategory(requestParameters: CreateStockCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>>;

    /**
     * Creates a subscription
     * @param {string} profileId The id of the profile
     * @param {CreateSubscriptionRequest} [createSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSubscriptionRaw(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Subscription>>>;

    /**
     * Creates a subscription
     */
    createSubscription(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Subscription>>;

    /**
     * Creates a subscription based on a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {CreateSubscriptionBasedOnSalesInvoiceRequest} [createSubscriptionBasedOnSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSubscriptionBasedOnSalesInvoiceRaw(requestParameters: CreateSubscriptionBasedOnSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>>;

    /**
     * Creates a subscription based on a sales invoice
     */
    createSubscriptionBasedOnSalesInvoice(requestParameters: CreateSubscriptionBasedOnSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription>;

    /**
     * Creates a subscription line
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {CreateSubscriptionLineRequest} [createSubscriptionLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSubscriptionLineRaw(requestParameters: CreateSubscriptionLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionLine>>>;

    /**
     * Creates a subscription line
     */
    createSubscriptionLine(requestParameters: CreateSubscriptionLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionLine>>;

    /**
     * Creates a vehicle
     * @param {string} profileId The id of the profile
     * @param {CreateVehicleRequest} [createVehicleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createVehicleRaw(requestParameters: CreateVehicleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>>;

    /**
     * Creates a vehicle
     */
    createVehicle(requestParameters: CreateVehicleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle>;

    /**
     * Creates a vehicle trip
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {CreateVehicleTripRequest} [createVehicleTripRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createVehicleTripRaw(requestParameters: CreateVehicleTripOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>>;

    /**
     * Creates a vehicle trip
     */
    createVehicleTrip(requestParameters: CreateVehicleTripOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip>;

    /**
     * Credits a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {CreditSalesInvoiceRequest} [creditSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    creditSalesInvoiceRaw(requestParameters: CreditSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>>;

    /**
     * Credits a sales invoice
     */
    creditSalesInvoice(requestParameters: CreditSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice>;

    /**
     * Deletes a asset
     * @param {string} profileId The id of the profile
     * @param {string} assetId The id of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteAssetRaw(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a asset
     */
    deleteAsset(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a credit loan
     * @param {string} profileId The id of the profile
     * @param {string} creditLoanId The id of the loan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCreditLoanRaw(requestParameters: DeleteCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a credit loan
     */
    deleteCreditLoan(requestParameters: DeleteCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a current account
     * @param {string} profileId The id of the profile
     * @param {string} currentAccountId The id of the current account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCurrentAccountRaw(requestParameters: DeleteCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a current account
     */
    deleteCurrentAccount(requestParameters: DeleteCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a debit loan
     * @param {string} profileId The id of the profile
     * @param {string} debitLoanId The id of the loan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteDebitLoanRaw(requestParameters: DeleteDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a debit loan
     */
    deleteDebitLoan(requestParameters: DeleteDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a employee
     * @param {string} profileId The id of the profile
     * @param {string} employeeId The ID of the employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a employee
     */
    deleteEmployee(requestParameters: DeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a expense categroy
     * @param {string} profileId The id of the profile
     * @param {string} expenseCategoryId The ID of the expense category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteExpenseCategoryRaw(requestParameters: DeleteExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a expense categroy
     */
    deleteExpenseCategory(requestParameters: DeleteExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a memorial entry
     * @param {string} profileId The id of the profile
     * @param {string} memorialEntryId The id of the memorial entry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMemorialEntryRaw(requestParameters: DeleteMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a memorial entry
     */
    deleteMemorialEntry(requestParameters: DeleteMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a product
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMonetaryAccountRaw(requestParameters: DeleteMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a product
     */
    deleteMonetaryAccount(requestParameters: DeleteMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a monetary account auto process
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountAutoProcessId The ID of the monetary account auto process
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMonetaryAccountAutoProcessRaw(requestParameters: DeleteMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a monetary account auto process
     */
    deleteMonetaryAccountAutoProcess(requestParameters: DeleteMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a monetary account payment
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMonetaryAccountPaymentRaw(requestParameters: DeleteMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a monetary account payment
     */
    deleteMonetaryAccountPayment(requestParameters: DeleteMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a process document
     * @param {string} profileId The id of the profile
     * @param {string} processDocumentId The ID of the process document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProcessDocumentRaw(requestParameters: DeleteProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a process document
     */
    deleteProcessDocument(requestParameters: DeleteProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a product
     * @param {string} profileId The id of the profile
     * @param {string} productId The ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a product
     */
    deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a product category
     * @param {string} profileId The id of the profile
     * @param {string} productCategoryId The id of the product category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProductCategoryRaw(requestParameters: DeleteProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a product category
     */
    deleteProductCategory(requestParameters: DeleteProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a profile account
     * @param {string} profileId The id of the profile
     * @param {string} accountId The ID of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProfileAccountRaw(requestParameters: DeleteProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a profile account
     */
    deleteProfileAccount(requestParameters: DeleteProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deletePurchaseInvoiceRaw(requestParameters: DeletePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a purchase invoice
     */
    deletePurchaseInvoice(requestParameters: DeletePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a purchase invoice line
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {string} purchaseInvoiceLineId The ID of the purchase invoice line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deletePurchaseInvoiceLineRaw(requestParameters: DeletePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a purchase invoice line
     */
    deletePurchaseInvoiceLine(requestParameters: DeletePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a quote
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteQuoteRaw(requestParameters: DeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a quote
     */
    deleteQuote(requestParameters: DeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a quote line
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {string} quoteLineId The id of the quote line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteQuoteLineRaw(requestParameters: DeleteQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a quote line
     */
    deleteQuoteLine(requestParameters: DeleteQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a relation
     * @param {string} profileId The id of the profile
     * @param {string} relationId The ID of the relation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteRelationRaw(requestParameters: DeleteRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a relation
     */
    deleteRelation(requestParameters: DeleteRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a revenue categroy
     * @param {string} profileId The id of the profile
     * @param {string} revenueCategoryId The ID of the revenue category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteRevenueCategoryRaw(requestParameters: DeleteRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a revenue categroy
     */
    deleteRevenueCategory(requestParameters: DeleteRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSalesInvoiceRaw(requestParameters: DeleteSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a sales invoice
     */
    deleteSalesInvoice(requestParameters: DeleteSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a sales invoice line
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {string} salesInvoiceLineId The id of the sales invoice line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSalesInvoiceLineRaw(requestParameters: DeleteSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a sales invoice line
     */
    deleteSalesInvoiceLine(requestParameters: DeleteSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a stock categroy
     * @param {string} profileId The id of the profile
     * @param {string} stockCategoryId The ID of the balance category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteStockCategoryRaw(requestParameters: DeleteStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a stock categroy
     */
    deleteStockCategory(requestParameters: DeleteStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {DeleteSubscriptionRequest} [deleteSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSubscriptionRaw(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a subscription
     */
    deleteSubscription(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a vehicle
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteVehicleRaw(requestParameters: DeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a vehicle
     */
    deleteVehicle(requestParameters: DeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a vehicle trip
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {string} vehicleTripId The id of the vehicle trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteVehicleTripRaw(requestParameters: DeleteVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a vehicle trip
     */
    deleteVehicleTrip(requestParameters: DeleteVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns all monetary account payments
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {boolean} [search] Filter for anything that includes the search criterea
     * @param {boolean} [unprocessed] Filter for unprocessed payments (true) or processed payments (false), if not provided all payments, including processed payments are returned
     * @param {number} [amount] the amount of the payment
     * @param {string} [relation] Relation that is connected to this payment
     * @param {string} [creditLoan] Credit loan Id that is connected to this payment
     * @param {string} [debitLoan] Debit loan Id that is connected to this payment
     * @param {string} [currentAccount] Current account Id that is connected to this payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllMonetaryAccountPaymentsRaw(requestParameters: GetAllMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMonetaryAccountPayments200Response>>;

    /**
     * Returns all monetary account payments
     */
    getAllMonetaryAccountPayments(requestParameters: GetAllMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMonetaryAccountPayments200Response>;

    /**
     * Returns a asset
     * @param {string} profileId The id of the profile
     * @param {string} assetId The id of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAssetRaw(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>>;

    /**
     * Returns a asset
     */
    getAsset(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset>;

    /**
     * Returns all assets
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAssetsRaw(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssets200Response>>;

    /**
     * Returns all assets
     */
    getAssets(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssets200Response>;

    /**
     * Returns a chat
     * @param {string} profileId The id of the profile
     * @param {string} chatId The id of the chat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getChatRaw(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>>;

    /**
     * Returns a chat
     */
    getChat(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response>;

    /**
     * Returns a credit loan
     * @param {string} profileId The id of the profile
     * @param {string} creditLoanId The id of the loan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCreditLoanRaw(requestParameters: GetCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>>;

    /**
     * Returns a credit loan
     */
    getCreditLoan(requestParameters: GetCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan>;

    /**
     * Returns all loans
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] Relation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCreditLoansRaw(requestParameters: GetCreditLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCreditLoans200Response>>;

    /**
     * Returns all loans
     */
    getCreditLoans(requestParameters: GetCreditLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCreditLoans200Response>;

    /**
     * Returns a current account
     * @param {string} profileId The id of the profile
     * @param {string} currentAccountId The id of the current account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCurrentAccountRaw(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentAccount>>;

    /**
     * Returns a current account
     */
    getCurrentAccount(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentAccount>;

    /**
     * Returns all current accounts
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] Relation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCurrentAccountsRaw(requestParameters: GetCurrentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentAccounts200Response>>;

    /**
     * Returns all current accounts
     */
    getCurrentAccounts(requestParameters: GetCurrentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentAccounts200Response>;

    /**
     * Returns a debit loan
     * @param {string} profileId The id of the profile
     * @param {string} debitLoanId The id of the loan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDebitLoanRaw(requestParameters: GetDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>>;

    /**
     * Returns a debit loan
     */
    getDebitLoan(requestParameters: GetDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan>;

    /**
     * Returns all loans
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] Relation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDebitLoansRaw(requestParameters: GetDebitLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDebitLoans200Response>>;

    /**
     * Returns all loans
     */
    getDebitLoans(requestParameters: GetDebitLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDebitLoans200Response>;

    /**
     * Returns a employees
     * @param {string} profileId The id of the profile
     * @param {string} employeeId The ID of the employee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEmployeeRaw(requestParameters: GetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>>;

    /**
     * Returns a employees
     */
    getEmployee(requestParameters: GetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee>;

    /**
     * Returns all employees
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [name] Broad search on all the name fields to filter to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEmployeesRaw(requestParameters: GetEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmployees200Response>>;

    /**
     * Returns all employees
     */
    getEmployees(requestParameters: GetEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmployees200Response>;

    /**
     * Returns all expense categories
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getExpenseCategoriesRaw(requestParameters: GetExpenseCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>>;

    /**
     * Returns all expense categories
     */
    getExpenseCategories(requestParameters: GetExpenseCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>>;

    /**
     * Returns a expense category
     * @param {string} profileId The id of the profile
     * @param {string} expenseCategoryId The ID of the expense category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getExpenseCategoryRaw(requestParameters: GetExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseCategory>>;

    /**
     * Returns a expense category
     */
    getExpenseCategory(requestParameters: GetExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseCategory>;

    /**
     * Returns all memorial entries
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [ledger] The ledger you want to search
     * @param {Date} [date] The date you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMemorialEntriesRaw(requestParameters: GetMemorialEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMemorialEntries200Response>>;

    /**
     * Returns all memorial entries
     */
    getMemorialEntries(requestParameters: GetMemorialEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMemorialEntries200Response>;

    /**
     * Returns a memorial entry
     * @param {string} profileId The id of the profile
     * @param {string} memorialEntryId The id of the memorial entry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMemorialEntryRaw(requestParameters: GetMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemorialEntry>>>;

    /**
     * Returns a memorial entry
     */
    getMemorialEntry(requestParameters: GetMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemorialEntry>>;

    /**
     * Returns a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountRaw(requestParameters: GetMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>>;

    /**
     * Returns a monetary account
     */
    getMonetaryAccount(requestParameters: GetMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount>;

    /**
     * Returns a monetary account auto process
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountAutoProcessId The ID of the monetary account auto process
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountAutoProcessRaw(requestParameters: GetMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>>;

    /**
     * Returns a monetary account auto process
     */
    getMonetaryAccountAutoProcess(requestParameters: GetMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess>;

    /**
     * Returns all monetary account auto processes
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountAutoProcessesRaw(requestParameters: GetMonetaryAccountAutoProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccountAutoProcess>>>;

    /**
     * Returns all monetary account auto processes
     */
    getMonetaryAccountAutoProcesses(requestParameters: GetMonetaryAccountAutoProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccountAutoProcess>>;

    /**
     * Create an openbanking request
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountOpenbankingAuthorisationRaw(requestParameters: GetMonetaryAccountOpenbankingAuthorisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonetaryAccountOpenbankingAuthorisation200Response>>;

    /**
     * Create an openbanking request
     */
    getMonetaryAccountOpenbankingAuthorisation(requestParameters: GetMonetaryAccountOpenbankingAuthorisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonetaryAccountOpenbankingAuthorisation200Response>;

    /**
     * Returns a monetary account payment
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountPaymentRaw(requestParameters: GetMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountPayment>>;

    /**
     * Returns a monetary account payment
     */
    getMonetaryAccountPayment(requestParameters: GetMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountPayment>;

    /**
     * Returns all monetary account payments
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {boolean} [search] Filter for anything that includes the search criterea
     * @param {boolean} [unprocessed] Filter for unprocessed payments (true) or processed payments (false), if not provided all payments, including processed payments are returned
     * @param {number} [amount] the amount of the payment
     * @param {string} [relation] Relation that is connected to this payment
     * @param {string} [creditLoan] Credit loan Id that is connected to this payment
     * @param {string} [debitLoan] Debit loan Id that is connected to this payment
     * @param {string} [currentAccount] Current account Id that is connected to this payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountPaymentsRaw(requestParameters: GetMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMonetaryAccountPayments200Response>>;

    /**
     * Returns all monetary account payments
     */
    getMonetaryAccountPayments(requestParameters: GetMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMonetaryAccountPayments200Response>;

    /**
     * Returns all monetary accounts
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonetaryAccountsRaw(requestParameters: GetMonetaryAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccount>>>;

    /**
     * Returns all monetary accounts
     */
    getMonetaryAccounts(requestParameters: GetMonetaryAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccount>>;

    /**
     * Returns the VAT filing data
     * @param {string} profileId The id of the profile
     * @param {Date} from From date of the VAT filing
     * @param {Date} to To date of the VAT filing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNLVATRaw(requestParameters: GetNLVATRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NLVATFiling>>>;

    /**
     * Returns the VAT filing data
     */
    getNLVAT(requestParameters: GetNLVATRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NLVATFiling>>;

    /**
     * Returns the VAT filing data
     * @param {string} profileId The id of the profile
     * @param {string} nlVATFilingId The ID of the NL VAT filing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNLVATFilingRaw(requestParameters: GetNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NLVATFiling>>;

    /**
     * Returns the VAT filing data
     */
    getNLVATFiling(requestParameters: GetNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NLVATFiling>;

    /**
     * Returns the VAT filing data
     * @param {string} profileId The id of the profile
     * @param {string} nlVATFilingId The ID of the NL VAT filing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNLVATFilingPDFRaw(requestParameters: GetNLVATFilingPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Returns the VAT filing data
     */
    getNLVATFilingPDF(requestParameters: GetNLVATFilingPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns the VAT filing data
     * @param {string} profileId The id of the profile
     * @param {Date} from From date of the VAT filing
     * @param {Date} to To date of the VAT filing
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNLVatDataRaw(requestParameters: GetNLVatDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNLVatData200Response>>;

    /**
     * Returns the VAT filing data
     */
    getNLVatData(requestParameters: GetNLVatDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNLVatData200Response>;

    /**
     * Returns a process document
     * @param {string} profileId The id of the profile
     * @param {string} processDocumentId The ID of the process document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProcessDocumentRaw(requestParameters: GetProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>>;

    /**
     * Returns a process document
     */
    getProcessDocument(requestParameters: GetProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument>;

    /**
     * Returns a process document attachment file
     * @param {string} profileId The id of the profile
     * @param {string} processDocumentId The ID of the process document
     * @param {string} id ID of the attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProcessDocumentAttachmentRaw(requestParameters: GetProcessDocumentAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Returns a process document attachment file
     */
    getProcessDocumentAttachment(requestParameters: GetProcessDocumentAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns all process documents
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {boolean} [processed] Boolean type to indicate if the document is processing
     * @param {boolean} [processing] Boolean type to indicate if the document is processing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProcessDocumentsRaw(requestParameters: GetProcessDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProcessDocuments200Response>>;

    /**
     * Returns all process documents
     */
    getProcessDocuments(requestParameters: GetProcessDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProcessDocuments200Response>;

    /**
     * Returns a product
     * @param {string} profileId The id of the profile
     * @param {string} productId The ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Returns a product
     */
    getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

    /**
     * Returns all product categories
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProductCategoriesRaw(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>>;

    /**
     * Returns all product categories
     */
    getProductCategories(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>>;

    /**
     * Returns a product category
     * @param {string} profileId The id of the profile
     * @param {string} productCategoryId The id of the product category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProductCategoryRaw(requestParameters: GetProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategory>>;

    /**
     * Returns a product category
     */
    getProductCategory(requestParameters: GetProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategory>;

    /**
     * Returns all products
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [name] Product name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProducts200Response>>;

    /**
     * Returns all products
     */
    getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProducts200Response>;

    /**
     * Returns a profile
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;

    /**
     * Returns a profile
     */
    getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;

    /**
     * Returns a profile account
     * @param {string} profileId The id of the profile
     * @param {string} accountId The ID of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileAccountRaw(requestParameters: GetProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Returns a profile account
     */
    getProfileAccount(requestParameters: GetProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * Returns all relations
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [name] Broad search on all the name fields to filter to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileAccountsRaw(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileAccounts200Response>>;

    /**
     * Returns all relations
     */
    getProfileAccounts(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileAccounts200Response>;

    /**
     * Returns the cash on hand of a profiel
     * @param {string} profileId The id of the profile
     * @param {Date} [start] ISO date as start date
     * @param {Date} [end] ISO date as start date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileAnalyticsCashOnHandRaw(requestParameters: GetProfileAnalyticsCashOnHandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>>;

    /**
     * Returns the cash on hand of a profiel
     */
    getProfileAnalyticsCashOnHand(requestParameters: GetProfileAnalyticsCashOnHandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>;

    /**
     * Returns the expenses of a profiel
     * @param {string} profileId The id of the profile
     * @param {Date} [start] ISO date as start date
     * @param {Date} [end] ISO date as start date
     * @param {'date' | 'week' | 'month'} [group] Group by a specific period
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileAnalyticsExpensesRaw(requestParameters: GetProfileAnalyticsExpensesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>>;

    /**
     * Returns the expenses of a profiel
     */
    getProfileAnalyticsExpenses(requestParameters: GetProfileAnalyticsExpensesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>;

    /**
     * Returns the revenue of a profiel
     * @param {string} profileId The id of the profile
     * @param {Date} [start] ISO date as start date
     * @param {Date} [end] ISO date as start date
     * @param {'date' | 'week' | 'month'} [group] Group by a specific period
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileAnalyticsRevenueRaw(requestParameters: GetProfileAnalyticsRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>>;

    /**
     * Returns the revenue of a profiel
     */
    getProfileAnalyticsRevenue(requestParameters: GetProfileAnalyticsRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>;

    /**
     * Returns all aggregated financial statement column balance
     * @param {string} profileId The id of the profile
     * @param {Date} [start] ISO date as start date
     * @param {Date} [end] ISO date as start date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileFinancialColumnBalanceRaw(requestParameters: GetProfileFinancialColumnBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileFinancialColumnBalance200Response>>;

    /**
     * Returns all aggregated financial statement column balance
     */
    getProfileFinancialColumnBalance(requestParameters: GetProfileFinancialColumnBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileFinancialColumnBalance200Response>;

    /**
     * Returns all bookings of a all ledgers
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileFinancialLedgerRaw(requestParameters: GetProfileFinancialLedgerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProfileFinancialLedger200ResponseInner>>>;

    /**
     * Returns all bookings of a all ledgers
     */
    getProfileFinancialLedger(requestParameters: GetProfileFinancialLedgerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProfileFinancialLedger200ResponseInner>>;

    /**
     * Returns all aggregated financial statement fields
     * @param {string} profileId The id of the profile
     * @param {Date} [start] ISO date as start date
     * @param {Date} [end] ISO date as start date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileFinancialStatementRaw(requestParameters: GetProfileFinancialStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>>;

    /**
     * Returns all aggregated financial statement fields
     */
    getProfileFinancialStatement(requestParameters: GetProfileFinancialStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }>;

    /**
     * Returns all aggregated financial statement fields
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileLedgerChartRaw(requestParameters: GetProfileLedgerChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileLedgerChart200Response>>;

    /**
     * Returns all aggregated financial statement fields
     */
    getProfileLedgerChart(requestParameters: GetProfileLedgerChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileLedgerChart200Response>;

    /**
     * Returns a profile metadata
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfileMetadataRaw(requestParameters: GetProfileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileMetadata200Response>>;

    /**
     * Returns a profile metadata
     */
    getProfileMetadata(requestParameters: GetProfileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileMetadata200Response>;

    /**
     * Returns a list of all the profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getProfilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Profile>>>;

    /**
     * Returns a list of all the profiles
     */
    getProfiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Profile>>;

    /**
     * Returns a purchase invoices
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoiceRaw(requestParameters: GetPurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>>;

    /**
     * Returns a purchase invoices
     */
    getPurchaseInvoice(requestParameters: GetPurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice>;

    /**
     * Returns a purchase invoice line of a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {string} purchaseInvoiceLineId The ID of the purchase invoice line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoiceLineRaw(requestParameters: GetPurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>>;

    /**
     * Returns a purchase invoice line of a purchase invoice
     */
    getPurchaseInvoiceLine(requestParameters: GetPurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine>;

    /**
     * Returns all purchase invoice lines of a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoiceLinesRaw(requestParameters: GetPurchaseInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PurchaseInvoiceLine>>>;

    /**
     * Returns all purchase invoice lines of a purchase invoice
     */
    getPurchaseInvoiceLines(requestParameters: GetPurchaseInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PurchaseInvoiceLine>>;

    /**
     * Returns all purchase invoices
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] Non empty string with the ID of the relation to filter
     * @param {string} [invoiceId] Invoice ID to filter
     * @param {Date} [date] Invoice date to filter
     * @param {boolean} [overdue] If the invoice is overdue to filter
     * @param {boolean} [paid] If the invoice is paid to filter
     * @param {boolean} [concept] If the invoice is in an concept invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPurchaseInvoicesRaw(requestParameters: GetPurchaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPurchaseInvoices200Response>>;

    /**
     * Returns all purchase invoices
     */
    getPurchaseInvoices(requestParameters: GetPurchaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPurchaseInvoices200Response>;

    /**
     * Returns a quote
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuoteRaw(requestParameters: GetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>>;

    /**
     * Returns a quote
     */
    getQuote(requestParameters: GetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote>;

    /**
     * Returns an quote line
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {string} quoteLineId The id of the quote line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuoteLineRaw(requestParameters: GetQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>>;

    /**
     * Returns an quote line
     */
    getQuoteLine(requestParameters: GetQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine>;

    /**
     * Returns all quote lines of an quote
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuoteLinesRaw(requestParameters: GetQuoteLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Quote>>>;

    /**
     * Returns all quote lines of an quote
     */
    getQuoteLines(requestParameters: GetQuoteLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Quote>>;

    /**
     * Retrieves a preview of the html content of the email
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuotePreviewEmailRaw(requestParameters: GetQuotePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the email
     */
    getQuotePreviewEmail(requestParameters: GetQuotePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the html content of the quote itself
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuotePreviewHTMLRaw(requestParameters: GetQuotePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the quote itself
     */
    getQuotePreviewHTML(requestParameters: GetQuotePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the PDF content of the quote itself
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuotePreviewPDFRaw(requestParameters: GetQuotePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieves a preview of the PDF content of the quote itself
     */
    getQuotePreviewPDF(requestParameters: GetQuotePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns all quotes
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] ID of the relation to filter to
     * @param {string} [product] Filter invoices that contain this product ID
     * @param {string} [quoteId] Quote ID to search
     * @param {Date} [date] Quote date
     * @param {boolean} [concept] If the quote is in an concept quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getQuotesRaw(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuotes200Response>>;

    /**
     * Returns all quotes
     */
    getQuotes(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuotes200Response>;

    /**
     * Returns a relations
     * @param {string} profileId The id of the profile
     * @param {string} relationId The ID of the relation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelationRaw(requestParameters: GetRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>>;

    /**
     * Returns a relations
     */
    getRelation(requestParameters: GetRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation>;

    /**
     * Returns all relations
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [name] Broad search on all the name fields to filter to
     * @param {Array<'supplier' | 'customer' | 'debtor' | 'creditor' | 'current'>} [tags] Filters the relations based on tags
     * @param {string} [vatNumber] VAT number to filter to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelationsRaw(requestParameters: GetRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRelations200Response>>;

    /**
     * Returns all relations
     */
    getRelations(requestParameters: GetRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRelations200Response>;

    /**
     * Returns all revenue categories
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRevenueCategoriesRaw(requestParameters: GetRevenueCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>>;

    /**
     * Returns all revenue categories
     */
    getRevenueCategories(requestParameters: GetRevenueCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>>;

    /**
     * Returns a revenue category
     * @param {string} profileId The id of the profile
     * @param {string} revenueCategoryId The ID of the revenue category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRevenueCategoryRaw(requestParameters: GetRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueCategory>>;

    /**
     * Returns a revenue category
     */
    getRevenueCategory(requestParameters: GetRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueCategory>;

    /**
     * Returns a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoiceRaw(requestParameters: GetSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>>;

    /**
     * Returns a sales invoice
     */
    getSalesInvoice(requestParameters: GetSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice>;

    /**
     * Returns a sales invoice line of a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {string} salesInvoiceLineId The id of the sales invoice line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoiceLineRaw(requestParameters: GetSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>>;

    /**
     * Returns a sales invoice line of a sales invoice
     */
    getSalesInvoiceLine(requestParameters: GetSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine>;

    /**
     * Returns all sales invoice lines of a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoiceLinesRaw(requestParameters: GetSalesInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoiceLine>>>;

    /**
     * Returns all sales invoice lines of a sales invoice
     */
    getSalesInvoiceLines(requestParameters: GetSalesInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoiceLine>>;

    /**
     * Retrieves a preview of the html content of the email
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePreviewEmailRaw(requestParameters: GetSalesInvoicePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the email
     */
    getSalesInvoicePreviewEmail(requestParameters: GetSalesInvoicePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePreviewHTMLRaw(requestParameters: GetSalesInvoicePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    getSalesInvoicePreviewHTML(requestParameters: GetSalesInvoicePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicePreviewPDFRaw(requestParameters: GetSalesInvoicePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    getSalesInvoicePreviewPDF(requestParameters: GetSalesInvoicePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Returns all sales invoices
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [subscription] Subscription ID to filter to
     * @param {string} [relation] ID of the relation to filter to
     * @param {string} [product] Filter invoices that contain this product ID
     * @param {string} [invoiceId] Invoice ID to search
     * @param {Date} [date] Invoice date
     * @param {boolean} [overdue] If the invoice is overdue
     * @param {boolean} [paid] If the invoice is paid
     * @param {boolean} [credit] If the invoice is an credit invoice
     * @param {boolean} [credited] If the invoice has already been credited
     * @param {boolean} [concept] If the invoice is in an concept invoice
     * @param {string} [currency] The currency of the sales invoice
     * @param {number} [amount] The amount the invoice should equal to
     * @param {number} [amountLte] The amount the invoice should be less than or equal to
     * @param {number} [amountGte] The amount the invoice should be greater than or equal to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSalesInvoicesRaw(requestParameters: GetSalesInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSalesInvoices200Response>>;

    /**
     * Returns all sales invoices
     */
    getSalesInvoices(requestParameters: GetSalesInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSalesInvoices200Response>;

    /**
     * Returns all stock categories
     * @param {string} profileId The id of the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStockCategoriesRaw(requestParameters: GetStockCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>>;

    /**
     * Returns all stock categories
     */
    getStockCategories(requestParameters: GetStockCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>>;

    /**
     * Returns a stock category
     * @param {string} profileId The id of the profile
     * @param {string} stockCategoryId The ID of the balance category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStockcategoryRaw(requestParameters: GetStockcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockCategory>>;

    /**
     * Returns a stock category
     */
    getStockcategory(requestParameters: GetStockcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockCategory>;

    /**
     * Returns a subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>>;

    /**
     * Returns a subscription
     */
    getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription>;

    /**
     * Returns a subscription line
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {string} subscriptionLineId The ID of the subscription line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionLineRaw(requestParameters: GetSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLine>>;

    /**
     * Returns a subscription line
     */
    getSubscriptionLine(requestParameters: GetSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLine>;

    /**
     * Returns all subscription lines
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionLinesRaw(requestParameters: GetSubscriptionLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionLine>>>;

    /**
     * Returns all subscription lines
     */
    getSubscriptionLines(requestParameters: GetSubscriptionLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionLine>>;

    /**
     * Returns all subscriptions
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [relation] Relation ID to filter to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionsRaw(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptions200Response>>;

    /**
     * Returns all subscriptions
     */
    getSubscriptions(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptions200Response>;

    /**
     * Returns a vehicle
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVehicleRaw(requestParameters: GetVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>>;

    /**
     * Returns a vehicle
     */
    getVehicle(requestParameters: GetVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle>;

    /**
     * Returns a vehicle trip
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {string} vehicleTripId The id of the vehicle trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVehicleTripRaw(requestParameters: GetVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>>;

    /**
     * Returns a vehicle trip
     */
    getVehicleTrip(requestParameters: GetVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip>;

    /**
     * Returns all vehicles trips
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVehicleTripsRaw(requestParameters: GetVehicleTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVehicleTrips200Response>>;

    /**
     * Returns all vehicles trips
     */
    getVehicleTrips(requestParameters: GetVehicleTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVehicleTrips200Response>;

    /**
     * Returns all vehicles
     * @param {string} profileId The id of the profile
     * @param {number} [page] Number of the page, starting at 0
     * @param {number} [size] The number of resourced returned in one single page.
     * @param {string} [asset] Asset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVehiclesRaw(requestParameters: GetVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVehicles200Response>>;

    /**
     * Returns all vehicles
     */
    getVehicles(requestParameters: GetVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVehicles200Response>;

    /**
     * Imports an CAMT053 file into a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {ImportMonetaryAccountCAMT053Request} [importMonetaryAccountCAMT053Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    importMonetaryAccountCAMT053Raw(requestParameters: ImportMonetaryAccountCAMT053OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Imports an CAMT053 file into a monetary account
     */
    importMonetaryAccountCAMT053(requestParameters: ImportMonetaryAccountCAMT053OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Imports an MT940 file into a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {ImportMonetaryAccountMT940Request} [importMonetaryAccountMT940Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    importMonetaryAccountMT940Raw(requestParameters: ImportMonetaryAccountMT940OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Imports an MT940 file into a monetary account
     */
    importMonetaryAccountMT940(requestParameters: ImportMonetaryAccountMT940OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentCreditLoanRequest} [processMonetaryAccountPaymentCreditLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentCreditLoanRaw(requestParameters: ProcessMonetaryAccountPaymentCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentCreditLoan(requestParameters: ProcessMonetaryAccountPaymentCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentCurrentAccountRequest} [processMonetaryAccountPaymentCurrentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentCurrentAccountRaw(requestParameters: ProcessMonetaryAccountPaymentCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentCurrentAccount(requestParameters: ProcessMonetaryAccountPaymentCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentDebitLoanRequest} [processMonetaryAccountPaymentDebitLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentDebitLoanRaw(requestParameters: ProcessMonetaryAccountPaymentDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentDebitLoan(requestParameters: ProcessMonetaryAccountPaymentDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentLedgerRequest} [processMonetaryAccountPaymentLedgerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentLedgerRaw(requestParameters: ProcessMonetaryAccountPaymentLedgerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentLedger(requestParameters: ProcessMonetaryAccountPaymentLedgerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentPurchaseInvoiceRequest} [processMonetaryAccountPaymentPurchaseInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentPurchaseInvoiceRaw(requestParameters: ProcessMonetaryAccountPaymentPurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentPurchaseInvoice(requestParameters: ProcessMonetaryAccountPaymentPurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentRelationRequest} [processMonetaryAccountPaymentRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentRelationRaw(requestParameters: ProcessMonetaryAccountPaymentRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentRelation(requestParameters: ProcessMonetaryAccountPaymentRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {boolean} [unprocess] If the payment is already processed, enter true to unprocess it before processing it again, otherwise you will get an error
     * @param {ProcessMonetaryAccountPaymentSalesInvoiceRequest} [processMonetaryAccountPaymentSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    processMonetaryAccountPaymentSalesInvoiceRaw(requestParameters: ProcessMonetaryAccountPaymentSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a monetary account
     */
    processMonetaryAccountPaymentSalesInvoice(requestParameters: ProcessMonetaryAccountPaymentSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Send a quote via email
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {SendSalesInvoiceRequest} [sendSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sendQuoteRaw(requestParameters: SendQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send a quote via email
     */
    sendQuote(requestParameters: SendQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Send a sales invoice via email
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {SendSalesInvoiceRequest} [sendSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sendSalesInvoiceRaw(requestParameters: SendSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send a sales invoice via email
     */
    sendSalesInvoice(requestParameters: SendSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Submits a process document for processing
     * @param {string} profileId The id of the profile
     * @param {string} processDocumentId The ID of the process document
     * @param {SubmitProcessDocumentRequest} [submitProcessDocumentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    submitProcessDocumentRaw(requestParameters: SubmitProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>>;

    /**
     * Submits a process document for processing
     */
    submitProcessDocument(requestParameters: SubmitProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument>;

    /**
     * Updates a monetary account auto process
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountAutoProcessId The ID of the monetary account auto process
     * @param {UpateMonetaryAccountAutoProcessRequest} [upateMonetaryAccountAutoProcessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    upateMonetaryAccountAutoProcessRaw(requestParameters: UpateMonetaryAccountAutoProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>>;

    /**
     * Updates a monetary account auto process
     */
    upateMonetaryAccountAutoProcess(requestParameters: UpateMonetaryAccountAutoProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess>;

    /**
     * Updates a asset
     * @param {string} profileId The id of the profile
     * @param {string} assetId The id of the asset
     * @param {CreateAssetRequest} [createAssetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateAssetRaw(requestParameters: UpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>>;

    /**
     * Updates a asset
     */
    updateAsset(requestParameters: UpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset>;

    /**
     * Updates a chat
     * @param {string} profileId The id of the profile
     * @param {string} chatId The id of the chat
     * @param {CreateChatRequest} [createChatRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateChatRaw(requestParameters: UpdateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>>;

    /**
     * Updates a chat
     */
    updateChat(requestParameters: UpdateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response>;

    /**
     * Updates a credit loan
     * @param {string} profileId The id of the profile
     * @param {string} creditLoanId The id of the loan
     * @param {UpdateCreditLoanRequest} [updateCreditLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateCreditLoanRaw(requestParameters: UpdateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>>;

    /**
     * Updates a credit loan
     */
    updateCreditLoan(requestParameters: UpdateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan>;

    /**
     * Updates a current account
     * @param {string} profileId The id of the profile
     * @param {string} currentAccountId The id of the current account
     * @param {UpdateCurrentAccountRequest} [updateCurrentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateCurrentAccountRaw(requestParameters: UpdateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>>;

    /**
     * Updates a current account
     */
    updateCurrentAccount(requestParameters: UpdateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan>;

    /**
     * Updates a debit loan
     * @param {string} profileId The id of the profile
     * @param {string} debitLoanId The id of the loan
     * @param {CreateDebitLoanRequest} [createDebitLoanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateDebitLoanRaw(requestParameters: UpdateDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>>;

    /**
     * Updates a debit loan
     */
    updateDebitLoan(requestParameters: UpdateDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan>;

    /**
     * Updates a relations
     * @param {string} profileId The id of the profile
     * @param {string} employeeId The ID of the employee
     * @param {CreateEmployeeRequest} [createEmployeeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateEmployeeRaw(requestParameters: UpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>>;

    /**
     * Updates a relations
     */
    updateEmployee(requestParameters: UpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee>;

    /**
     * Updates a expense category
     * @param {string} profileId The id of the profile
     * @param {string} expenseCategoryId The ID of the expense category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateExpenseCategoryRaw(requestParameters: UpdateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>>;

    /**
     * Updates a expense category
     */
    updateExpenseCategory(requestParameters: UpdateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>>;

    /**
     * Updates a memorial entry
     * @param {string} profileId The id of the profile
     * @param {string} memorialEntryId The id of the memorial entry
     * @param {CreateMemorialEntryRequest} [createMemorialEntryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateMemorialEntryRaw(requestParameters: UpdateMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemorialEntry>>>;

    /**
     * Updates a memorial entry
     */
    updateMemorialEntry(requestParameters: UpdateMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemorialEntry>>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {CreateMonetaryAccountRequest} [createMonetaryAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateMonetaryAccountRaw(requestParameters: UpdateMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>>;

    /**
     * Updates a monetary account
     */
    updateMonetaryAccount(requestParameters: UpdateMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount>;

    /**
     * Updates a monetary account
     * @param {string} profileId The id of the profile
     * @param {string} monetaryAccountId The ID of the monetary account
     * @param {string} monetaryAccountPaymentId The ID of the monetary account payment
     * @param {CreateMonetaryAccountPaymentRequestInner} [createMonetaryAccountPaymentRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateMonetaryAccountPaymentRaw(requestParameters: UpdateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountPayment>>;

    /**
     * Updates a monetary account
     */
    updateMonetaryAccountPayment(requestParameters: UpdateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountPayment>;

    /**
     * Updates a process document
     * @param {string} profileId The id of the profile
     * @param {string} processDocumentId The ID of the process document
     * @param {CreateProcessDocumentRequest} [createProcessDocumentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProcessDocumentRaw(requestParameters: UpdateProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>>;

    /**
     * Updates a process document
     */
    updateProcessDocument(requestParameters: UpdateProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument>;

    /**
     * Updates a product
     * @param {string} profileId The id of the profile
     * @param {string} productId The ID of the product
     * @param {CreateProductRequest} [createProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Updates a product
     */
    updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

    /**
     * Updates a expense category
     * @param {string} profileId The id of the profile
     * @param {string} productCategoryId The id of the product category
     * @param {CreateProductCategoryRequest} [createProductCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProductCategoryRaw(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>>;

    /**
     * Updates a expense category
     */
    updateProductCategory(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>>;

    /**
     * Updates a profile
     * @param {string} profileId The id of the profile
     * @param {UpdateProfileRequest} updateProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;

    /**
     * Updates a profile
     */
    updateProfile(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;

    /**
     * updates a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {CreatePurchaseInvoiceRequest} [createPurchaseInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updatePurchaseInvoiceRaw(requestParameters: UpdatePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>>;

    /**
     * updates a purchase invoice
     */
    updatePurchaseInvoice(requestParameters: UpdatePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice>;

    /**
     * updates a purchase invoice
     * @param {string} profileId The id of the profile
     * @param {string} purchaseInvoiceId The ID assigned by us, of the created purchase invoice
     * @param {string} purchaseInvoiceLineId The ID of the purchase invoice line
     * @param {CreatePurchaseInvoiceLineRequest} [createPurchaseInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updatePurchaseInvoiceLineRaw(requestParameters: UpdatePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>>;

    /**
     * updates a purchase invoice
     */
    updatePurchaseInvoiceLine(requestParameters: UpdatePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine>;

    /**
     * Updates an Quote
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {CreateQuoteRequest} [createQuoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateQuoteRaw(requestParameters: UpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>>;

    /**
     * Updates an Quote
     */
    updateQuote(requestParameters: UpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote>;

    /**
     * Updates an quote line
     * @param {string} profileId The id of the profile
     * @param {string} quoteId The id of the quote
     * @param {string} quoteLineId The id of the quote line
     * @param {CreateSalesInvoiceLineRequest} [createSalesInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateQuoteLineRaw(requestParameters: UpdateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>>;

    /**
     * Updates an quote line
     */
    updateQuoteLine(requestParameters: UpdateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine>;

    /**
     * Updates a relations
     * @param {string} profileId The id of the profile
     * @param {string} relationId The ID of the relation
     * @param {CreateRelationRequest} [createRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateRelationRaw(requestParameters: UpdateRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>>;

    /**
     * Updates a relations
     */
    updateRelation(requestParameters: UpdateRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation>;

    /**
     * Updates a revenue category
     * @param {string} profileId The id of the profile
     * @param {string} revenueCategoryId The ID of the revenue category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateRevenueCategoryRaw(requestParameters: UpdateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>>;

    /**
     * Updates a revenue category
     */
    updateRevenueCategory(requestParameters: UpdateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>>;

    /**
     * creates a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {CreateSalesInvoiceRequest} [createSalesInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateSalesInvoiceRaw(requestParameters: UpdateSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>>;

    /**
     * creates a sales invoice
     */
    updateSalesInvoice(requestParameters: UpdateSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice>;

    /**
     * updates a sales invoice
     * @param {string} profileId The id of the profile
     * @param {string} salesInvoiceId The id of the sales invoice
     * @param {string} salesInvoiceLineId The id of the sales invoice line
     * @param {CreateSalesInvoiceLineRequest} [createSalesInvoiceLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateSalesInvoiceLineRaw(requestParameters: UpdateSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>>;

    /**
     * updates a sales invoice
     */
    updateSalesInvoiceLine(requestParameters: UpdateSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine>;

    /**
     * Updates a stock category
     * @param {string} profileId The id of the profile
     * @param {string} stockCategoryId The ID of the balance category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateStockCategoryRaw(requestParameters: UpdateStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>>;

    /**
     * Updates a stock category
     */
    updateStockCategory(requestParameters: UpdateStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>>;

    /**
     * Updates a subscription
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {CreateSubscriptionRequest} [createSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateSubscriptionRaw(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>>;

    /**
     * Updates a subscription
     */
    updateSubscription(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription>;

    /**
     * Updates a subscription line
     * @param {string} profileId The id of the profile
     * @param {string} subscriptionId The ID of the subscription
     * @param {string} subscriptionLineId The ID of the subscription line
     * @param {CreateSubscriptionLineRequest} [createSubscriptionLineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateSubscriptionLineRaw(requestParameters: UpdateSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLine>>;

    /**
     * Updates a subscription line
     */
    updateSubscriptionLine(requestParameters: UpdateSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLine>;

    /**
     * Updates a vehicle
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {CreateVehicleRequest} [createVehicleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateVehicleRaw(requestParameters: UpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>>;

    /**
     * Updates a vehicle
     */
    updateVehicle(requestParameters: UpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle>;

    /**
     * Updates a vehicle trip
     * @param {string} profileId The id of the profile
     * @param {string} vehicleId The id of the vehicle
     * @param {string} vehicleTripId The id of the vehicle trip
     * @param {CreateVehicleTripRequest} [createVehicleTripRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateVehicleTripRaw(requestParameters: UpdateVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>>;

    /**
     * Updates a vehicle trip
     */
    updateVehicleTrip(requestParameters: UpdateVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Closes a purchase invoice
     */
    async closePurchaseInvoiceRaw(requestParameters: ClosePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling closePurchaseInvoice().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling closePurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/close`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceFromJSON(jsonValue));
    }

    /**
     * Closes a purchase invoice
     */
    async closePurchaseInvoice(requestParameters: ClosePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice> {
        const response = await this.closePurchaseInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Closes a quote
     */
    async closeQuoteRaw(requestParameters: CloseQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling closeQuote().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling closeQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/close`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloseSalesInvoiceRequestToJSON(requestParameters['closeSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Closes a quote
     */
    async closeQuote(requestParameters: CloseQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.closeQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Closes a sales invoice
     */
    async closeSalesInvoiceRaw(requestParameters: CloseSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling closeSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling closeSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/close`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloseSalesInvoiceRequestToJSON(requestParameters['closeSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceFromJSON(jsonValue));
    }

    /**
     * Closes a sales invoice
     */
    async closeSalesInvoice(requestParameters: CloseSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice> {
        const response = await this.closeSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Closes a subscription
     */
    async closeSubscriptionRaw(requestParameters: CloseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling closeSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling closeSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}/close`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Closes a subscription
     */
    async closeSubscription(requestParameters: CloseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.closeSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a asset
     */
    async createAssetRaw(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/assets`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetRequestToJSON(requestParameters['createAssetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Creates a asset
     */
    async createAsset(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.createAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a chat
     */
    async createChatRaw(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/chats`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatRequestToJSON(requestParameters['createChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChat200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a chat
     */
    async createChat(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response> {
        const response = await this.createChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a credit loan
     */
    async createCreditLoanRaw(requestParameters: CreateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createCreditLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/credit-loans`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCreditLoanRequestToJSON(requestParameters['createCreditLoanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditLoanFromJSON(jsonValue));
    }

    /**
     * Creates a credit loan
     */
    async createCreditLoan(requestParameters: CreateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan> {
        const response = await this.createCreditLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a current account
     */
    async createCurrentAccountRaw(requestParameters: CreateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentAccount>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createCurrentAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/current-accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCurrentAccountRequestToJSON(requestParameters['createCurrentAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentAccountFromJSON(jsonValue));
    }

    /**
     * Creates a current account
     */
    async createCurrentAccount(requestParameters: CreateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentAccount> {
        const response = await this.createCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a debit loan
     */
    async createDebitLoanRaw(requestParameters: CreateDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createDebitLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/debit-loans`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDebitLoanRequestToJSON(requestParameters['createDebitLoanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DebitLoanFromJSON(jsonValue));
    }

    /**
     * Creates a debit loan
     */
    async createDebitLoan(requestParameters: CreateDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan> {
        const response = await this.createDebitLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/employees`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmployeeRequestToJSON(requestParameters['createEmployeeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     * Creates an employee
     */
    async createEmployee(requestParameters: CreateEmployeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.createEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an expense category
     */
    async createExpenseCategoryRaw(requestParameters: CreateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createExpenseCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/expense-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStockCategoryRequestToJSON(requestParameters['createStockCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseCategoryFromJSON));
    }

    /**
     * Creates an expense category
     */
    async createExpenseCategory(requestParameters: CreateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>> {
        const response = await this.createExpenseCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a memorial entry
     */
    async createMemorialEntryRaw(requestParameters: CreateMemorialEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemorialEntry>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMemorialEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/memorial-entries`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemorialEntryRequestToJSON(requestParameters['createMemorialEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemorialEntryFromJSON(jsonValue));
    }

    /**
     * Creates a memorial entry
     */
    async createMemorialEntry(requestParameters: CreateMemorialEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemorialEntry> {
        const response = await this.createMemorialEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a monetary account
     */
    async createMonetaryAccountRaw(requestParameters: CreateMonetaryAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMonetaryAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonetaryAccountRequestToJSON(requestParameters['createMonetaryAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountFromJSON(jsonValue));
    }

    /**
     * Creates a monetary account
     */
    async createMonetaryAccount(requestParameters: CreateMonetaryAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount> {
        const response = await this.createMonetaryAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a monetary account auto process
     */
    async createMonetaryAccountAutoProcessRaw(requestParameters: CreateMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling createMonetaryAccountAutoProcess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/auto-processes/{monetaryAccountAutoProcessId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpateMonetaryAccountAutoProcessRequestToJSON(requestParameters['upateMonetaryAccountAutoProcessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountAutoProcessFromJSON(jsonValue));
    }

    /**
     * Creates a monetary account auto process
     */
    async createMonetaryAccountAutoProcess(requestParameters: CreateMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess> {
        const response = await this.createMonetaryAccountAutoProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create purchaseinvoice payment
     */
    async createMonetaryAccountBankPaymentRaw(requestParameters: CreateMonetaryAccountBankPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountBankPayment200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMonetaryAccountBankPayment().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling createMonetaryAccountBankPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/bank/payment`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonetaryAccountBankPaymentRequestToJSON(requestParameters['createMonetaryAccountBankPaymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMonetaryAccountBankPayment200ResponseFromJSON(jsonValue));
    }

    /**
     * Create purchaseinvoice payment
     */
    async createMonetaryAccountBankPayment(requestParameters: CreateMonetaryAccountBankPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountBankPayment200Response> {
        const response = await this.createMonetaryAccountBankPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an openbanking request
     */
    async createMonetaryAccountOpenbankingAuthorisationRaw(requestParameters: CreateMonetaryAccountOpenbankingAuthorisationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountOpenbankingAuthorisation201Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMonetaryAccountOpenbankingAuthorisation().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling createMonetaryAccountOpenbankingAuthorisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/openbanking`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonetaryAccountOpenbankingAuthorisationRequestToJSON(requestParameters['createMonetaryAccountOpenbankingAuthorisationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMonetaryAccountOpenbankingAuthorisation201ResponseFromJSON(jsonValue));
    }

    /**
     * Create an openbanking request
     */
    async createMonetaryAccountOpenbankingAuthorisation(requestParameters: CreateMonetaryAccountOpenbankingAuthorisationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountOpenbankingAuthorisation201Response> {
        const response = await this.createMonetaryAccountOpenbankingAuthorisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a monetary account payment, pass an array if you are booking the payments on a suspense account.
     */
    async createMonetaryAccountPaymentRaw(requestParameters: CreateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccountPayment>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling createMonetaryAccountPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createMonetaryAccountPaymentRequestInner']!.map(CreateMonetaryAccountPaymentRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonetaryAccountPaymentFromJSON));
    }

    /**
     * Creates a monetary account payment, pass an array if you are booking the payments on a suspense account.
     */
    async createMonetaryAccountPayment(requestParameters: CreateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccountPayment>> {
        const response = await this.createMonetaryAccountPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the VAT filing data
     */
    async createNLVATFilingRaw(requestParameters: CreateNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NLVATFiling>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createNLVATFiling().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling createNLVATFiling().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling createNLVATFiling().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/nl/vat`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NLVATFilingFromJSON(jsonValue));
    }

    /**
     * Returns the VAT filing data
     */
    async createNLVATFiling(requestParameters: CreateNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NLVATFiling> {
        const response = await this.createNLVATFilingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a process document
     */
    async createProcessDocumentRaw(requestParameters: CreateProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createProcessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProcessDocumentRequestToJSON(requestParameters['createProcessDocumentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDocumentFromJSON(jsonValue));
    }

    /**
     * Creates a process document
     */
    async createProcessDocument(requestParameters: CreateProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument> {
        const response = await this.createProcessDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a product
     */
    async createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/products`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Creates a product
     */
    async createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an product category
     */
    async createProductCategoryRaw(requestParameters: CreateProductCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createProductCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/product-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductCategoryRequestToJSON(requestParameters['createProductCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductCategoryFromJSON));
    }

    /**
     * Creates an product category
     */
    async createProductCategory(requestParameters: CreateProductCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>> {
        const response = await this.createProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new profile
     */
    async createProfileRaw(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['createProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'createProfileRequest',
                'Required parameter "createProfileRequest" was null or undefined when calling createProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileRequestToJSON(requestParameters['createProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Creates a new profile
     */
    async createProfile(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an relations
     */
    async createProfileAccountRaw(requestParameters: CreateProfileAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createProfileAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileAccountRequestToJSON(requestParameters['createProfileAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Creates an relations
     */
    async createProfileAccount(requestParameters: CreateProfileAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.createProfileAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    async createPurchaseInvoiceRaw(requestParameters: CreatePurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createPurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoiceRequestToJSON(requestParameters['createPurchaseInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceFromJSON(jsonValue));
    }

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    async createPurchaseInvoice(requestParameters: CreatePurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice> {
        const response = await this.createPurchaseInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    async createPurchaseInvoiceFinalRaw(requestParameters: CreatePurchaseInvoiceFinalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createPurchaseInvoiceFinal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices-final`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoiceFinalRequestToJSON(requestParameters['createPurchaseInvoiceFinalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceFromJSON(jsonValue));
    }

    /**
     * Creates an new purchase invoice with the given data, when using this endpoint the purchase invoice also needs to be closed in order to be processed. The purchase invoice will first be in concept and not be processed in the financial statement.
     */
    async createPurchaseInvoiceFinal(requestParameters: CreatePurchaseInvoiceFinalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice> {
        const response = await this.createPurchaseInvoiceFinalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a purchase invoice line
     */
    async createPurchaseInvoiceLineRaw(requestParameters: CreatePurchaseInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createPurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling createPurchaseInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoiceLineRequestToJSON(requestParameters['createPurchaseInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceLineFromJSON(jsonValue));
    }

    /**
     * creates a purchase invoice line
     */
    async createPurchaseInvoiceLine(requestParameters: CreatePurchaseInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine> {
        const response = await this.createPurchaseInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create purchaseinvoice payment
     */
    async createPurchaseInvoicePaymentRaw(requestParameters: CreatePurchaseInvoicePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonetaryAccountBankPayment200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createPurchaseInvoicePayment().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling createPurchaseInvoicePayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/payment`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoicePaymentRequestToJSON(requestParameters['createPurchaseInvoicePaymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMonetaryAccountBankPayment200ResponseFromJSON(jsonValue));
    }

    /**
     * Create purchaseinvoice payment
     */
    async createPurchaseInvoicePayment(requestParameters: CreatePurchaseInvoicePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonetaryAccountBankPayment200Response> {
        const response = await this.createPurchaseInvoicePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an concept Quote
     */
    async createQuoteRaw(requestParameters: CreateQuoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuoteRequestToJSON(requestParameters['createQuoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Creates an concept Quote
     */
    async createQuote(requestParameters: CreateQuoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.createQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an quote line
     */
    async createQuoteLineRaw(requestParameters: CreateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createQuoteLine().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling createQuoteLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceLineRequestToJSON(requestParameters['createSalesInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteLineFromJSON(jsonValue));
    }

    /**
     * Creates an quote line
     */
    async createQuoteLine(requestParameters: CreateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine> {
        const response = await this.createQuoteLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an relations
     */
    async createRelationRaw(requestParameters: CreateRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createRelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationRequestToJSON(requestParameters['createRelationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationFromJSON(jsonValue));
    }

    /**
     * Creates an relations
     */
    async createRelation(requestParameters: CreateRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation> {
        const response = await this.createRelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an relation export
     */
    async createRelationsExportRaw(requestParameters: CreateRelationsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createRelationsExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations/export`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationsImportRequestToJSON(requestParameters['createRelationsImportRequest']),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Creates an relation export
     */
    async createRelationsExport(requestParameters: CreateRelationsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.createRelationsExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an relation import
     */
    async createRelationsImportRaw(requestParameters: CreateRelationsImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Relation>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createRelationsImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations/import`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationsImportRequestToJSON(requestParameters['createRelationsImportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RelationFromJSON));
    }

    /**
     * Creates an relation import
     */
    async createRelationsImport(requestParameters: CreateRelationsImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Relation>> {
        const response = await this.createRelationsImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an revenue category
     */
    async createRevenueCategoryRaw(requestParameters: CreateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createRevenueCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/revenue-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStockCategoryRequestToJSON(requestParameters['createStockCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RevenueCategoryFromJSON));
    }

    /**
     * Creates an revenue category
     */
    async createRevenueCategory(requestParameters: CreateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>> {
        const response = await this.createRevenueCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a sales invoice
     */
    async createSalesInvoiceRaw(requestParameters: CreateSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceRequestToJSON(requestParameters['createSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceFromJSON(jsonValue));
    }

    /**
     * creates a sales invoice
     */
    async createSalesInvoice(requestParameters: CreateSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice> {
        const response = await this.createSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a sales invoice line
     */
    async createSalesInvoiceLineRaw(requestParameters: CreateSalesInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling createSalesInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceLineRequestToJSON(requestParameters['createSalesInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceLineFromJSON(jsonValue));
    }

    /**
     * creates a sales invoice line
     */
    async createSalesInvoiceLine(requestParameters: CreateSalesInvoiceLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine> {
        const response = await this.createSalesInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an sales invoice import
     */
    async createSalesInvoicesImportRaw(requestParameters: CreateSalesInvoicesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoice>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSalesInvoicesImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/import`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationsImportRequestToJSON(requestParameters['createRelationsImportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SalesInvoiceFromJSON));
    }

    /**
     * Creates an sales invoice import
     */
    async createSalesInvoicesImport(requestParameters: CreateSalesInvoicesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoice>> {
        const response = await this.createSalesInvoicesImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an stock category
     */
    async createStockCategoryRaw(requestParameters: CreateStockCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createStockCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/stock-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStockCategoryRequestToJSON(requestParameters['createStockCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockCategoryFromJSON));
    }

    /**
     * Creates an stock category
     */
    async createStockCategory(requestParameters: CreateStockCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>> {
        const response = await this.createStockCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a subscription
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Subscription>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionRequestToJSON(requestParameters['createSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionFromJSON));
    }

    /**
     * Creates a subscription
     */
    async createSubscription(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Subscription>> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a subscription based on a sales invoice
     */
    async createSubscriptionBasedOnSalesInvoiceRaw(requestParameters: CreateSubscriptionBasedOnSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSubscriptionBasedOnSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling createSubscriptionBasedOnSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/subscription`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionBasedOnSalesInvoiceRequestToJSON(requestParameters['createSubscriptionBasedOnSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Creates a subscription based on a sales invoice
     */
    async createSubscriptionBasedOnSalesInvoice(requestParameters: CreateSubscriptionBasedOnSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createSubscriptionBasedOnSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a subscription line
     */
    async createSubscriptionLineRaw(requestParameters: CreateSubscriptionLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionLine>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createSubscriptionLine().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling createSubscriptionLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionLineRequestToJSON(requestParameters['createSubscriptionLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionLineFromJSON));
    }

    /**
     * Creates a subscription line
     */
    async createSubscriptionLine(requestParameters: CreateSubscriptionLineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionLine>> {
        const response = await this.createSubscriptionLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a vehicle
     */
    async createVehicleRaw(requestParameters: CreateVehicleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleRequestToJSON(requestParameters['createVehicleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Creates a vehicle
     */
    async createVehicle(requestParameters: CreateVehicleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.createVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a vehicle trip
     */
    async createVehicleTripRaw(requestParameters: CreateVehicleTripOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling createVehicleTrip().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling createVehicleTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}/trips`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleTripRequestToJSON(requestParameters['createVehicleTripRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleTripFromJSON(jsonValue));
    }

    /**
     * Creates a vehicle trip
     */
    async createVehicleTrip(requestParameters: CreateVehicleTripOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip> {
        const response = await this.createVehicleTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Credits a sales invoice
     */
    async creditSalesInvoiceRaw(requestParameters: CreditSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling creditSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling creditSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/credit`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditSalesInvoiceRequestToJSON(requestParameters['creditSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceFromJSON(jsonValue));
    }

    /**
     * Credits a sales invoice
     */
    async creditSalesInvoice(requestParameters: CreditSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice> {
        const response = await this.creditSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a asset
     */
    async deleteAssetRaw(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteAsset().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling deleteAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/assets/{assetId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a asset
     */
    async deleteAsset(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a credit loan
     */
    async deleteCreditLoanRaw(requestParameters: DeleteCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteCreditLoan().'
            );
        }

        if (requestParameters['creditLoanId'] == null) {
            throw new runtime.RequiredError(
                'creditLoanId',
                'Required parameter "creditLoanId" was null or undefined when calling deleteCreditLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/credit-loans/{creditLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"creditLoanId"}}`, encodeURIComponent(String(requestParameters['creditLoanId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a credit loan
     */
    async deleteCreditLoan(requestParameters: DeleteCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCreditLoanRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a current account
     */
    async deleteCurrentAccountRaw(requestParameters: DeleteCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteCurrentAccount().'
            );
        }

        if (requestParameters['currentAccountId'] == null) {
            throw new runtime.RequiredError(
                'currentAccountId',
                'Required parameter "currentAccountId" was null or undefined when calling deleteCurrentAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/current-accounts/{currentAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"currentAccountId"}}`, encodeURIComponent(String(requestParameters['currentAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a current account
     */
    async deleteCurrentAccount(requestParameters: DeleteCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a debit loan
     */
    async deleteDebitLoanRaw(requestParameters: DeleteDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteDebitLoan().'
            );
        }

        if (requestParameters['debitLoanId'] == null) {
            throw new runtime.RequiredError(
                'debitLoanId',
                'Required parameter "debitLoanId" was null or undefined when calling deleteDebitLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/debit-loans/{debitLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"debitLoanId"}}`, encodeURIComponent(String(requestParameters['debitLoanId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a debit loan
     */
    async deleteDebitLoan(requestParameters: DeleteDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDebitLoanRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a employee
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteEmployee().'
            );
        }

        if (requestParameters['employeeId'] == null) {
            throw new runtime.RequiredError(
                'employeeId',
                'Required parameter "employeeId" was null or undefined when calling deleteEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/employees/{employeeId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters['employeeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a employee
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmployeeRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a expense categroy
     */
    async deleteExpenseCategoryRaw(requestParameters: DeleteExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteExpenseCategory().'
            );
        }

        if (requestParameters['expenseCategoryId'] == null) {
            throw new runtime.RequiredError(
                'expenseCategoryId',
                'Required parameter "expenseCategoryId" was null or undefined when calling deleteExpenseCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/expense-categories/{expenseCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"expenseCategoryId"}}`, encodeURIComponent(String(requestParameters['expenseCategoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a expense categroy
     */
    async deleteExpenseCategory(requestParameters: DeleteExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExpenseCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a memorial entry
     */
    async deleteMemorialEntryRaw(requestParameters: DeleteMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteMemorialEntry().'
            );
        }

        if (requestParameters['memorialEntryId'] == null) {
            throw new runtime.RequiredError(
                'memorialEntryId',
                'Required parameter "memorialEntryId" was null or undefined when calling deleteMemorialEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/memorial-entries/{memorialEntryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"memorialEntryId"}}`, encodeURIComponent(String(requestParameters['memorialEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a memorial entry
     */
    async deleteMemorialEntry(requestParameters: DeleteMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMemorialEntryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a product
     */
    async deleteMonetaryAccountRaw(requestParameters: DeleteMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteMonetaryAccount().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling deleteMonetaryAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a product
     */
    async deleteMonetaryAccount(requestParameters: DeleteMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMonetaryAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a monetary account auto process
     */
    async deleteMonetaryAccountAutoProcessRaw(requestParameters: DeleteMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling deleteMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountAutoProcessId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountAutoProcessId',
                'Required parameter "monetaryAccountAutoProcessId" was null or undefined when calling deleteMonetaryAccountAutoProcess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/auto-processes`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountAutoProcessId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountAutoProcessId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a monetary account auto process
     */
    async deleteMonetaryAccountAutoProcess(requestParameters: DeleteMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMonetaryAccountAutoProcessRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a monetary account payment
     */
    async deleteMonetaryAccountPaymentRaw(requestParameters: DeleteMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling deleteMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling deleteMonetaryAccountPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a monetary account payment
     */
    async deleteMonetaryAccountPayment(requestParameters: DeleteMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMonetaryAccountPaymentRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a process document
     */
    async deleteProcessDocumentRaw(requestParameters: DeleteProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteProcessDocument().'
            );
        }

        if (requestParameters['processDocumentId'] == null) {
            throw new runtime.RequiredError(
                'processDocumentId',
                'Required parameter "processDocumentId" was null or undefined when calling deleteProcessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents/{processDocumentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"processDocumentId"}}`, encodeURIComponent(String(requestParameters['processDocumentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a process document
     */
    async deleteProcessDocument(requestParameters: DeleteProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProcessDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling deleteProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/products/{productId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a product category
     */
    async deleteProductCategoryRaw(requestParameters: DeleteProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteProductCategory().'
            );
        }

        if (requestParameters['productCategoryId'] == null) {
            throw new runtime.RequiredError(
                'productCategoryId',
                'Required parameter "productCategoryId" was null or undefined when calling deleteProductCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/product-categories/{productCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productCategoryId"}}`, encodeURIComponent(String(requestParameters['productCategoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a product category
     */
    async deleteProductCategory(requestParameters: DeleteProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a profile account
     */
    async deleteProfileAccountRaw(requestParameters: DeleteProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteProfileAccount().'
            );
        }

        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling deleteProfileAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/accounts/{accountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a profile account
     */
    async deleteProfileAccount(requestParameters: DeleteProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProfileAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a purchase invoice
     */
    async deletePurchaseInvoiceRaw(requestParameters: DeletePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deletePurchaseInvoice().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling deletePurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a purchase invoice
     */
    async deletePurchaseInvoice(requestParameters: DeletePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePurchaseInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a purchase invoice line
     */
    async deletePurchaseInvoiceLineRaw(requestParameters: DeletePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deletePurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling deletePurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceLineId',
                'Required parameter "purchaseInvoiceLineId" was null or undefined when calling deletePurchaseInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/lines/{purchaseInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))).replace(`{${"purchaseInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceLineId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a purchase invoice line
     */
    async deletePurchaseInvoiceLine(requestParameters: DeletePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePurchaseInvoiceLineRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a quote
     */
    async deleteQuoteRaw(requestParameters: DeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteQuote().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling deleteQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a quote
     */
    async deleteQuote(requestParameters: DeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuoteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a quote line
     */
    async deleteQuoteLineRaw(requestParameters: DeleteQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteQuoteLine().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling deleteQuoteLine().'
            );
        }

        if (requestParameters['quoteLineId'] == null) {
            throw new runtime.RequiredError(
                'quoteLineId',
                'Required parameter "quoteLineId" was null or undefined when calling deleteQuoteLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/lines/{quoteLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))).replace(`{${"quoteLineId"}}`, encodeURIComponent(String(requestParameters['quoteLineId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a quote line
     */
    async deleteQuoteLine(requestParameters: DeleteQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuoteLineRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a relation
     */
    async deleteRelationRaw(requestParameters: DeleteRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteRelation().'
            );
        }

        if (requestParameters['relationId'] == null) {
            throw new runtime.RequiredError(
                'relationId',
                'Required parameter "relationId" was null or undefined when calling deleteRelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations/{relationId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"relationId"}}`, encodeURIComponent(String(requestParameters['relationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a relation
     */
    async deleteRelation(requestParameters: DeleteRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRelationRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a revenue categroy
     */
    async deleteRevenueCategoryRaw(requestParameters: DeleteRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteRevenueCategory().'
            );
        }

        if (requestParameters['revenueCategoryId'] == null) {
            throw new runtime.RequiredError(
                'revenueCategoryId',
                'Required parameter "revenueCategoryId" was null or undefined when calling deleteRevenueCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/revenue-categories/{revenueCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"revenueCategoryId"}}`, encodeURIComponent(String(requestParameters['revenueCategoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a revenue categroy
     */
    async deleteRevenueCategory(requestParameters: DeleteRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRevenueCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a sales invoice
     */
    async deleteSalesInvoiceRaw(requestParameters: DeleteSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling deleteSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a sales invoice
     */
    async deleteSalesInvoice(requestParameters: DeleteSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSalesInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a sales invoice line
     */
    async deleteSalesInvoiceLineRaw(requestParameters: DeleteSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling deleteSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceLineId',
                'Required parameter "salesInvoiceLineId" was null or undefined when calling deleteSalesInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/lines/{salesInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))).replace(`{${"salesInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceLineId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a sales invoice line
     */
    async deleteSalesInvoiceLine(requestParameters: DeleteSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSalesInvoiceLineRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a stock categroy
     */
    async deleteStockCategoryRaw(requestParameters: DeleteStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteStockCategory().'
            );
        }

        if (requestParameters['stockCategoryId'] == null) {
            throw new runtime.RequiredError(
                'stockCategoryId',
                'Required parameter "stockCategoryId" was null or undefined when calling deleteStockCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/stock-categories/{stockCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"stockCategoryId"}}`, encodeURIComponent(String(requestParameters['stockCategoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a stock categroy
     */
    async deleteStockCategory(requestParameters: DeleteStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStockCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a subscription
     */
    async deleteSubscriptionRaw(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling deleteSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSubscriptionRequestToJSON(requestParameters['deleteSubscriptionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a subscription
     */
    async deleteSubscription(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a vehicle
     */
    async deleteVehicleRaw(requestParameters: DeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteVehicle().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling deleteVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a vehicle
     */
    async deleteVehicle(requestParameters: DeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVehicleRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a vehicle trip
     */
    async deleteVehicleTripRaw(requestParameters: DeleteVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteVehicleTrip().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling deleteVehicleTrip().'
            );
        }

        if (requestParameters['vehicleTripId'] == null) {
            throw new runtime.RequiredError(
                'vehicleTripId',
                'Required parameter "vehicleTripId" was null or undefined when calling deleteVehicleTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}/trips/{vehicleTripId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))).replace(`{${"vehicleTripId"}}`, encodeURIComponent(String(requestParameters['vehicleTripId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a vehicle trip
     */
    async deleteVehicleTrip(requestParameters: DeleteVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVehicleTripRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all monetary account payments
     */
    async getAllMonetaryAccountPaymentsRaw(requestParameters: GetAllMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMonetaryAccountPayments200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getAllMonetaryAccountPayments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['unprocessed'] != null) {
            queryParameters['unprocessed'] = requestParameters['unprocessed'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        if (requestParameters['creditLoan'] != null) {
            queryParameters['credit-loan'] = requestParameters['creditLoan'];
        }

        if (requestParameters['debitLoan'] != null) {
            queryParameters['debit-loan'] = requestParameters['debitLoan'];
        }

        if (requestParameters['currentAccount'] != null) {
            queryParameters['current-account'] = requestParameters['currentAccount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-account-payments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllMonetaryAccountPayments200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all monetary account payments
     */
    async getAllMonetaryAccountPayments(requestParameters: GetAllMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMonetaryAccountPayments200Response> {
        const response = await this.getAllMonetaryAccountPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a asset
     */
    async getAssetRaw(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getAsset().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling getAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/assets/{assetId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Returns a asset
     */
    async getAsset(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.getAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all assets
     */
    async getAssetsRaw(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssets200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getAssets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/assets`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssets200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all assets
     */
    async getAssets(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssets200Response> {
        const response = await this.getAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a chat
     */
    async getChatRaw(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getChat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/chats/{chatId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChat200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a chat
     */
    async getChat(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response> {
        const response = await this.getChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a credit loan
     */
    async getCreditLoanRaw(requestParameters: GetCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getCreditLoan().'
            );
        }

        if (requestParameters['creditLoanId'] == null) {
            throw new runtime.RequiredError(
                'creditLoanId',
                'Required parameter "creditLoanId" was null or undefined when calling getCreditLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/credit-loans/{creditLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"creditLoanId"}}`, encodeURIComponent(String(requestParameters['creditLoanId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditLoanFromJSON(jsonValue));
    }

    /**
     * Returns a credit loan
     */
    async getCreditLoan(requestParameters: GetCreditLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan> {
        const response = await this.getCreditLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all loans
     */
    async getCreditLoansRaw(requestParameters: GetCreditLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCreditLoans200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getCreditLoans().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/credit-loans`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCreditLoans200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all loans
     */
    async getCreditLoans(requestParameters: GetCreditLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCreditLoans200Response> {
        const response = await this.getCreditLoansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a current account
     */
    async getCurrentAccountRaw(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentAccount>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getCurrentAccount().'
            );
        }

        if (requestParameters['currentAccountId'] == null) {
            throw new runtime.RequiredError(
                'currentAccountId',
                'Required parameter "currentAccountId" was null or undefined when calling getCurrentAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/current-accounts/{currentAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"currentAccountId"}}`, encodeURIComponent(String(requestParameters['currentAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentAccountFromJSON(jsonValue));
    }

    /**
     * Returns a current account
     */
    async getCurrentAccount(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentAccount> {
        const response = await this.getCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all current accounts
     */
    async getCurrentAccountsRaw(requestParameters: GetCurrentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentAccounts200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getCurrentAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/current-accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentAccounts200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all current accounts
     */
    async getCurrentAccounts(requestParameters: GetCurrentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentAccounts200Response> {
        const response = await this.getCurrentAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a debit loan
     */
    async getDebitLoanRaw(requestParameters: GetDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getDebitLoan().'
            );
        }

        if (requestParameters['debitLoanId'] == null) {
            throw new runtime.RequiredError(
                'debitLoanId',
                'Required parameter "debitLoanId" was null or undefined when calling getDebitLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/debit-loans/{debitLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"debitLoanId"}}`, encodeURIComponent(String(requestParameters['debitLoanId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DebitLoanFromJSON(jsonValue));
    }

    /**
     * Returns a debit loan
     */
    async getDebitLoan(requestParameters: GetDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan> {
        const response = await this.getDebitLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all loans
     */
    async getDebitLoansRaw(requestParameters: GetDebitLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDebitLoans200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getDebitLoans().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/debit-loans`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDebitLoans200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all loans
     */
    async getDebitLoans(requestParameters: GetDebitLoansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDebitLoans200Response> {
        const response = await this.getDebitLoansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a employees
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getEmployee().'
            );
        }

        if (requestParameters['employeeId'] == null) {
            throw new runtime.RequiredError(
                'employeeId',
                'Required parameter "employeeId" was null or undefined when calling getEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/employees/{employeeId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters['employeeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     * Returns a employees
     */
    async getEmployee(requestParameters: GetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.getEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all employees
     */
    async getEmployeesRaw(requestParameters: GetEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmployees200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getEmployees().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/employees`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmployees200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all employees
     */
    async getEmployees(requestParameters: GetEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmployees200Response> {
        const response = await this.getEmployeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all expense categories
     */
    async getExpenseCategoriesRaw(requestParameters: GetExpenseCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getExpenseCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/expense-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseCategoryFromJSON));
    }

    /**
     * Returns all expense categories
     */
    async getExpenseCategories(requestParameters: GetExpenseCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>> {
        const response = await this.getExpenseCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a expense category
     */
    async getExpenseCategoryRaw(requestParameters: GetExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseCategory>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getExpenseCategory().'
            );
        }

        if (requestParameters['expenseCategoryId'] == null) {
            throw new runtime.RequiredError(
                'expenseCategoryId',
                'Required parameter "expenseCategoryId" was null or undefined when calling getExpenseCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/expense-categories/{expenseCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"expenseCategoryId"}}`, encodeURIComponent(String(requestParameters['expenseCategoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseCategoryFromJSON(jsonValue));
    }

    /**
     * Returns a expense category
     */
    async getExpenseCategory(requestParameters: GetExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseCategory> {
        const response = await this.getExpenseCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all memorial entries
     */
    async getMemorialEntriesRaw(requestParameters: GetMemorialEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMemorialEntries200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMemorialEntries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['ledger'] != null) {
            queryParameters['ledger'] = requestParameters['ledger'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/memorial-entries`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMemorialEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all memorial entries
     */
    async getMemorialEntries(requestParameters: GetMemorialEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMemorialEntries200Response> {
        const response = await this.getMemorialEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a memorial entry
     */
    async getMemorialEntryRaw(requestParameters: GetMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemorialEntry>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMemorialEntry().'
            );
        }

        if (requestParameters['memorialEntryId'] == null) {
            throw new runtime.RequiredError(
                'memorialEntryId',
                'Required parameter "memorialEntryId" was null or undefined when calling getMemorialEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/memorial-entries/{memorialEntryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"memorialEntryId"}}`, encodeURIComponent(String(requestParameters['memorialEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemorialEntryFromJSON));
    }

    /**
     * Returns a memorial entry
     */
    async getMemorialEntry(requestParameters: GetMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemorialEntry>> {
        const response = await this.getMemorialEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a monetary account
     */
    async getMonetaryAccountRaw(requestParameters: GetMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccount().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountFromJSON(jsonValue));
    }

    /**
     * Returns a monetary account
     */
    async getMonetaryAccount(requestParameters: GetMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount> {
        const response = await this.getMonetaryAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a monetary account auto process
     */
    async getMonetaryAccountAutoProcessRaw(requestParameters: GetMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountAutoProcessId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountAutoProcessId',
                'Required parameter "monetaryAccountAutoProcessId" was null or undefined when calling getMonetaryAccountAutoProcess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/auto-processes`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountAutoProcessId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountAutoProcessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountAutoProcessFromJSON(jsonValue));
    }

    /**
     * Returns a monetary account auto process
     */
    async getMonetaryAccountAutoProcess(requestParameters: GetMonetaryAccountAutoProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess> {
        const response = await this.getMonetaryAccountAutoProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all monetary account auto processes
     */
    async getMonetaryAccountAutoProcessesRaw(requestParameters: GetMonetaryAccountAutoProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccountAutoProcess>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccountAutoProcesses().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccountAutoProcesses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/auto-processes/{monetaryAccountAutoProcessId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonetaryAccountAutoProcessFromJSON));
    }

    /**
     * Returns all monetary account auto processes
     */
    async getMonetaryAccountAutoProcesses(requestParameters: GetMonetaryAccountAutoProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccountAutoProcess>> {
        const response = await this.getMonetaryAccountAutoProcessesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an openbanking request
     */
    async getMonetaryAccountOpenbankingAuthorisationRaw(requestParameters: GetMonetaryAccountOpenbankingAuthorisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonetaryAccountOpenbankingAuthorisation200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccountOpenbankingAuthorisation().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccountOpenbankingAuthorisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/openbanking`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonetaryAccountOpenbankingAuthorisation200ResponseFromJSON(jsonValue));
    }

    /**
     * Create an openbanking request
     */
    async getMonetaryAccountOpenbankingAuthorisation(requestParameters: GetMonetaryAccountOpenbankingAuthorisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonetaryAccountOpenbankingAuthorisation200Response> {
        const response = await this.getMonetaryAccountOpenbankingAuthorisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a monetary account payment
     */
    async getMonetaryAccountPaymentRaw(requestParameters: GetMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountPayment>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling getMonetaryAccountPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountPaymentFromJSON(jsonValue));
    }

    /**
     * Returns a monetary account payment
     */
    async getMonetaryAccountPayment(requestParameters: GetMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountPayment> {
        const response = await this.getMonetaryAccountPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all monetary account payments
     */
    async getMonetaryAccountPaymentsRaw(requestParameters: GetMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMonetaryAccountPayments200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccountPayments().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling getMonetaryAccountPayments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['unprocessed'] != null) {
            queryParameters['unprocessed'] = requestParameters['unprocessed'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        if (requestParameters['creditLoan'] != null) {
            queryParameters['credit-loan'] = requestParameters['creditLoan'];
        }

        if (requestParameters['debitLoan'] != null) {
            queryParameters['debit-loan'] = requestParameters['debitLoan'];
        }

        if (requestParameters['currentAccount'] != null) {
            queryParameters['current-account'] = requestParameters['currentAccount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllMonetaryAccountPayments200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all monetary account payments
     */
    async getMonetaryAccountPayments(requestParameters: GetMonetaryAccountPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMonetaryAccountPayments200Response> {
        const response = await this.getMonetaryAccountPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all monetary accounts
     */
    async getMonetaryAccountsRaw(requestParameters: GetMonetaryAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonetaryAccount>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getMonetaryAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonetaryAccountFromJSON));
    }

    /**
     * Returns all monetary accounts
     */
    async getMonetaryAccounts(requestParameters: GetMonetaryAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonetaryAccount>> {
        const response = await this.getMonetaryAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVATRaw(requestParameters: GetNLVATRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NLVATFiling>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getNLVAT().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling getNLVAT().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling getNLVAT().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/nl/vat`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NLVATFilingFromJSON));
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVAT(requestParameters: GetNLVATRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NLVATFiling>> {
        const response = await this.getNLVATRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVATFilingRaw(requestParameters: GetNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NLVATFiling>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getNLVATFiling().'
            );
        }

        if (requestParameters['nlVATFilingId'] == null) {
            throw new runtime.RequiredError(
                'nlVATFilingId',
                'Required parameter "nlVATFilingId" was null or undefined when calling getNLVATFiling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/nl/vat/{nlVATFilingId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"nlVATFilingId"}}`, encodeURIComponent(String(requestParameters['nlVATFilingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NLVATFilingFromJSON(jsonValue));
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVATFiling(requestParameters: GetNLVATFilingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NLVATFiling> {
        const response = await this.getNLVATFilingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVATFilingPDFRaw(requestParameters: GetNLVATFilingPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getNLVATFilingPDF().'
            );
        }

        if (requestParameters['nlVATFilingId'] == null) {
            throw new runtime.RequiredError(
                'nlVATFilingId',
                'Required parameter "nlVATFilingId" was null or undefined when calling getNLVATFilingPDF().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/nl/vat/{nlVATFilingId}/pdf`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"nlVATFilingId"}}`, encodeURIComponent(String(requestParameters['nlVATFilingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVATFilingPDF(requestParameters: GetNLVATFilingPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getNLVATFilingPDFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVatDataRaw(requestParameters: GetNLVatDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNLVatData200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getNLVatData().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling getNLVatData().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling getNLVatData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/nl/vat/data`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNLVatData200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the VAT filing data
     */
    async getNLVatData(requestParameters: GetNLVatDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNLVatData200Response> {
        const response = await this.getNLVatDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a process document
     */
    async getProcessDocumentRaw(requestParameters: GetProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProcessDocument().'
            );
        }

        if (requestParameters['processDocumentId'] == null) {
            throw new runtime.RequiredError(
                'processDocumentId',
                'Required parameter "processDocumentId" was null or undefined when calling getProcessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents/{processDocumentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"processDocumentId"}}`, encodeURIComponent(String(requestParameters['processDocumentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDocumentFromJSON(jsonValue));
    }

    /**
     * Returns a process document
     */
    async getProcessDocument(requestParameters: GetProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument> {
        const response = await this.getProcessDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a process document attachment file
     */
    async getProcessDocumentAttachmentRaw(requestParameters: GetProcessDocumentAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProcessDocumentAttachment().'
            );
        }

        if (requestParameters['processDocumentId'] == null) {
            throw new runtime.RequiredError(
                'processDocumentId',
                'Required parameter "processDocumentId" was null or undefined when calling getProcessDocumentAttachment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProcessDocumentAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents/{processDocumentId}/attachments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"processDocumentId"}}`, encodeURIComponent(String(requestParameters['processDocumentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a process document attachment file
     */
    async getProcessDocumentAttachment(requestParameters: GetProcessDocumentAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getProcessDocumentAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all process documents
     */
    async getProcessDocumentsRaw(requestParameters: GetProcessDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProcessDocuments200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProcessDocuments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['processed'] != null) {
            queryParameters['processed'] = requestParameters['processed'];
        }

        if (requestParameters['processing'] != null) {
            queryParameters['processing'] = requestParameters['processing'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProcessDocuments200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all process documents
     */
    async getProcessDocuments(requestParameters: GetProcessDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProcessDocuments200Response> {
        const response = await this.getProcessDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/products/{productId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Returns a product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all product categories
     */
    async getProductCategoriesRaw(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProductCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/product-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductCategoryFromJSON));
    }

    /**
     * Returns all product categories
     */
    async getProductCategories(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>> {
        const response = await this.getProductCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a product category
     */
    async getProductCategoryRaw(requestParameters: GetProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategory>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProductCategory().'
            );
        }

        if (requestParameters['productCategoryId'] == null) {
            throw new runtime.RequiredError(
                'productCategoryId',
                'Required parameter "productCategoryId" was null or undefined when calling getProductCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/product-categories/{productCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productCategoryId"}}`, encodeURIComponent(String(requestParameters['productCategoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryFromJSON(jsonValue));
    }

    /**
     * Returns a product category
     */
    async getProductCategory(requestParameters: GetProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategory> {
        const response = await this.getProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all products
     */
    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProducts200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/products`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProducts200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all products
     */
    async getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProducts200Response> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Returns a profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a profile account
     */
    async getProfileAccountRaw(requestParameters: GetProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileAccount().'
            );
        }

        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getProfileAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/accounts/{accountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Returns a profile account
     */
    async getProfileAccount(requestParameters: GetProfileAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getProfileAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all relations
     */
    async getProfileAccountsRaw(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileAccounts200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileAccounts200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all relations
     */
    async getProfileAccounts(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileAccounts200Response> {
        const response = await this.getProfileAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the cash on hand of a profiel
     */
    async getProfileAnalyticsCashOnHandRaw(requestParameters: GetProfileAnalyticsCashOnHandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileAnalyticsCashOnHand().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/analytics/cash`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GetProfileAnalyticsRevenue200ResponseValueFromJSON));
    }

    /**
     * Returns the cash on hand of a profiel
     */
    async getProfileAnalyticsCashOnHand(requestParameters: GetProfileAnalyticsCashOnHandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }> {
        const response = await this.getProfileAnalyticsCashOnHandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the expenses of a profiel
     */
    async getProfileAnalyticsExpensesRaw(requestParameters: GetProfileAnalyticsExpensesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileAnalyticsExpenses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['group'] != null) {
            queryParameters['group'] = requestParameters['group'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/analytics/expenses`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GetProfileAnalyticsRevenue200ResponseValueFromJSON));
    }

    /**
     * Returns the expenses of a profiel
     */
    async getProfileAnalyticsExpenses(requestParameters: GetProfileAnalyticsExpensesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }> {
        const response = await this.getProfileAnalyticsExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the revenue of a profiel
     */
    async getProfileAnalyticsRevenueRaw(requestParameters: GetProfileAnalyticsRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileAnalyticsRevenue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['group'] != null) {
            queryParameters['group'] = requestParameters['group'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/analytics/revenue`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GetProfileAnalyticsRevenue200ResponseValueFromJSON));
    }

    /**
     * Returns the revenue of a profiel
     */
    async getProfileAnalyticsRevenue(requestParameters: GetProfileAnalyticsRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetProfileAnalyticsRevenue200ResponseValue; }> {
        const response = await this.getProfileAnalyticsRevenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all aggregated financial statement column balance
     */
    async getProfileFinancialColumnBalanceRaw(requestParameters: GetProfileFinancialColumnBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileFinancialColumnBalance200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileFinancialColumnBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/financial/column-balance`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileFinancialColumnBalance200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all aggregated financial statement column balance
     */
    async getProfileFinancialColumnBalance(requestParameters: GetProfileFinancialColumnBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileFinancialColumnBalance200Response> {
        const response = await this.getProfileFinancialColumnBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all bookings of a all ledgers
     */
    async getProfileFinancialLedgerRaw(requestParameters: GetProfileFinancialLedgerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProfileFinancialLedger200ResponseInner>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileFinancialLedger().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/financial/ledger`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProfileFinancialLedger200ResponseInnerFromJSON));
    }

    /**
     * Returns all bookings of a all ledgers
     */
    async getProfileFinancialLedger(requestParameters: GetProfileFinancialLedgerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProfileFinancialLedger200ResponseInner>> {
        const response = await this.getProfileFinancialLedgerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all aggregated financial statement fields
     */
    async getProfileFinancialStatementRaw(requestParameters: GetProfileFinancialStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileFinancialStatement().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/financial/statement`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all aggregated financial statement fields
     */
    async getProfileFinancialStatement(requestParameters: GetProfileFinancialStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getProfileFinancialStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all aggregated financial statement fields
     */
    async getProfileLedgerChartRaw(requestParameters: GetProfileLedgerChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileLedgerChart200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileLedgerChart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/financial/ledger-chart`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileLedgerChart200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all aggregated financial statement fields
     */
    async getProfileLedgerChart(requestParameters: GetProfileLedgerChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileLedgerChart200Response> {
        const response = await this.getProfileLedgerChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a profile metadata
     */
    async getProfileMetadataRaw(requestParameters: GetProfileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileMetadata200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/metadata`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileMetadata200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a profile metadata
     */
    async getProfileMetadata(requestParameters: GetProfileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileMetadata200Response> {
        const response = await this.getProfileMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the profiles
     */
    async getProfilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Profile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileFromJSON));
    }

    /**
     * Returns a list of all the profiles
     */
    async getProfiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Profile>> {
        const response = await this.getProfilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a purchase invoices
     */
    async getPurchaseInvoiceRaw(requestParameters: GetPurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoice().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling getPurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceFromJSON(jsonValue));
    }

    /**
     * Returns a purchase invoices
     */
    async getPurchaseInvoice(requestParameters: GetPurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice> {
        const response = await this.getPurchaseInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a purchase invoice line of a purchase invoice
     */
    async getPurchaseInvoiceLineRaw(requestParameters: GetPurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling getPurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceLineId',
                'Required parameter "purchaseInvoiceLineId" was null or undefined when calling getPurchaseInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/lines/{purchaseInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))).replace(`{${"purchaseInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceLineId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceLineFromJSON(jsonValue));
    }

    /**
     * Returns a purchase invoice line of a purchase invoice
     */
    async getPurchaseInvoiceLine(requestParameters: GetPurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine> {
        const response = await this.getPurchaseInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all purchase invoice lines of a purchase invoice
     */
    async getPurchaseInvoiceLinesRaw(requestParameters: GetPurchaseInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PurchaseInvoiceLine>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoiceLines().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling getPurchaseInvoiceLines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PurchaseInvoiceLineFromJSON));
    }

    /**
     * Returns all purchase invoice lines of a purchase invoice
     */
    async getPurchaseInvoiceLines(requestParameters: GetPurchaseInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PurchaseInvoiceLine>> {
        const response = await this.getPurchaseInvoiceLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all purchase invoices
     */
    async getPurchaseInvoicesRaw(requestParameters: GetPurchaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPurchaseInvoices200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getPurchaseInvoices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        if (requestParameters['invoiceId'] != null) {
            queryParameters['invoice_id'] = requestParameters['invoiceId'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['overdue'] != null) {
            queryParameters['overdue'] = requestParameters['overdue'];
        }

        if (requestParameters['paid'] != null) {
            queryParameters['paid'] = requestParameters['paid'];
        }

        if (requestParameters['concept'] != null) {
            queryParameters['concept'] = requestParameters['concept'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPurchaseInvoices200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all purchase invoices
     */
    async getPurchaseInvoices(requestParameters: GetPurchaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPurchaseInvoices200Response> {
        const response = await this.getPurchaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a quote
     */
    async getQuoteRaw(requestParameters: GetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuote().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Returns a quote
     */
    async getQuote(requestParameters: GetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.getQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an quote line
     */
    async getQuoteLineRaw(requestParameters: GetQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuoteLine().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuoteLine().'
            );
        }

        if (requestParameters['quoteLineId'] == null) {
            throw new runtime.RequiredError(
                'quoteLineId',
                'Required parameter "quoteLineId" was null or undefined when calling getQuoteLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/lines/{quoteLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))).replace(`{${"quoteLineId"}}`, encodeURIComponent(String(requestParameters['quoteLineId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteLineFromJSON(jsonValue));
    }

    /**
     * Returns an quote line
     */
    async getQuoteLine(requestParameters: GetQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine> {
        const response = await this.getQuoteLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all quote lines of an quote
     */
    async getQuoteLinesRaw(requestParameters: GetQuoteLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Quote>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuoteLines().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuoteLines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteFromJSON));
    }

    /**
     * Returns all quote lines of an quote
     */
    async getQuoteLines(requestParameters: GetQuoteLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Quote>> {
        const response = await this.getQuoteLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the email
     */
    async getQuotePreviewEmailRaw(requestParameters: GetQuotePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuotePreviewEmail().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuotePreviewEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/preview/email`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the email
     */
    async getQuotePreviewEmail(requestParameters: GetQuotePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getQuotePreviewEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the quote itself
     */
    async getQuotePreviewHTMLRaw(requestParameters: GetQuotePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuotePreviewHTML().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuotePreviewHTML().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/preview/html`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the quote itself
     */
    async getQuotePreviewHTML(requestParameters: GetQuotePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getQuotePreviewHTMLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the PDF content of the quote itself
     */
    async getQuotePreviewPDFRaw(requestParameters: GetQuotePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuotePreviewPDF().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling getQuotePreviewPDF().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/preview/pdf`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieves a preview of the PDF content of the quote itself
     */
    async getQuotePreviewPDF(requestParameters: GetQuotePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getQuotePreviewPDFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all quotes
     */
    async getQuotesRaw(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuotes200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getQuotes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        if (requestParameters['product'] != null) {
            queryParameters['product'] = requestParameters['product'];
        }

        if (requestParameters['quoteId'] != null) {
            queryParameters['quote_id'] = requestParameters['quoteId'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['concept'] != null) {
            queryParameters['concept'] = requestParameters['concept'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuotes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all quotes
     */
    async getQuotes(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuotes200Response> {
        const response = await this.getQuotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a relations
     */
    async getRelationRaw(requestParameters: GetRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getRelation().'
            );
        }

        if (requestParameters['relationId'] == null) {
            throw new runtime.RequiredError(
                'relationId',
                'Required parameter "relationId" was null or undefined when calling getRelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations/{relationId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"relationId"}}`, encodeURIComponent(String(requestParameters['relationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationFromJSON(jsonValue));
    }

    /**
     * Returns a relations
     */
    async getRelation(requestParameters: GetRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation> {
        const response = await this.getRelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all relations
     */
    async getRelationsRaw(requestParameters: GetRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRelations200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getRelations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['vatNumber'] != null) {
            queryParameters['vat-number'] = requestParameters['vatNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRelations200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all relations
     */
    async getRelations(requestParameters: GetRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRelations200Response> {
        const response = await this.getRelationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all revenue categories
     */
    async getRevenueCategoriesRaw(requestParameters: GetRevenueCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getRevenueCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/revenue-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RevenueCategoryFromJSON));
    }

    /**
     * Returns all revenue categories
     */
    async getRevenueCategories(requestParameters: GetRevenueCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>> {
        const response = await this.getRevenueCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a revenue category
     */
    async getRevenueCategoryRaw(requestParameters: GetRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueCategory>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getRevenueCategory().'
            );
        }

        if (requestParameters['revenueCategoryId'] == null) {
            throw new runtime.RequiredError(
                'revenueCategoryId',
                'Required parameter "revenueCategoryId" was null or undefined when calling getRevenueCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/revenue-categories/{revenueCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"revenueCategoryId"}}`, encodeURIComponent(String(requestParameters['revenueCategoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueCategoryFromJSON(jsonValue));
    }

    /**
     * Returns a revenue category
     */
    async getRevenueCategory(requestParameters: GetRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueCategory> {
        const response = await this.getRevenueCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoiceRaw(requestParameters: GetSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceFromJSON(jsonValue));
    }

    /**
     * Returns a sales invoice
     */
    async getSalesInvoice(requestParameters: GetSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice> {
        const response = await this.getSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a sales invoice line of a sales invoice
     */
    async getSalesInvoiceLineRaw(requestParameters: GetSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceLineId',
                'Required parameter "salesInvoiceLineId" was null or undefined when calling getSalesInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/lines/{salesInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))).replace(`{${"salesInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceLineId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceLineFromJSON(jsonValue));
    }

    /**
     * Returns a sales invoice line of a sales invoice
     */
    async getSalesInvoiceLine(requestParameters: GetSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine> {
        const response = await this.getSalesInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all sales invoice lines of a sales invoice
     */
    async getSalesInvoiceLinesRaw(requestParameters: GetSalesInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalesInvoiceLine>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoiceLines().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoiceLines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SalesInvoiceLineFromJSON));
    }

    /**
     * Returns all sales invoice lines of a sales invoice
     */
    async getSalesInvoiceLines(requestParameters: GetSalesInvoiceLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalesInvoiceLine>> {
        const response = await this.getSalesInvoiceLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the email
     */
    async getSalesInvoicePreviewEmailRaw(requestParameters: GetSalesInvoicePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePreviewEmail().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoicePreviewEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/preview/email`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the email
     */
    async getSalesInvoicePreviewEmail(requestParameters: GetSalesInvoicePreviewEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getSalesInvoicePreviewEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePreviewHTMLRaw(requestParameters: GetSalesInvoicePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePreviewHTML().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoicePreviewHTML().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/preview/html`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves a preview of the html content of the invoice itself
     */
    async getSalesInvoicePreviewHTML(requestParameters: GetSalesInvoicePreviewHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getSalesInvoicePreviewHTMLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePreviewPDFRaw(requestParameters: GetSalesInvoicePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoicePreviewPDF().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling getSalesInvoicePreviewPDF().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/preview/pdf`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieves a preview of the PDF content of the invoice itself
     */
    async getSalesInvoicePreviewPDF(requestParameters: GetSalesInvoicePreviewPDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSalesInvoicePreviewPDFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all sales invoices
     */
    async getSalesInvoicesRaw(requestParameters: GetSalesInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSalesInvoices200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSalesInvoices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['subscription'] != null) {
            queryParameters['subscription'] = requestParameters['subscription'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        if (requestParameters['product'] != null) {
            queryParameters['product'] = requestParameters['product'];
        }

        if (requestParameters['invoiceId'] != null) {
            queryParameters['invoice_id'] = requestParameters['invoiceId'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['overdue'] != null) {
            queryParameters['overdue'] = requestParameters['overdue'];
        }

        if (requestParameters['paid'] != null) {
            queryParameters['paid'] = requestParameters['paid'];
        }

        if (requestParameters['credit'] != null) {
            queryParameters['credit'] = requestParameters['credit'];
        }

        if (requestParameters['credited'] != null) {
            queryParameters['credited'] = requestParameters['credited'];
        }

        if (requestParameters['concept'] != null) {
            queryParameters['concept'] = requestParameters['concept'];
        }

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['amountLte'] != null) {
            queryParameters['amount_lte'] = requestParameters['amountLte'];
        }

        if (requestParameters['amountGte'] != null) {
            queryParameters['amount_gte'] = requestParameters['amountGte'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSalesInvoices200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all sales invoices
     */
    async getSalesInvoices(requestParameters: GetSalesInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSalesInvoices200Response> {
        const response = await this.getSalesInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all stock categories
     */
    async getStockCategoriesRaw(requestParameters: GetStockCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getStockCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/stock-categories`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockCategoryFromJSON));
    }

    /**
     * Returns all stock categories
     */
    async getStockCategories(requestParameters: GetStockCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>> {
        const response = await this.getStockCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a stock category
     */
    async getStockcategoryRaw(requestParameters: GetStockcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockCategory>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getStockcategory().'
            );
        }

        if (requestParameters['stockCategoryId'] == null) {
            throw new runtime.RequiredError(
                'stockCategoryId',
                'Required parameter "stockCategoryId" was null or undefined when calling getStockcategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/stock-categories/{stockCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"stockCategoryId"}}`, encodeURIComponent(String(requestParameters['stockCategoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockCategoryFromJSON(jsonValue));
    }

    /**
     * Returns a stock category
     */
    async getStockcategory(requestParameters: GetStockcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockCategory> {
        const response = await this.getStockcategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a subscription
     */
    async getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Returns a subscription
     */
    async getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a subscription line
     */
    async getSubscriptionLineRaw(requestParameters: GetSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscriptionLine().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getSubscriptionLine().'
            );
        }

        if (requestParameters['subscriptionLineId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionLineId',
                'Required parameter "subscriptionLineId" was null or undefined when calling getSubscriptionLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}/lines/{subscriptionLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))).replace(`{${"subscriptionLineId"}}`, encodeURIComponent(String(requestParameters['subscriptionLineId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionLineFromJSON(jsonValue));
    }

    /**
     * Returns a subscription line
     */
    async getSubscriptionLine(requestParameters: GetSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLine> {
        const response = await this.getSubscriptionLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all subscription lines
     */
    async getSubscriptionLinesRaw(requestParameters: GetSubscriptionLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionLine>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscriptionLines().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getSubscriptionLines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}/lines`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionLineFromJSON));
    }

    /**
     * Returns all subscription lines
     */
    async getSubscriptionLines(requestParameters: GetSubscriptionLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionLine>> {
        const response = await this.getSubscriptionLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all subscriptions
     */
    async getSubscriptionsRaw(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptions200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['relation'] != null) {
            queryParameters['relation'] = requestParameters['relation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all subscriptions
     */
    async getSubscriptions(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptions200Response> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a vehicle
     */
    async getVehicleRaw(requestParameters: GetVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getVehicle().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling getVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Returns a vehicle
     */
    async getVehicle(requestParameters: GetVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.getVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a vehicle trip
     */
    async getVehicleTripRaw(requestParameters: GetVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getVehicleTrip().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling getVehicleTrip().'
            );
        }

        if (requestParameters['vehicleTripId'] == null) {
            throw new runtime.RequiredError(
                'vehicleTripId',
                'Required parameter "vehicleTripId" was null or undefined when calling getVehicleTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}/trips/{vehicleTripId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))).replace(`{${"vehicleTripId"}}`, encodeURIComponent(String(requestParameters['vehicleTripId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleTripFromJSON(jsonValue));
    }

    /**
     * Returns a vehicle trip
     */
    async getVehicleTrip(requestParameters: GetVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip> {
        const response = await this.getVehicleTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all vehicles trips
     */
    async getVehicleTripsRaw(requestParameters: GetVehicleTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVehicleTrips200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getVehicleTrips().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling getVehicleTrips().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}/trips`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVehicleTrips200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all vehicles trips
     */
    async getVehicleTrips(requestParameters: GetVehicleTripsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVehicleTrips200Response> {
        const response = await this.getVehicleTripsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all vehicles
     */
    async getVehiclesRaw(requestParameters: GetVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVehicles200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getVehicles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['asset'] != null) {
            queryParameters['asset'] = requestParameters['asset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVehicles200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all vehicles
     */
    async getVehicles(requestParameters: GetVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVehicles200Response> {
        const response = await this.getVehiclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Imports an CAMT053 file into a monetary account
     */
    async importMonetaryAccountCAMT053Raw(requestParameters: ImportMonetaryAccountCAMT053OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling importMonetaryAccountCAMT053().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling importMonetaryAccountCAMT053().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/import-camt053`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportMonetaryAccountCAMT053RequestToJSON(requestParameters['importMonetaryAccountCAMT053Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an CAMT053 file into a monetary account
     */
    async importMonetaryAccountCAMT053(requestParameters: ImportMonetaryAccountCAMT053OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.importMonetaryAccountCAMT053Raw(requestParameters, initOverrides);
    }

    /**
     * Imports an MT940 file into a monetary account
     */
    async importMonetaryAccountMT940Raw(requestParameters: ImportMonetaryAccountMT940OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling importMonetaryAccountMT940().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling importMonetaryAccountMT940().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/import-mt940`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportMonetaryAccountMT940RequestToJSON(requestParameters['importMonetaryAccountMT940Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an MT940 file into a monetary account
     */
    async importMonetaryAccountMT940(requestParameters: ImportMonetaryAccountMT940OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.importMonetaryAccountMT940Raw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentCreditLoanRaw(requestParameters: ProcessMonetaryAccountPaymentCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentCreditLoan().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentCreditLoan().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentCreditLoan().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/credit-loan`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentCreditLoanRequestToJSON(requestParameters['processMonetaryAccountPaymentCreditLoanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentCreditLoan(requestParameters: ProcessMonetaryAccountPaymentCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentCreditLoanRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentCurrentAccountRaw(requestParameters: ProcessMonetaryAccountPaymentCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentCurrentAccount().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentCurrentAccount().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentCurrentAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/current-account`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentCurrentAccountRequestToJSON(requestParameters['processMonetaryAccountPaymentCurrentAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentCurrentAccount(requestParameters: ProcessMonetaryAccountPaymentCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentCurrentAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentDebitLoanRaw(requestParameters: ProcessMonetaryAccountPaymentDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentDebitLoan().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentDebitLoan().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentDebitLoan().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/debit-loan`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentDebitLoanRequestToJSON(requestParameters['processMonetaryAccountPaymentDebitLoanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentDebitLoan(requestParameters: ProcessMonetaryAccountPaymentDebitLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentDebitLoanRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentLedgerRaw(requestParameters: ProcessMonetaryAccountPaymentLedgerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentLedger().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentLedger().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentLedger().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/ledger`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentLedgerRequestToJSON(requestParameters['processMonetaryAccountPaymentLedgerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentLedger(requestParameters: ProcessMonetaryAccountPaymentLedgerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentLedgerRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentPurchaseInvoiceRaw(requestParameters: ProcessMonetaryAccountPaymentPurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentPurchaseInvoice().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentPurchaseInvoice().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentPurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/purchase-invoice`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentPurchaseInvoiceRequestToJSON(requestParameters['processMonetaryAccountPaymentPurchaseInvoiceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentPurchaseInvoice(requestParameters: ProcessMonetaryAccountPaymentPurchaseInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentPurchaseInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentRelationRaw(requestParameters: ProcessMonetaryAccountPaymentRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentRelation().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentRelation().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentRelation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/relation`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentRelationRequestToJSON(requestParameters['processMonetaryAccountPaymentRelationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentRelation(requestParameters: ProcessMonetaryAccountPaymentRelationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentRelationRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentSalesInvoiceRaw(requestParameters: ProcessMonetaryAccountPaymentSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling processMonetaryAccountPaymentSalesInvoice().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling processMonetaryAccountPaymentSalesInvoice().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling processMonetaryAccountPaymentSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unprocess'] != null) {
            queryParameters['unprocess'] = requestParameters['unprocess'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}/sales-invoice`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessMonetaryAccountPaymentSalesInvoiceRequestToJSON(requestParameters['processMonetaryAccountPaymentSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a monetary account
     */
    async processMonetaryAccountPaymentSalesInvoice(requestParameters: ProcessMonetaryAccountPaymentSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processMonetaryAccountPaymentSalesInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Send a quote via email
     */
    async sendQuoteRaw(requestParameters: SendQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling sendQuote().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling sendQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/send`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendSalesInvoiceRequestToJSON(requestParameters['sendSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send a quote via email
     */
    async sendQuote(requestParameters: SendQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendQuoteRaw(requestParameters, initOverrides);
    }

    /**
     * Send a sales invoice via email
     */
    async sendSalesInvoiceRaw(requestParameters: SendSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling sendSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling sendSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/send`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendSalesInvoiceRequestToJSON(requestParameters['sendSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send a sales invoice via email
     */
    async sendSalesInvoice(requestParameters: SendSalesInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendSalesInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Submits a process document for processing
     */
    async submitProcessDocumentRaw(requestParameters: SubmitProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling submitProcessDocument().'
            );
        }

        if (requestParameters['processDocumentId'] == null) {
            throw new runtime.RequiredError(
                'processDocumentId',
                'Required parameter "processDocumentId" was null or undefined when calling submitProcessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents/{processDocumentId}/submit`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"processDocumentId"}}`, encodeURIComponent(String(requestParameters['processDocumentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitProcessDocumentRequestToJSON(requestParameters['submitProcessDocumentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDocumentFromJSON(jsonValue));
    }

    /**
     * Submits a process document for processing
     */
    async submitProcessDocument(requestParameters: SubmitProcessDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument> {
        const response = await this.submitProcessDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a monetary account auto process
     */
    async upateMonetaryAccountAutoProcessRaw(requestParameters: UpateMonetaryAccountAutoProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountAutoProcess>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling upateMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling upateMonetaryAccountAutoProcess().'
            );
        }

        if (requestParameters['monetaryAccountAutoProcessId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountAutoProcessId',
                'Required parameter "monetaryAccountAutoProcessId" was null or undefined when calling upateMonetaryAccountAutoProcess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/auto-processes`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountAutoProcessId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountAutoProcessId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpateMonetaryAccountAutoProcessRequestToJSON(requestParameters['upateMonetaryAccountAutoProcessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountAutoProcessFromJSON(jsonValue));
    }

    /**
     * Updates a monetary account auto process
     */
    async upateMonetaryAccountAutoProcess(requestParameters: UpateMonetaryAccountAutoProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountAutoProcess> {
        const response = await this.upateMonetaryAccountAutoProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a asset
     */
    async updateAssetRaw(requestParameters: UpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateAsset().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling updateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/assets/{assetId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetRequestToJSON(requestParameters['createAssetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Updates a asset
     */
    async updateAsset(requestParameters: UpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.updateAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a chat
     */
    async updateChatRaw(requestParameters: UpdateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChat200Response>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateChat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling updateChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/chats/{chatId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatRequestToJSON(requestParameters['createChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChat200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a chat
     */
    async updateChat(requestParameters: UpdateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChat200Response> {
        const response = await this.updateChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a credit loan
     */
    async updateCreditLoanRaw(requestParameters: UpdateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateCreditLoan().'
            );
        }

        if (requestParameters['creditLoanId'] == null) {
            throw new runtime.RequiredError(
                'creditLoanId',
                'Required parameter "creditLoanId" was null or undefined when calling updateCreditLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/credit-loans/{creditLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"creditLoanId"}}`, encodeURIComponent(String(requestParameters['creditLoanId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCreditLoanRequestToJSON(requestParameters['updateCreditLoanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditLoanFromJSON(jsonValue));
    }

    /**
     * Updates a credit loan
     */
    async updateCreditLoan(requestParameters: UpdateCreditLoanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLoan> {
        const response = await this.updateCreditLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a current account
     */
    async updateCurrentAccountRaw(requestParameters: UpdateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateCurrentAccount().'
            );
        }

        if (requestParameters['currentAccountId'] == null) {
            throw new runtime.RequiredError(
                'currentAccountId',
                'Required parameter "currentAccountId" was null or undefined when calling updateCurrentAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/current-accounts/{currentAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"currentAccountId"}}`, encodeURIComponent(String(requestParameters['currentAccountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCurrentAccountRequestToJSON(requestParameters['updateCurrentAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DebitLoanFromJSON(jsonValue));
    }

    /**
     * Updates a current account
     */
    async updateCurrentAccount(requestParameters: UpdateCurrentAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan> {
        const response = await this.updateCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a debit loan
     */
    async updateDebitLoanRaw(requestParameters: UpdateDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DebitLoan>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateDebitLoan().'
            );
        }

        if (requestParameters['debitLoanId'] == null) {
            throw new runtime.RequiredError(
                'debitLoanId',
                'Required parameter "debitLoanId" was null or undefined when calling updateDebitLoan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/debit-loans/{debitLoanId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"debitLoanId"}}`, encodeURIComponent(String(requestParameters['debitLoanId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDebitLoanRequestToJSON(requestParameters['createDebitLoanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DebitLoanFromJSON(jsonValue));
    }

    /**
     * Updates a debit loan
     */
    async updateDebitLoan(requestParameters: UpdateDebitLoanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DebitLoan> {
        const response = await this.updateDebitLoanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a relations
     */
    async updateEmployeeRaw(requestParameters: UpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateEmployee().'
            );
        }

        if (requestParameters['employeeId'] == null) {
            throw new runtime.RequiredError(
                'employeeId',
                'Required parameter "employeeId" was null or undefined when calling updateEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/employees/{employeeId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters['employeeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmployeeRequestToJSON(requestParameters['createEmployeeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     * Updates a relations
     */
    async updateEmployee(requestParameters: UpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.updateEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a expense category
     */
    async updateExpenseCategoryRaw(requestParameters: UpdateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateExpenseCategory().'
            );
        }

        if (requestParameters['expenseCategoryId'] == null) {
            throw new runtime.RequiredError(
                'expenseCategoryId',
                'Required parameter "expenseCategoryId" was null or undefined when calling updateExpenseCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/expense-categories/{expenseCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"expenseCategoryId"}}`, encodeURIComponent(String(requestParameters['expenseCategoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseCategoryFromJSON));
    }

    /**
     * Updates a expense category
     */
    async updateExpenseCategory(requestParameters: UpdateExpenseCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>> {
        const response = await this.updateExpenseCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a memorial entry
     */
    async updateMemorialEntryRaw(requestParameters: UpdateMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemorialEntry>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateMemorialEntry().'
            );
        }

        if (requestParameters['memorialEntryId'] == null) {
            throw new runtime.RequiredError(
                'memorialEntryId',
                'Required parameter "memorialEntryId" was null or undefined when calling updateMemorialEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/memorial-entries/{memorialEntryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"memorialEntryId"}}`, encodeURIComponent(String(requestParameters['memorialEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemorialEntryRequestToJSON(requestParameters['createMemorialEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemorialEntryFromJSON));
    }

    /**
     * Updates a memorial entry
     */
    async updateMemorialEntry(requestParameters: UpdateMemorialEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemorialEntry>> {
        const response = await this.updateMemorialEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a monetary account
     */
    async updateMonetaryAccountRaw(requestParameters: UpdateMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccount>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateMonetaryAccount().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling updateMonetaryAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonetaryAccountRequestToJSON(requestParameters['createMonetaryAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountFromJSON(jsonValue));
    }

    /**
     * Updates a monetary account
     */
    async updateMonetaryAccount(requestParameters: UpdateMonetaryAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccount> {
        const response = await this.updateMonetaryAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a monetary account
     */
    async updateMonetaryAccountPaymentRaw(requestParameters: UpdateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonetaryAccountPayment>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountId',
                'Required parameter "monetaryAccountId" was null or undefined when calling updateMonetaryAccountPayment().'
            );
        }

        if (requestParameters['monetaryAccountPaymentId'] == null) {
            throw new runtime.RequiredError(
                'monetaryAccountPaymentId',
                'Required parameter "monetaryAccountPaymentId" was null or undefined when calling updateMonetaryAccountPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/monetary-accounts/{monetaryAccountId}/payments/{monetaryAccountPaymentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"monetaryAccountId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountId']))).replace(`{${"monetaryAccountPaymentId"}}`, encodeURIComponent(String(requestParameters['monetaryAccountPaymentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonetaryAccountPaymentRequestInnerToJSON(requestParameters['createMonetaryAccountPaymentRequestInner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonetaryAccountPaymentFromJSON(jsonValue));
    }

    /**
     * Updates a monetary account
     */
    async updateMonetaryAccountPayment(requestParameters: UpdateMonetaryAccountPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonetaryAccountPayment> {
        const response = await this.updateMonetaryAccountPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a process document
     */
    async updateProcessDocumentRaw(requestParameters: UpdateProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDocument>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateProcessDocument().'
            );
        }

        if (requestParameters['processDocumentId'] == null) {
            throw new runtime.RequiredError(
                'processDocumentId',
                'Required parameter "processDocumentId" was null or undefined when calling updateProcessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/process-documents/{processDocumentId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"processDocumentId"}}`, encodeURIComponent(String(requestParameters['processDocumentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProcessDocumentRequestToJSON(requestParameters['createProcessDocumentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDocumentFromJSON(jsonValue));
    }

    /**
     * Updates a process document
     */
    async updateProcessDocument(requestParameters: UpdateProcessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDocument> {
        const response = await this.updateProcessDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a product
     */
    async updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling updateProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/products/{productId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Updates a product
     */
    async updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.updateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a expense category
     */
    async updateProductCategoryRaw(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateProductCategory().'
            );
        }

        if (requestParameters['productCategoryId'] == null) {
            throw new runtime.RequiredError(
                'productCategoryId',
                'Required parameter "productCategoryId" was null or undefined when calling updateProductCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/product-categories/{productCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"productCategoryId"}}`, encodeURIComponent(String(requestParameters['productCategoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductCategoryRequestToJSON(requestParameters['createProductCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductCategoryFromJSON));
    }

    /**
     * Updates a expense category
     */
    async updateProductCategory(requestParameters: UpdateProductCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>> {
        const response = await this.updateProductCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateProfile().'
            );
        }

        if (requestParameters['updateProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProfileRequest',
                'Required parameter "updateProfileRequest" was null or undefined when calling updateProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters['updateProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Updates a profile
     */
    async updateProfile(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates a purchase invoice
     */
    async updatePurchaseInvoiceRaw(requestParameters: UpdatePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updatePurchaseInvoice().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling updatePurchaseInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoiceRequestToJSON(requestParameters['createPurchaseInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceFromJSON(jsonValue));
    }

    /**
     * updates a purchase invoice
     */
    async updatePurchaseInvoice(requestParameters: UpdatePurchaseInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoice> {
        const response = await this.updatePurchaseInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates a purchase invoice
     */
    async updatePurchaseInvoiceLineRaw(requestParameters: UpdatePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updatePurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceId',
                'Required parameter "purchaseInvoiceId" was null or undefined when calling updatePurchaseInvoiceLine().'
            );
        }

        if (requestParameters['purchaseInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'purchaseInvoiceLineId',
                'Required parameter "purchaseInvoiceLineId" was null or undefined when calling updatePurchaseInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/purchase-invoices/{purchaseInvoiceId}/lines/{purchaseInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"purchaseInvoiceId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceId']))).replace(`{${"purchaseInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['purchaseInvoiceLineId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePurchaseInvoiceLineRequestToJSON(requestParameters['createPurchaseInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseInvoiceLineFromJSON(jsonValue));
    }

    /**
     * updates a purchase invoice
     */
    async updatePurchaseInvoiceLine(requestParameters: UpdatePurchaseInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseInvoiceLine> {
        const response = await this.updatePurchaseInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an Quote
     */
    async updateQuoteRaw(requestParameters: UpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateQuote().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling updateQuote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuoteRequestToJSON(requestParameters['createQuoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Updates an Quote
     */
    async updateQuote(requestParameters: UpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an quote line
     */
    async updateQuoteLineRaw(requestParameters: UpdateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateQuoteLine().'
            );
        }

        if (requestParameters['quoteId'] == null) {
            throw new runtime.RequiredError(
                'quoteId',
                'Required parameter "quoteId" was null or undefined when calling updateQuoteLine().'
            );
        }

        if (requestParameters['quoteLineId'] == null) {
            throw new runtime.RequiredError(
                'quoteLineId',
                'Required parameter "quoteLineId" was null or undefined when calling updateQuoteLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/quotes/{quoteId}/lines/{quoteLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters['quoteId']))).replace(`{${"quoteLineId"}}`, encodeURIComponent(String(requestParameters['quoteLineId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceLineRequestToJSON(requestParameters['createSalesInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteLineFromJSON(jsonValue));
    }

    /**
     * Updates an quote line
     */
    async updateQuoteLine(requestParameters: UpdateQuoteLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteLine> {
        const response = await this.updateQuoteLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a relations
     */
    async updateRelationRaw(requestParameters: UpdateRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Relation>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateRelation().'
            );
        }

        if (requestParameters['relationId'] == null) {
            throw new runtime.RequiredError(
                'relationId',
                'Required parameter "relationId" was null or undefined when calling updateRelation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/relations/{relationId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"relationId"}}`, encodeURIComponent(String(requestParameters['relationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRelationRequestToJSON(requestParameters['createRelationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationFromJSON(jsonValue));
    }

    /**
     * Updates a relations
     */
    async updateRelation(requestParameters: UpdateRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Relation> {
        const response = await this.updateRelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a revenue category
     */
    async updateRevenueCategoryRaw(requestParameters: UpdateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RevenueCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateRevenueCategory().'
            );
        }

        if (requestParameters['revenueCategoryId'] == null) {
            throw new runtime.RequiredError(
                'revenueCategoryId',
                'Required parameter "revenueCategoryId" was null or undefined when calling updateRevenueCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/revenue-categories/{revenueCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"revenueCategoryId"}}`, encodeURIComponent(String(requestParameters['revenueCategoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RevenueCategoryFromJSON));
    }

    /**
     * Updates a revenue category
     */
    async updateRevenueCategory(requestParameters: UpdateRevenueCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RevenueCategory>> {
        const response = await this.updateRevenueCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a sales invoice
     */
    async updateSalesInvoiceRaw(requestParameters: UpdateSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoice>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateSalesInvoice().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling updateSalesInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceRequestToJSON(requestParameters['createSalesInvoiceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceFromJSON(jsonValue));
    }

    /**
     * creates a sales invoice
     */
    async updateSalesInvoice(requestParameters: UpdateSalesInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoice> {
        const response = await this.updateSalesInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates a sales invoice
     */
    async updateSalesInvoiceLineRaw(requestParameters: UpdateSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesInvoiceLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceId',
                'Required parameter "salesInvoiceId" was null or undefined when calling updateSalesInvoiceLine().'
            );
        }

        if (requestParameters['salesInvoiceLineId'] == null) {
            throw new runtime.RequiredError(
                'salesInvoiceLineId',
                'Required parameter "salesInvoiceLineId" was null or undefined when calling updateSalesInvoiceLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/sales-invoices/{salesInvoiceId}/lines/{salesInvoiceLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"salesInvoiceId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceId']))).replace(`{${"salesInvoiceLineId"}}`, encodeURIComponent(String(requestParameters['salesInvoiceLineId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesInvoiceLineRequestToJSON(requestParameters['createSalesInvoiceLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesInvoiceLineFromJSON(jsonValue));
    }

    /**
     * updates a sales invoice
     */
    async updateSalesInvoiceLine(requestParameters: UpdateSalesInvoiceLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesInvoiceLine> {
        const response = await this.updateSalesInvoiceLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a stock category
     */
    async updateStockCategoryRaw(requestParameters: UpdateStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StockCategory>>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateStockCategory().'
            );
        }

        if (requestParameters['stockCategoryId'] == null) {
            throw new runtime.RequiredError(
                'stockCategoryId',
                'Required parameter "stockCategoryId" was null or undefined when calling updateStockCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/stock-categories/{stockCategoryId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"stockCategoryId"}}`, encodeURIComponent(String(requestParameters['stockCategoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockCategoryFromJSON));
    }

    /**
     * Updates a stock category
     */
    async updateStockCategory(requestParameters: UpdateStockCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StockCategory>> {
        const response = await this.updateStockCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a subscription
     */
    async updateSubscriptionRaw(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling updateSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionRequestToJSON(requestParameters['createSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Updates a subscription
     */
    async updateSubscription(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a subscription line
     */
    async updateSubscriptionLineRaw(requestParameters: UpdateSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLine>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateSubscriptionLine().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling updateSubscriptionLine().'
            );
        }

        if (requestParameters['subscriptionLineId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionLineId',
                'Required parameter "subscriptionLineId" was null or undefined when calling updateSubscriptionLine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/subscriptions/{subscriptionId}/lines/{subscriptionLineId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))).replace(`{${"subscriptionLineId"}}`, encodeURIComponent(String(requestParameters['subscriptionLineId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionLineRequestToJSON(requestParameters['createSubscriptionLineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionLineFromJSON(jsonValue));
    }

    /**
     * Updates a subscription line
     */
    async updateSubscriptionLine(requestParameters: UpdateSubscriptionLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLine> {
        const response = await this.updateSubscriptionLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a vehicle
     */
    async updateVehicleRaw(requestParameters: UpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateVehicle().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling updateVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleRequestToJSON(requestParameters['createVehicleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Updates a vehicle
     */
    async updateVehicle(requestParameters: UpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.updateVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a vehicle trip
     */
    async updateVehicleTripRaw(requestParameters: UpdateVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleTrip>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateVehicleTrip().'
            );
        }

        if (requestParameters['vehicleId'] == null) {
            throw new runtime.RequiredError(
                'vehicleId',
                'Required parameter "vehicleId" was null or undefined when calling updateVehicleTrip().'
            );
        }

        if (requestParameters['vehicleTripId'] == null) {
            throw new runtime.RequiredError(
                'vehicleTripId',
                'Required parameter "vehicleTripId" was null or undefined when calling updateVehicleTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2", []);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/vehicles/{vehicleId}/trips/{vehicleTripId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters['vehicleId']))).replace(`{${"vehicleTripId"}}`, encodeURIComponent(String(requestParameters['vehicleTripId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleTripRequestToJSON(requestParameters['createVehicleTripRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleTripFromJSON(jsonValue));
    }

    /**
     * Updates a vehicle trip
     */
    async updateVehicleTrip(requestParameters: UpdateVehicleTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleTrip> {
        const response = await this.updateVehicleTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProfileAnalyticsExpensesGroupEnum = {
    Date: 'date',
    Week: 'week',
    Month: 'month'
} as const;
export type GetProfileAnalyticsExpensesGroupEnum = typeof GetProfileAnalyticsExpensesGroupEnum[keyof typeof GetProfileAnalyticsExpensesGroupEnum];
/**
 * @export
 */
export const GetProfileAnalyticsRevenueGroupEnum = {
    Date: 'date',
    Week: 'week',
    Month: 'month'
} as const;
export type GetProfileAnalyticsRevenueGroupEnum = typeof GetProfileAnalyticsRevenueGroupEnum[keyof typeof GetProfileAnalyticsRevenueGroupEnum];
/**
 * @export
 */
export const GetRelationsTagsEnum = {
    Supplier: 'supplier',
    Customer: 'customer',
    Debtor: 'debtor',
    Creditor: 'creditor',
    Current: 'current'
} as const;
export type GetRelationsTagsEnum = typeof GetRelationsTagsEnum[keyof typeof GetRelationsTagsEnum];
